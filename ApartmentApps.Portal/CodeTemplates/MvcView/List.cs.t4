<#@ template language="C#" HostSpecific="True" #>
<#@ output extension=".cshtml" #>
<#@ include file="Imports.include.t4" #>
@model IEnumerable<#= "<" + ViewDataTypeName + ">" #>
<#
// The following chained if-statement outputs the file header code and markup for a partial view, a view using a layout page, or a regular view.
if(IsPartialView) {
#>

<#
} else if(IsLayoutPageSelected) {
#>

@{
    ViewBag.Title = "<#= ViewName#>";
<#
if (!String.IsNullOrEmpty(LayoutPageFile)) {
#>
    Layout = "<#= LayoutPageFile#>";
<#
}
#>
}

<div class="row wrapper border-bottom white-bg page-heading">
    <div class="col-sm-4">
        <h2><#= ViewName#></h2>
        <ol class="breadcrumb">
            <li class="active">
                <strong><#= ViewDataTypeShortName #></strong>
            </li>
        </ol>
    </div>
</div>

<#
} else {
#>
@using GridMvc.Html
@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title><#= ViewName #></title>
</head>
<body>
<#
    PushIndent("    ");
}
#>

<div class="wrapper wrapper-content animated fadeInRight">
    <div class="row">
        <div class="col-lg-12">
            <div class="ibox float-e-margins">
                <div class="ibox-title">
                    <h5>List of <#= ViewDataTypeShortName #></h5>
					<div class="ibox-tools">
						@Html.ActionLink("Create New", "Create", null, new { @class = "btn btn-primary btn-xs"})
					</div>
                </div>
                <div class="ibox-content">
			@Html.Grid(Model).Columns(columns =>
               {
<#
IEnumerable<PropertyMetadata> properties = ModelMetadata.Properties;
foreach (PropertyMetadata property in properties) {
    if (property.Scaffold && !property.IsPrimaryKey && !property.IsForeignKey) {
        // This is a temporary work around until core scaffolding provides support for independent associations.
        if (property.IsAssociation && GetRelatedModelMetadata(property) == null) {
            continue;
        }
#>
                   columns.Add(model => model.<#= GetValueExpression(property) #>)
						.Titled(Html.DisplayNameFor(model => model.<#= GetValueExpression(property) #>).ToString())
						.Filterable(true)
						.Sortable(true)
						;
<#
    }
}
string pkName = GetPrimaryKeyName();
#>
				columns.Add()
					.Encoded(false)
					.Sanitized(false)
					.RenderValueAs(item => @Html.ActionLink("Edit", "Edit", new { id = item.<#= pkName #> }, new { @class = "" }));
				columns.Add()
					.Encoded(false)
					.Sanitized(false)
					.RenderValueAs(item => @Html.ActionLink("Delete", "Delete", new { id = item.<#= pkName#> }, new { @class = "" }));

			}).WithPaging(10)


                </div>
            </div>
        </div>
    </div>
 </div>



<#
// The following code closes the tag used in the case of a view using a layout page and the body and html tags in the case of a regular view page
#>
<#
if(!IsPartialView && !IsLayoutPageSelected) {
    ClearIndent();
#>
</body>
</html>
<#
}
#>
<#@ include file="ModelMetadataFunctions.cs.include.t4" #>