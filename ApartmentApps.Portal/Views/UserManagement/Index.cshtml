@using ApartmentApps.Api.BindingModels
@using ApartmentApps.Data
@using DataSource = Syncfusion.JavaScript.DataSource
@model IEnumerable<UserBindingModel>


<div class="wrapper wrapper-content animated fadeInRight">
    <div class="row">
        <div class="col-lg-12">
            <div class="ibox float-e-margins">
                <div class="ibox-title">
                    <h5>Users</h5>
                    <div class="ibox-tools">
                        @Html.ActionLink("Add User", "EditUser", null, new { @class = "btn btn-primary btn-xs" })
                    </div>
                </div>
                <div class="ibox-content">
                    @(
                    Html.EJ().Grid<UserBindingModel>("UserGrid")
                    .Datasource(ds => ds.URL(Url.Action("DataSource", "UserManagement")).Adaptor(AdaptorType.UrlAdaptor))
                    // .Datasource(Model.ToArray())
                    .Mappers(map =>
                        map
                        .ExportToExcelAction(Url.Action("ExportToExcel"))
                        .ExportToPdfAction(Url.Action("ExportToPdf"))
                    //.ExportToWordAction(Url.Action("ExportToWord"))
                    )
                     .ToolbarSettings(toolbar =>
                     {
                         toolbar.ShowToolbar().ToolbarItems(items =>
                         {
                             items.AddTool(ToolBarItems.ExcelExport);
                             items.AddTool(ToolBarItems.WordExport);
                             items.AddTool(ToolBarItems.PdfExport);
                         });
                     })

                    .FilterSettings(filter => { filter.FilterType(FilterType.Excel).EnableCaseSensitivity(true); })
                    //.EditSettings(edit => { edit.AllowAdding().AllowDeleting().AllowEditing().EditMode(EditMode.Dialog); })
                    .EnableToolbarItems(true)
                    //.ToolbarSettings(_=>_.ToolbarItems(new List<ToolBarItems>() { new Toolbarit}))
                    .AllowPaging(true)
                    .AllowGrouping()
                    .AllowSorting(true)
                    .AllowFiltering()
                    .ClientSideEvents(_ => _.RecordClick("clicked"))
                    .Columns(c =>
                    {

                        c.Field(model => model.Id).Visible(false).Add();
                        c.Field(model => model.BuildingName).HeaderText("Building Name").DefaultValue("--None--").Add();
                        c.Field(model => model.UnitName).HeaderText("Unit Name").DefaultValue("--None--").Add();
                        c.Field(model => model.FirstName).HeaderText("FirstName").Add();
                        c.Field(model => model.LastName).HeaderText("LastName").Add();
                        c.Field(model => model.Email).HeaderText("Email").Add();
                        c.Field(model => model.PhoneNumber).HeaderText("PhoneNumber").Add();

                        //c.HeaderText("").Template(WebUtility.UrlDecode(Html.ActionLink("Details", "Details", new { id = "{{:Id}}" }).ToHtmlString())).Add();
                        c.HeaderText("").Template(WebUtility.UrlDecode(Html.ActionLink("Delete", "DeleteUser", new { id = "{{:Id}}" }).ToHtmlString())).Add();
                    })
                    )


                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        function clicked(a) {
            console.log(a);
            window.location.href = "@Url.Action("EditUser")?id=" + a.data.Id;

        }
    </script>
}

