@using ApartmentApps.Api.BindingModels
@using ApartmentApps.Data
@using DataSource = Syncfusion.JavaScript.DataSource
@model IEnumerable< MaintenanceRequestViewModel>


<div class="wrapper wrapper-content animated fadeInRight">
    <div class="row">
        <div class="col-lg-12">
            <div class="ibox float-e-margins">
                <div class="ibox-title">
                    <h5>Maintenance Requests</h5>
                    <div class="ibox-tools">
                        @Html.ActionLink("Submit Request", "NewRequest", null, new { @class = "btn btn-primary btn-xs" })
                    </div>
                </div>
                <div class="ibox-content">
                    @(
                    Html.EJ().Grid<MaintenanceRequestViewModel>("Grid")
                    .Datasource(ds => ds.URL(Url.Action("DataSource")).Adaptor(AdaptorType.UrlAdaptor))
                    //.Datasource(Model.ToArray())
                    .Mappers(map =>
                        map
                        .ExportToExcelAction(Url.Action("ExportToExcel"))
                        .ExportToPdfAction(Url.Action("ExportToPdf"))
                    //.ExportToWordAction(Url.Action("ExportToWord"))
                    )
                     .ToolbarSettings(toolbar =>
                     {
                         toolbar.ShowToolbar().ToolbarItems(items =>
                         {
                             items.AddTool(ToolBarItems.ExcelExport);
                            // items.AddTool(ToolBarItems.WordExport);
                             items.AddTool(ToolBarItems.PdfExport);
                         });
                     })
                    .FilterSettings(filter => { filter.FilterType(FilterType.Excel).EnableCaseSensitivity(true); })
                    //.EditSettings(edit => { edit.AllowAdding().AllowDeleting().AllowEditing().EditMode(EditMode.Dialog); })
                    .EnableToolbarItems(true)
                    //.ToolbarSettings(_=>_.ToolbarItems(new List<ToolBarItems>() { new Toolbarit}))
                    .AllowPaging(true)
                    .AllowGrouping()
                    .AllowSorting(true)
                    .AllowFiltering()
                    .ClientSideEvents(_=>_.RecordClick("clicked"))
                    .Columns(c =>
                    {
                        
                        c.Field(model => model.Id).Visible(false).Add();
                        c.Field(model => model.Title).HeaderText("Type").Add();
                        c.Field(model => model.UnitName).HeaderText("Building").Add();
                        c.Field(model => model.Comments).HeaderText("Comments").Add();
                        c.Field(model => model.StatusId).HeaderText("Status").Add();
                        c.Field(model => model.SubmissionByFullName).HeaderText("Requestor").Add();
                        c.Field(model => model.StartDate).HeaderText("Started On").Type(ColumnType.DateTime).Add();
                        c.Field(model => model.CompleteDate).HeaderText("Complete On").Type(ColumnType.DateTime).Add();
                        c.Field(model => model.CompletedByFullName).HeaderText("Complete By").Add();

                        //c.HeaderText("").Template(WebUtility.UrlDecode(Html.ActionLink("Details", "Details", new { id = "{{:Id}}" }).ToHtmlString())).Add();
                        //c.HeaderText("").Template(WebUtility.UrlDecode(Html.ActionLink("Delete", "Delete", new { id = "{{:Id}}" }).ToHtmlString()))..Add();
                    })
                    )


                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        function clicked(a) {
            console.log(a);
            window.location.href = "@Url.Action("Details")?id=" + a.data.Id;
            
        }
    </script>
}

