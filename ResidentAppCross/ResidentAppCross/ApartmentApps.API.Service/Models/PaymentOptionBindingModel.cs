// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Linq;
using Newtonsoft.Json.Linq;

namespace ApartmentApps.Client.Models
{
    public partial class PaymentOptionBindingModel
    {
        private string _friendlyName;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public string FriendlyName
        {
            get { return this._friendlyName; }
            set { this._friendlyName = value; }
        }
        
        private int? _id;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public int? Id
        {
            get { return this._id; }
            set { this._id = value; }
        }
        
        private int? _type;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public int? Type
        {
            get { return this._type; }
            set { this._type = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the PaymentOptionBindingModel class.
        /// </summary>
        public PaymentOptionBindingModel()
        {
        }
        
        /// <summary>
        /// Deserialize the object
        /// </summary>
        public virtual void DeserializeJson(JToken inputObject)
        {
            if (inputObject != null && inputObject.Type != JTokenType.Null)
            {
                JToken friendlyNameValue = inputObject["FriendlyName"];
                if (friendlyNameValue != null && friendlyNameValue.Type != JTokenType.Null)
                {
                    this.FriendlyName = ((string)friendlyNameValue);
                }
                JToken idValue = inputObject["Id"];
                if (idValue != null && idValue.Type != JTokenType.Null)
                {
                    this.Id = ((int)idValue);
                }
                JToken typeValue = inputObject["Type"];
                if (typeValue != null && typeValue.Type != JTokenType.Null)
                {
                    this.Type = ((int)typeValue);
                }
            }
        }
    }
}
