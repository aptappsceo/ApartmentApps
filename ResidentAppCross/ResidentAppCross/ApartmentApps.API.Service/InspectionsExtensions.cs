// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using ApartmentApps.Client;
using ApartmentApps.Client.Models;
using Microsoft.Rest;

namespace ApartmentApps.Client
{
    public static partial class InspectionsExtensions
    {
        /// <param name='operations'>
        /// Reference to the ApartmentApps.Client.IInspections.
        /// </param>
        /// <param name='finishInspectionViewModel'>
        /// Required.
        /// </param>
        public static object FinishInspection(this IInspections operations, FinishInspectionViewModel finishInspectionViewModel)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IInspections)s).FinishInspectionAsync(finishInspectionViewModel);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ApartmentApps.Client.IInspections.
        /// </param>
        /// <param name='finishInspectionViewModel'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<object> FinishInspectionAsync(this IInspections operations, FinishInspectionViewModel finishInspectionViewModel, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<object> result = await operations.FinishInspectionWithOperationResponseAsync(finishInspectionViewModel, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the ApartmentApps.Client.IInspections.
        /// </param>
        public static IList<InspectionViewModel> Get(this IInspections operations)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IInspections)s).GetAsync();
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ApartmentApps.Client.IInspections.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<IList<InspectionViewModel>> GetAsync(this IInspections operations, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<System.Collections.Generic.IList<ApartmentApps.Client.Models.InspectionViewModel>> result = await operations.GetWithOperationResponseAsync(cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the ApartmentApps.Client.IInspections.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        public static object PauseInspection(this IInspections operations, int id)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IInspections)s).PauseInspectionAsync(id);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ApartmentApps.Client.IInspections.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<object> PauseInspectionAsync(this IInspections operations, int id, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<object> result = await operations.PauseInspectionWithOperationResponseAsync(id, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the ApartmentApps.Client.IInspections.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        public static object StartInspection(this IInspections operations, int id)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IInspections)s).StartInspectionAsync(id);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ApartmentApps.Client.IInspections.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<object> StartInspectionAsync(this IInspections operations, int id, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<object> result = await operations.StartInspectionWithOperationResponseAsync(id, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
    }
}
