// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using ApartmentApps.Client;
using ApartmentApps.Client.Models;
using Microsoft.Rest;

namespace ApartmentApps.Client
{
    public static partial class ConfigureExtensions
    {
        /// <param name='operations'>
        /// Reference to the ApartmentApps.Client.IConfigure.
        /// </param>
        /// <param name='locationId'>
        /// Required.
        /// </param>
        /// <param name='latitude'>
        /// Required.
        /// </param>
        /// <param name='longitude'>
        /// Required.
        /// </param>
        /// <param name='label'>
        /// Optional.
        /// </param>
        public static CourtesyOfficerLocation AddCourtesyLocation(this IConfigure operations, string locationId, double latitude, double longitude, string label = null)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IConfigure)s).AddCourtesyLocationAsync(locationId, latitude, longitude, label);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ApartmentApps.Client.IConfigure.
        /// </param>
        /// <param name='locationId'>
        /// Required.
        /// </param>
        /// <param name='latitude'>
        /// Required.
        /// </param>
        /// <param name='longitude'>
        /// Required.
        /// </param>
        /// <param name='label'>
        /// Optional.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<CourtesyOfficerLocation> AddCourtesyLocationAsync(this IConfigure operations, string locationId, double latitude, double longitude, string label = null, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<ApartmentApps.Client.Models.CourtesyOfficerLocation> result = await operations.AddCourtesyLocationWithOperationResponseAsync(locationId, latitude, longitude, label, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the ApartmentApps.Client.IConfigure.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        public static object DeleteCourtesyLocation(this IConfigure operations, int id)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IConfigure)s).DeleteCourtesyLocationAsync(id);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ApartmentApps.Client.IConfigure.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<object> DeleteCourtesyLocationAsync(this IConfigure operations, int id, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<object> result = await operations.DeleteCourtesyLocationWithOperationResponseAsync(id, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the ApartmentApps.Client.IConfigure.
        /// </param>
        public static IList<CourtesyOfficerLocation> GetLocations(this IConfigure operations)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IConfigure)s).GetLocationsAsync();
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ApartmentApps.Client.IConfigure.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<IList<CourtesyOfficerLocation>> GetLocationsAsync(this IConfigure operations, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<System.Collections.Generic.IList<ApartmentApps.Client.Models.CourtesyOfficerLocation>> result = await operations.GetLocationsWithOperationResponseAsync(cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
    }
}
