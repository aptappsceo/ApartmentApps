// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using ApartmentApps.Client;
using ApartmentApps.Client.Models;
using Microsoft.Rest;

namespace ApartmentApps.Client
{
    public static partial class RegisterExtensions
    {
        /// <param name='operations'>
        /// Reference to the ApartmentApps.Client.IRegister.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        public static string Delete(this IRegister operations, string id)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IRegister)s).DeleteAsync(id);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ApartmentApps.Client.IRegister.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<string> DeleteAsync(this IRegister operations, string id, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<string> result = await operations.DeleteWithOperationResponseAsync(id, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the ApartmentApps.Client.IRegister.
        /// </param>
        /// <param name='handle'>
        /// Optional.
        /// </param>
        public static string Post(this IRegister operations, string handle = null)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IRegister)s).PostAsync(handle);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ApartmentApps.Client.IRegister.
        /// </param>
        /// <param name='handle'>
        /// Optional.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<string> PostAsync(this IRegister operations, string handle = null, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<string> result = await operations.PostWithOperationResponseAsync(handle, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the ApartmentApps.Client.IRegister.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='deviceUpdate'>
        /// Required.
        /// </param>
        public static string Put(this IRegister operations, string id, DeviceRegistration deviceUpdate)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IRegister)s).PutAsync(id, deviceUpdate);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ApartmentApps.Client.IRegister.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='deviceUpdate'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<string> PutAsync(this IRegister operations, string id, DeviceRegistration deviceUpdate, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<string> result = await operations.PutWithOperationResponseAsync(id, deviceUpdate, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
    }
}
