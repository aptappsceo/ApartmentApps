/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v9.12.6284.27589 (NJsonSchema v8.11.6284.26855) (http://NSwag.org)
// </auto-generated>
//----------------------

import 'rxjs/Rx'; 
import { Observable } from 'rxjs/Observable';
import { Injectable, Inject, Optional, OpaqueToken } from '@angular/core';
import { Http, Headers, Response, RequestOptionsArgs } from '@angular/http';

export const API_BASE_URL = new OpaqueToken('API_BASE_URL');

export interface IAccountClient {
    /**
     * @return No Content
     */
    setProfilePicture(image: string): Observable<void>;
    /**
     * @return OK
     */
    getUserInfo(devicePlatform?: string, devicePushToken?: string): Observable<UserInfoViewModel>;
    /**
     * @return OK
     */
    logout(): Observable<any>;
    /**
     * @return OK
     */
    getManageInfo(returnUrl: string, generateState?: boolean): Observable<ManageInfoViewModel>;
    /**
     * @return OK
     */
    changePassword(model: ChangePasswordBindingModel): Observable<any>;
    /**
     * @return OK
     */
    setPassword(model: SetPasswordBindingModel): Observable<any>;
    /**
     * @return OK
     */
    addExternalLogin(model: AddExternalLoginBindingModel): Observable<any>;
    /**
     * @return OK
     */
    removeLogin(model: RemoveLoginBindingModel): Observable<any>;
    /**
     * @return OK
     */
    getExternalLogin(provider: string, error?: string): Observable<any>;
    /**
     * @return OK
     */
    getExternalLogins(returnUrl: string, generateState?: boolean): Observable<ExternalLoginViewModel[]>;
    /**
     * @return OK
     */
    registerFromPhone(model: RegisterFromPhoneBindingModel): Observable<any>;
    /**
     * @return OK
     */
    registerExternal(model: RegisterExternalBindingModel): Observable<any>;
}

@Injectable()
export class AccountClient extends BaseClient implements IAccountClient {
    private http: Http = null; 
    private baseUrl: string | undefined = undefined; 
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(UserContext) configuration: UserContext, @Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super(configuration);
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : "http://devservices.apartmentapps.com"; 
    }

    /**
     * @return No Content
     */
    setProfilePicture(image: string): Observable<void> {
        let url_ = this.baseUrl + "/api/Account/SetProfilePicture";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(image);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processSetProfilePicture(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processSetProfilePicture(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processSetProfilePicture(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 204) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    getUserInfo(devicePlatform?: string, devicePushToken?: string): Observable<UserInfoViewModel> {
        let url_ = this.baseUrl + "/api/Account/UserInfo?";
        if (devicePlatform !== undefined)
            url_ += "devicePlatform=" + encodeURIComponent("" + devicePlatform) + "&"; 
        if (devicePushToken !== undefined)
            url_ += "devicePushToken=" + encodeURIComponent("" + devicePushToken) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processGetUserInfo(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetUserInfo(response));
                } catch (e) {
                    return <Observable<UserInfoViewModel>><any>Observable.throw(e);
                }
            } else
                return <Observable<UserInfoViewModel>><any>Observable.throw(response);
        });
    }

    protected processGetUserInfo(response: Response): UserInfoViewModel {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: UserInfoViewModel | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? UserInfoViewModel.fromJS(resultData200) : new UserInfoViewModel();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    logout(): Observable<any> {
        let url_ = this.baseUrl + "/api/Account/Logout";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processLogout(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processLogout(response));
                } catch (e) {
                    return <Observable<any>><any>Observable.throw(e);
                }
            } else
                return <Observable<any>><any>Observable.throw(response);
        });
    }

    protected processLogout(response: Response): any {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: any | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {};
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        result200[key] = resultData200[key] !== undefined ? resultData200[key] : {};
                }
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    getManageInfo(returnUrl: string, generateState?: boolean): Observable<ManageInfoViewModel> {
        let url_ = this.baseUrl + "/api/Account/ManageInfo?";
        if (returnUrl === undefined || returnUrl === null)
            throw new Error("The parameter 'returnUrl' must be defined and cannot be null.");
        else
            url_ += "returnUrl=" + encodeURIComponent("" + returnUrl) + "&"; 
        if (generateState !== undefined)
            url_ += "generateState=" + encodeURIComponent("" + generateState) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processGetManageInfo(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetManageInfo(response));
                } catch (e) {
                    return <Observable<ManageInfoViewModel>><any>Observable.throw(e);
                }
            } else
                return <Observable<ManageInfoViewModel>><any>Observable.throw(response);
        });
    }

    protected processGetManageInfo(response: Response): ManageInfoViewModel {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: ManageInfoViewModel | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ManageInfoViewModel.fromJS(resultData200) : new ManageInfoViewModel();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    changePassword(model: ChangePasswordBindingModel): Observable<any> {
        let url_ = this.baseUrl + "/api/Account/ChangePassword";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processChangePassword(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processChangePassword(response));
                } catch (e) {
                    return <Observable<any>><any>Observable.throw(e);
                }
            } else
                return <Observable<any>><any>Observable.throw(response);
        });
    }

    protected processChangePassword(response: Response): any {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: any | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {};
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        result200[key] = resultData200[key] !== undefined ? resultData200[key] : {};
                }
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    setPassword(model: SetPasswordBindingModel): Observable<any> {
        let url_ = this.baseUrl + "/api/Account/SetPassword";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processSetPassword(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processSetPassword(response));
                } catch (e) {
                    return <Observable<any>><any>Observable.throw(e);
                }
            } else
                return <Observable<any>><any>Observable.throw(response);
        });
    }

    protected processSetPassword(response: Response): any {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: any | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {};
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        result200[key] = resultData200[key] !== undefined ? resultData200[key] : {};
                }
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    addExternalLogin(model: AddExternalLoginBindingModel): Observable<any> {
        let url_ = this.baseUrl + "/api/Account/AddExternalLogin";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processAddExternalLogin(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processAddExternalLogin(response));
                } catch (e) {
                    return <Observable<any>><any>Observable.throw(e);
                }
            } else
                return <Observable<any>><any>Observable.throw(response);
        });
    }

    protected processAddExternalLogin(response: Response): any {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: any | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {};
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        result200[key] = resultData200[key] !== undefined ? resultData200[key] : {};
                }
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    removeLogin(model: RemoveLoginBindingModel): Observable<any> {
        let url_ = this.baseUrl + "/api/Account/RemoveLogin";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processRemoveLogin(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processRemoveLogin(response));
                } catch (e) {
                    return <Observable<any>><any>Observable.throw(e);
                }
            } else
                return <Observable<any>><any>Observable.throw(response);
        });
    }

    protected processRemoveLogin(response: Response): any {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: any | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {};
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        result200[key] = resultData200[key] !== undefined ? resultData200[key] : {};
                }
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    getExternalLogin(provider: string, error?: string): Observable<any> {
        let url_ = this.baseUrl + "/api/Account/ExternalLogin?";
        if (provider === undefined || provider === null)
            throw new Error("The parameter 'provider' must be defined and cannot be null.");
        else
            url_ += "provider=" + encodeURIComponent("" + provider) + "&"; 
        if (error !== undefined)
            url_ += "error=" + encodeURIComponent("" + error) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processGetExternalLogin(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetExternalLogin(response));
                } catch (e) {
                    return <Observable<any>><any>Observable.throw(e);
                }
            } else
                return <Observable<any>><any>Observable.throw(response);
        });
    }

    protected processGetExternalLogin(response: Response): any {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: any | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {};
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        result200[key] = resultData200[key] !== undefined ? resultData200[key] : {};
                }
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    getExternalLogins(returnUrl: string, generateState?: boolean): Observable<ExternalLoginViewModel[]> {
        let url_ = this.baseUrl + "/api/Account/ExternalLogins?";
        if (returnUrl === undefined || returnUrl === null)
            throw new Error("The parameter 'returnUrl' must be defined and cannot be null.");
        else
            url_ += "returnUrl=" + encodeURIComponent("" + returnUrl) + "&"; 
        if (generateState !== undefined)
            url_ += "generateState=" + encodeURIComponent("" + generateState) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processGetExternalLogins(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetExternalLogins(response));
                } catch (e) {
                    return <Observable<ExternalLoginViewModel[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<ExternalLoginViewModel[]>><any>Observable.throw(response);
        });
    }

    protected processGetExternalLogins(response: Response): ExternalLoginViewModel[] {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: ExternalLoginViewModel[] | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(ExternalLoginViewModel.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    registerFromPhone(model: RegisterFromPhoneBindingModel): Observable<any> {
        let url_ = this.baseUrl + "/api/Account/Register";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processRegisterFromPhone(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processRegisterFromPhone(response));
                } catch (e) {
                    return <Observable<any>><any>Observable.throw(e);
                }
            } else
                return <Observable<any>><any>Observable.throw(response);
        });
    }

    protected processRegisterFromPhone(response: Response): any {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: any | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {};
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        result200[key] = resultData200[key] !== undefined ? resultData200[key] : {};
                }
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    registerExternal(model: RegisterExternalBindingModel): Observable<any> {
        let url_ = this.baseUrl + "/api/Account/RegisterExternal";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processRegisterExternal(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processRegisterExternal(response));
                } catch (e) {
                    return <Observable<any>><any>Observable.throw(e);
                }
            } else
                return <Observable<any>><any>Observable.throw(response);
        });
    }

    protected processRegisterExternal(response: Response): any {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: any | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {};
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        result200[key] = resultData200[key] !== undefined ? resultData200[key] : {};
                }
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response, null);
    }
}

export interface IAlertsClient {
    /**
     * @return OK
     */
    get(): Observable<AlertBindingModel[]>;
    /**
     * @return No Content
     */
    post(alertId: number): Observable<void>;
    /**
     * @return OK
     */
    getCount(): Observable<AlertsCountBindingModel>;
}

@Injectable()
export class AlertsClient extends BaseClient implements IAlertsClient {
    private http: Http = null; 
    private baseUrl: string | undefined = undefined; 
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(UserContext) configuration: UserContext, @Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super(configuration);
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : "http://devservices.apartmentapps.com"; 
    }

    /**
     * @return OK
     */
    get(): Observable<AlertBindingModel[]> {
        let url_ = this.baseUrl + "/api/Alerts";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processGet(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGet(response));
                } catch (e) {
                    return <Observable<AlertBindingModel[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<AlertBindingModel[]>><any>Observable.throw(response);
        });
    }

    protected processGet(response: Response): AlertBindingModel[] {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: AlertBindingModel[] | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(AlertBindingModel.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return No Content
     */
    post(alertId: number): Observable<void> {
        let url_ = this.baseUrl + "/api/Alerts?";
        if (alertId === undefined || alertId === null)
            throw new Error("The parameter 'alertId' must be defined and cannot be null.");
        else
            url_ += "alertId=" + encodeURIComponent("" + alertId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processPost(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processPost(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processPost(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 204) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    getCount(): Observable<AlertsCountBindingModel> {
        let url_ = this.baseUrl + "/api/Alerts";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "head",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processGetCount(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetCount(response));
                } catch (e) {
                    return <Observable<AlertsCountBindingModel>><any>Observable.throw(e);
                }
            } else
                return <Observable<AlertsCountBindingModel>><any>Observable.throw(response);
        });
    }

    protected processGetCount(response: Response): AlertsCountBindingModel {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: AlertsCountBindingModel | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? AlertsCountBindingModel.fromJS(resultData200) : new AlertsCountBindingModel();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response, null);
    }
}

export interface IBuildingClient {
    /**
     * @return OK
     */
    schema(): Observable<any>;
    /**
     * @return OK
     */
    fetch(query: Query): Observable<QueryResultOfBuildingViewModel>;
    /**
     * @return OK
     */
    entry(id: string): Observable<BuildingViewModel>;
    /**
     * @return OK
     */
    delete(id: string): Observable<any>;
    /**
     * @return OK
     */
    save(entry: BuildingViewModel): Observable<any>;
    /**
     * @return OK
     */
    save2(entry: BuildingViewModel): Observable<any>;
    /**
     * @return OK
     */
    toExcel(query: Query): Observable<any>;
    /**
     * @return OK
     */
    toExcel2(query: Query): Observable<any>;
    /**
     * @return OK
     */
    toPDF(query: Query): Observable<any>;
    /**
     * @return OK
     */
    toPDF2(query: Query): Observable<any>;
}

@Injectable()
export class BuildingClient extends BaseClient implements IBuildingClient {
    private http: Http = null; 
    private baseUrl: string | undefined = undefined; 
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(UserContext) configuration: UserContext, @Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super(configuration);
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : "http://devservices.apartmentapps.com"; 
    }

    /**
     * @return OK
     */
    schema(): Observable<any> {
        let url_ = this.baseUrl + "/api/Building/schema";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processSchema(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processSchema(response));
                } catch (e) {
                    return <Observable<any>><any>Observable.throw(e);
                }
            } else
                return <Observable<any>><any>Observable.throw(response);
        });
    }

    protected processSchema(response: Response): any {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: any | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {};
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        result200[key] = resultData200[key] !== undefined ? resultData200[key] : {};
                }
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    fetch(query: Query): Observable<QueryResultOfBuildingViewModel> {
        let url_ = this.baseUrl + "/api/Building/fetch";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query ? query.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processFetch(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processFetch(response));
                } catch (e) {
                    return <Observable<QueryResultOfBuildingViewModel>><any>Observable.throw(e);
                }
            } else
                return <Observable<QueryResultOfBuildingViewModel>><any>Observable.throw(response);
        });
    }

    protected processFetch(response: Response): QueryResultOfBuildingViewModel {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: QueryResultOfBuildingViewModel | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? QueryResultOfBuildingViewModel.fromJS(resultData200) : new QueryResultOfBuildingViewModel();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    entry(id: string): Observable<BuildingViewModel> {
        let url_ = this.baseUrl + "/api/Building/entry?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processEntry(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processEntry(response));
                } catch (e) {
                    return <Observable<BuildingViewModel>><any>Observable.throw(e);
                }
            } else
                return <Observable<BuildingViewModel>><any>Observable.throw(response);
        });
    }

    protected processEntry(response: Response): BuildingViewModel {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: BuildingViewModel | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? BuildingViewModel.fromJS(resultData200) : new BuildingViewModel();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    delete(id: string): Observable<any> {
        let url_ = this.baseUrl + "/api/Building/delete?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processDelete(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processDelete(response));
                } catch (e) {
                    return <Observable<any>><any>Observable.throw(e);
                }
            } else
                return <Observable<any>><any>Observable.throw(response);
        });
    }

    protected processDelete(response: Response): any {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: any | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {};
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        result200[key] = resultData200[key] !== undefined ? resultData200[key] : {};
                }
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    save(entry: BuildingViewModel): Observable<any> {
        let url_ = this.baseUrl + "/api/Building/save";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(entry ? entry.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processSave(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processSave(response));
                } catch (e) {
                    return <Observable<any>><any>Observable.throw(e);
                }
            } else
                return <Observable<any>><any>Observable.throw(response);
        });
    }

    protected processSave(response: Response): any {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: any | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {};
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        result200[key] = resultData200[key] !== undefined ? resultData200[key] : {};
                }
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    save2(entry: BuildingViewModel): Observable<any> {
        let url_ = this.baseUrl + "/api/Building/save";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(entry ? entry.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processSave2(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processSave2(response));
                } catch (e) {
                    return <Observable<any>><any>Observable.throw(e);
                }
            } else
                return <Observable<any>><any>Observable.throw(response);
        });
    }

    protected processSave2(response: Response): any {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: any | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {};
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        result200[key] = resultData200[key] !== undefined ? resultData200[key] : {};
                }
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    toExcel(query: Query): Observable<any> {
        let url_ = this.baseUrl + "/api/Building/excel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query ? query.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processToExcel(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processToExcel(response));
                } catch (e) {
                    return <Observable<any>><any>Observable.throw(e);
                }
            } else
                return <Observable<any>><any>Observable.throw(response);
        });
    }

    protected processToExcel(response: Response): any {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: any | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {};
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        result200[key] = resultData200[key] !== undefined ? resultData200[key] : {};
                }
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    toExcel2(query: Query): Observable<any> {
        let url_ = this.baseUrl + "/api/Building/excel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query ? query.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processToExcel2(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processToExcel2(response));
                } catch (e) {
                    return <Observable<any>><any>Observable.throw(e);
                }
            } else
                return <Observable<any>><any>Observable.throw(response);
        });
    }

    protected processToExcel2(response: Response): any {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: any | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {};
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        result200[key] = resultData200[key] !== undefined ? resultData200[key] : {};
                }
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    toPDF(query: Query): Observable<any> {
        let url_ = this.baseUrl + "/api/Building/pdf";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query ? query.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processToPDF(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processToPDF(response));
                } catch (e) {
                    return <Observable<any>><any>Observable.throw(e);
                }
            } else
                return <Observable<any>><any>Observable.throw(response);
        });
    }

    protected processToPDF(response: Response): any {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: any | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {};
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        result200[key] = resultData200[key] !== undefined ? resultData200[key] : {};
                }
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    toPDF2(query: Query): Observable<any> {
        let url_ = this.baseUrl + "/api/Building/pdf";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query ? query.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processToPDF2(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processToPDF2(response));
                } catch (e) {
                    return <Observable<any>><any>Observable.throw(e);
                }
            } else
                return <Observable<any>><any>Observable.throw(response);
        });
    }

    protected processToPDF2(response: Response): any {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: any | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {};
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        result200[key] = resultData200[key] !== undefined ? resultData200[key] : {};
                }
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response, null);
    }
}

export interface ICheckinsClient {
    /**
     * @return OK
     */
    get(): Observable<CourtesyCheckinBindingModel[]>;
    /**
     * @return OK
     */
    post(locationId: number, latitude?: number, longitude?: number): Observable<any>;
}

@Injectable()
export class CheckinsClient extends BaseClient implements ICheckinsClient {
    private http: Http = null; 
    private baseUrl: string | undefined = undefined; 
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(UserContext) configuration: UserContext, @Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super(configuration);
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : "http://devservices.apartmentapps.com"; 
    }

    /**
     * @return OK
     */
    get(): Observable<CourtesyCheckinBindingModel[]> {
        let url_ = this.baseUrl + "/api/Checkins";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processGet(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGet(response));
                } catch (e) {
                    return <Observable<CourtesyCheckinBindingModel[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<CourtesyCheckinBindingModel[]>><any>Observable.throw(response);
        });
    }

    protected processGet(response: Response): CourtesyCheckinBindingModel[] {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: CourtesyCheckinBindingModel[] | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(CourtesyCheckinBindingModel.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    post(locationId: number, latitude?: number, longitude?: number): Observable<any> {
        let url_ = this.baseUrl + "/api/Checkins?";
        if (locationId === undefined || locationId === null)
            throw new Error("The parameter 'locationId' must be defined and cannot be null.");
        else
            url_ += "locationId=" + encodeURIComponent("" + locationId) + "&"; 
        if (latitude !== undefined)
            url_ += "latitude=" + encodeURIComponent("" + latitude) + "&"; 
        if (longitude !== undefined)
            url_ += "longitude=" + encodeURIComponent("" + longitude) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processPost(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processPost(response));
                } catch (e) {
                    return <Observable<any>><any>Observable.throw(e);
                }
            } else
                return <Observable<any>><any>Observable.throw(response);
        });
    }

    protected processPost(response: Response): any {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: any | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {};
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        result200[key] = resultData200[key] !== undefined ? resultData200[key] : {};
                }
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response, null);
    }
}

export interface IConfigureClient {
    /**
     * @return No Content
     */
    addLocation(qrCode: string, latitude: number, longitude: number, label?: string): Observable<void>;
    /**
     * @return OK
     */
    getLocations(): Observable<LocationBindingModel[]>;
    /**
     * @return No Content
     */
    deleteLocation(id: number, type: string): Observable<void>;
}

@Injectable()
export class ConfigureClient extends BaseClient implements IConfigureClient {
    private http: Http = null; 
    private baseUrl: string | undefined = undefined; 
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(UserContext) configuration: UserContext, @Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super(configuration);
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : "http://devservices.apartmentapps.com"; 
    }

    /**
     * @return No Content
     */
    addLocation(qrCode: string, latitude: number, longitude: number, label?: string): Observable<void> {
        let url_ = this.baseUrl + "/AddLocation?";
        if (qrCode === undefined || qrCode === null)
            throw new Error("The parameter 'qrCode' must be defined and cannot be null.");
        else
            url_ += "qrCode=" + encodeURIComponent("" + qrCode) + "&"; 
        if (latitude === undefined || latitude === null)
            throw new Error("The parameter 'latitude' must be defined and cannot be null.");
        else
            url_ += "latitude=" + encodeURIComponent("" + latitude) + "&"; 
        if (longitude === undefined || longitude === null)
            throw new Error("The parameter 'longitude' must be defined and cannot be null.");
        else
            url_ += "longitude=" + encodeURIComponent("" + longitude) + "&"; 
        if (label !== undefined)
            url_ += "label=" + encodeURIComponent("" + label) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processAddLocation(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processAddLocation(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processAddLocation(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 204) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    getLocations(): Observable<LocationBindingModel[]> {
        let url_ = this.baseUrl + "/GetLocations";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processGetLocations(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetLocations(response));
                } catch (e) {
                    return <Observable<LocationBindingModel[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<LocationBindingModel[]>><any>Observable.throw(response);
        });
    }

    protected processGetLocations(response: Response): LocationBindingModel[] {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: LocationBindingModel[] | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(LocationBindingModel.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return No Content
     */
    deleteLocation(id: number, type: string): Observable<void> {
        let url_ = this.baseUrl + "/DeleteLocation?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        if (type === undefined || type === null)
            throw new Error("The parameter 'type' must be defined and cannot be null.");
        else
            url_ += "type=" + encodeURIComponent("" + type) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processDeleteLocation(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processDeleteLocation(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processDeleteLocation(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 204) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response, null);
    }
}

export interface ICorporationClient {
    /**
     * @return OK
     */
    schema(): Observable<any>;
    /**
     * @return OK
     */
    fetch(query: Query): Observable<QueryResultOfCorporationIndexBindingModel>;
    /**
     * @return OK
     */
    entry(id: string): Observable<CorporationIndexBindingModel>;
    /**
     * @return OK
     */
    delete(id: string): Observable<any>;
    /**
     * @return OK
     */
    save(entry: CorporationIndexBindingModel): Observable<any>;
    /**
     * @return OK
     */
    save2(entry: CorporationIndexBindingModel): Observable<any>;
    /**
     * @return OK
     */
    toExcel(query: Query): Observable<any>;
    /**
     * @return OK
     */
    toExcel2(query: Query): Observable<any>;
    /**
     * @return OK
     */
    toPDF(query: Query): Observable<any>;
    /**
     * @return OK
     */
    toPDF2(query: Query): Observable<any>;
    /**
     * @return OK
     */
    activate(id: string): Observable<any>;
}

@Injectable()
export class CorporationClient extends BaseClient implements ICorporationClient {
    private http: Http = null; 
    private baseUrl: string | undefined = undefined; 
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(UserContext) configuration: UserContext, @Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super(configuration);
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : "http://devservices.apartmentapps.com"; 
    }

    /**
     * @return OK
     */
    schema(): Observable<any> {
        let url_ = this.baseUrl + "/api/Corporation/schema";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processSchema(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processSchema(response));
                } catch (e) {
                    return <Observable<any>><any>Observable.throw(e);
                }
            } else
                return <Observable<any>><any>Observable.throw(response);
        });
    }

    protected processSchema(response: Response): any {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: any | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {};
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        result200[key] = resultData200[key] !== undefined ? resultData200[key] : {};
                }
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    fetch(query: Query): Observable<QueryResultOfCorporationIndexBindingModel> {
        let url_ = this.baseUrl + "/api/Corporation/fetch";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query ? query.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processFetch(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processFetch(response));
                } catch (e) {
                    return <Observable<QueryResultOfCorporationIndexBindingModel>><any>Observable.throw(e);
                }
            } else
                return <Observable<QueryResultOfCorporationIndexBindingModel>><any>Observable.throw(response);
        });
    }

    protected processFetch(response: Response): QueryResultOfCorporationIndexBindingModel {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: QueryResultOfCorporationIndexBindingModel | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? QueryResultOfCorporationIndexBindingModel.fromJS(resultData200) : new QueryResultOfCorporationIndexBindingModel();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    entry(id: string): Observable<CorporationIndexBindingModel> {
        let url_ = this.baseUrl + "/api/Corporation/entry?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processEntry(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processEntry(response));
                } catch (e) {
                    return <Observable<CorporationIndexBindingModel>><any>Observable.throw(e);
                }
            } else
                return <Observable<CorporationIndexBindingModel>><any>Observable.throw(response);
        });
    }

    protected processEntry(response: Response): CorporationIndexBindingModel {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: CorporationIndexBindingModel | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? CorporationIndexBindingModel.fromJS(resultData200) : new CorporationIndexBindingModel();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    delete(id: string): Observable<any> {
        let url_ = this.baseUrl + "/api/Corporation/delete?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processDelete(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processDelete(response));
                } catch (e) {
                    return <Observable<any>><any>Observable.throw(e);
                }
            } else
                return <Observable<any>><any>Observable.throw(response);
        });
    }

    protected processDelete(response: Response): any {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: any | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {};
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        result200[key] = resultData200[key] !== undefined ? resultData200[key] : {};
                }
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    save(entry: CorporationIndexBindingModel): Observable<any> {
        let url_ = this.baseUrl + "/api/Corporation/save";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(entry ? entry.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processSave(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processSave(response));
                } catch (e) {
                    return <Observable<any>><any>Observable.throw(e);
                }
            } else
                return <Observable<any>><any>Observable.throw(response);
        });
    }

    protected processSave(response: Response): any {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: any | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {};
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        result200[key] = resultData200[key] !== undefined ? resultData200[key] : {};
                }
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    save2(entry: CorporationIndexBindingModel): Observable<any> {
        let url_ = this.baseUrl + "/api/Corporation/save";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(entry ? entry.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processSave2(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processSave2(response));
                } catch (e) {
                    return <Observable<any>><any>Observable.throw(e);
                }
            } else
                return <Observable<any>><any>Observable.throw(response);
        });
    }

    protected processSave2(response: Response): any {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: any | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {};
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        result200[key] = resultData200[key] !== undefined ? resultData200[key] : {};
                }
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    toExcel(query: Query): Observable<any> {
        let url_ = this.baseUrl + "/api/Corporation/excel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query ? query.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processToExcel(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processToExcel(response));
                } catch (e) {
                    return <Observable<any>><any>Observable.throw(e);
                }
            } else
                return <Observable<any>><any>Observable.throw(response);
        });
    }

    protected processToExcel(response: Response): any {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: any | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {};
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        result200[key] = resultData200[key] !== undefined ? resultData200[key] : {};
                }
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    toExcel2(query: Query): Observable<any> {
        let url_ = this.baseUrl + "/api/Corporation/excel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query ? query.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processToExcel2(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processToExcel2(response));
                } catch (e) {
                    return <Observable<any>><any>Observable.throw(e);
                }
            } else
                return <Observable<any>><any>Observable.throw(response);
        });
    }

    protected processToExcel2(response: Response): any {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: any | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {};
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        result200[key] = resultData200[key] !== undefined ? resultData200[key] : {};
                }
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    toPDF(query: Query): Observable<any> {
        let url_ = this.baseUrl + "/api/Corporation/pdf";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query ? query.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processToPDF(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processToPDF(response));
                } catch (e) {
                    return <Observable<any>><any>Observable.throw(e);
                }
            } else
                return <Observable<any>><any>Observable.throw(response);
        });
    }

    protected processToPDF(response: Response): any {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: any | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {};
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        result200[key] = resultData200[key] !== undefined ? resultData200[key] : {};
                }
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    toPDF2(query: Query): Observable<any> {
        let url_ = this.baseUrl + "/api/Corporation/pdf";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query ? query.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processToPDF2(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processToPDF2(response));
                } catch (e) {
                    return <Observable<any>><any>Observable.throw(e);
                }
            } else
                return <Observable<any>><any>Observable.throw(response);
        });
    }

    protected processToPDF2(response: Response): any {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: any | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {};
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        result200[key] = resultData200[key] !== undefined ? resultData200[key] : {};
                }
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    activate(id: string): Observable<any> {
        let url_ = this.baseUrl + "/api/Corporation/activate?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processActivate(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processActivate(response));
                } catch (e) {
                    return <Observable<any>><any>Observable.throw(e);
                }
            } else
                return <Observable<any>><any>Observable.throw(response);
        });
    }

    protected processActivate(response: Response): any {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: any | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {};
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        result200[key] = resultData200[key] !== undefined ? resultData200[key] : {};
                }
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response, null);
    }
}

export interface ICourtesyClient {
    /**
     * @return OK
     */
    schema(): Observable<any>;
    /**
     * @return OK
     */
    fetch(query: Query): Observable<QueryResultOfIncidentReportViewModel>;
    /**
     * @return OK
     */
    save(entry: IncidentReportFormModel): Observable<any>;
    /**
     * @return OK
     */
    delete(id: string): Observable<any>;
    /**
     * @return OK
     */
    incidentStatuses(query?: string): Observable<QueryResultOfLookupBindingModel>;
    /**
     * @return OK
     */
    listRequests(): Observable<IncidentIndexBindingModel[]>;
    /**
     * @return OK
     */
    get(id: number): Observable<IncidentReportBindingModel>;
    /**
     * @return No Content
     */
    assignUnitToIncidentReport(id: number, unitId: number): Observable<void>;
    /**
     * @return No Content
     */
    submitIncidentReport(request: IncidentReportModel): Observable<void>;
    /**
     * @return No Content
     */
    openIncidentReport(id: number, comments: string, images: string[]): Observable<void>;
    /**
     * @return No Content
     */
    pauseIncidentReport(id: number, comments: string, images: string[]): Observable<void>;
    /**
     * @return No Content
     */
    closeIncidentReport(id: number, comments: string, images: string[]): Observable<void>;
    /**
     * @return OK
     */
    entry(id: string): Observable<IncidentReportFormModel>;
}

@Injectable()
export class CourtesyClient extends BaseClient implements ICourtesyClient {
    private http: Http = null; 
    private baseUrl: string | undefined = undefined; 
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(UserContext) configuration: UserContext, @Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super(configuration);
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : "http://devservices.apartmentapps.com"; 
    }

    /**
     * @return OK
     */
    schema(): Observable<any> {
        let url_ = this.baseUrl + "/api/Courtesy/schema";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processSchema(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processSchema(response));
                } catch (e) {
                    return <Observable<any>><any>Observable.throw(e);
                }
            } else
                return <Observable<any>><any>Observable.throw(response);
        });
    }

    protected processSchema(response: Response): any {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: any | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {};
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        result200[key] = resultData200[key] !== undefined ? resultData200[key] : {};
                }
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    fetch(query: Query): Observable<QueryResultOfIncidentReportViewModel> {
        let url_ = this.baseUrl + "/api/Courtesy/fetch";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query ? query.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processFetch(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processFetch(response));
                } catch (e) {
                    return <Observable<QueryResultOfIncidentReportViewModel>><any>Observable.throw(e);
                }
            } else
                return <Observable<QueryResultOfIncidentReportViewModel>><any>Observable.throw(response);
        });
    }

    protected processFetch(response: Response): QueryResultOfIncidentReportViewModel {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: QueryResultOfIncidentReportViewModel | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? QueryResultOfIncidentReportViewModel.fromJS(resultData200) : new QueryResultOfIncidentReportViewModel();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    save(entry: IncidentReportFormModel): Observable<any> {
        let url_ = this.baseUrl + "/api/Courtesy/save";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(entry ? entry.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processSave(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processSave(response));
                } catch (e) {
                    return <Observable<any>><any>Observable.throw(e);
                }
            } else
                return <Observable<any>><any>Observable.throw(response);
        });
    }

    protected processSave(response: Response): any {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: any | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {};
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        result200[key] = resultData200[key] !== undefined ? resultData200[key] : {};
                }
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    delete(id: string): Observable<any> {
        let url_ = this.baseUrl + "/api/Courtesy/delete?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processDelete(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processDelete(response));
                } catch (e) {
                    return <Observable<any>><any>Observable.throw(e);
                }
            } else
                return <Observable<any>><any>Observable.throw(response);
        });
    }

    protected processDelete(response: Response): any {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: any | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {};
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        result200[key] = resultData200[key] !== undefined ? resultData200[key] : {};
                }
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    incidentStatuses(query?: string): Observable<QueryResultOfLookupBindingModel> {
        let url_ = this.baseUrl + "/api/Courtesy/IncidentStatuses?";
        if (query !== undefined)
            url_ += "query=" + encodeURIComponent("" + query) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processIncidentStatuses(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processIncidentStatuses(response));
                } catch (e) {
                    return <Observable<QueryResultOfLookupBindingModel>><any>Observable.throw(e);
                }
            } else
                return <Observable<QueryResultOfLookupBindingModel>><any>Observable.throw(response);
        });
    }

    protected processIncidentStatuses(response: Response): QueryResultOfLookupBindingModel {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: QueryResultOfLookupBindingModel | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? QueryResultOfLookupBindingModel.fromJS(resultData200) : new QueryResultOfLookupBindingModel();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    listRequests(): Observable<IncidentIndexBindingModel[]> {
        let url_ = this.baseUrl + "/api/Courtesy/List";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processListRequests(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processListRequests(response));
                } catch (e) {
                    return <Observable<IncidentIndexBindingModel[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<IncidentIndexBindingModel[]>><any>Observable.throw(response);
        });
    }

    protected processListRequests(response: Response): IncidentIndexBindingModel[] {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: IncidentIndexBindingModel[] | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(IncidentIndexBindingModel.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    get(id: number): Observable<IncidentReportBindingModel> {
        let url_ = this.baseUrl + "/api/Courtesy/GetIncidentReport?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processGet(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGet(response));
                } catch (e) {
                    return <Observable<IncidentReportBindingModel>><any>Observable.throw(e);
                }
            } else
                return <Observable<IncidentReportBindingModel>><any>Observable.throw(response);
        });
    }

    protected processGet(response: Response): IncidentReportBindingModel {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: IncidentReportBindingModel | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? IncidentReportBindingModel.fromJS(resultData200) : new IncidentReportBindingModel();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return No Content
     */
    assignUnitToIncidentReport(id: number, unitId: number): Observable<void> {
        let url_ = this.baseUrl + "/api/Courtesy/AssignUnitToIncidentReport?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        if (unitId === undefined || unitId === null)
            throw new Error("The parameter 'unitId' must be defined and cannot be null.");
        else
            url_ += "unitId=" + encodeURIComponent("" + unitId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processAssignUnitToIncidentReport(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processAssignUnitToIncidentReport(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processAssignUnitToIncidentReport(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 204) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return No Content
     */
    submitIncidentReport(request: IncidentReportModel): Observable<void> {
        let url_ = this.baseUrl + "/api/Courtesy/SubmitIncidentReport";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request ? request.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processSubmitIncidentReport(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processSubmitIncidentReport(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processSubmitIncidentReport(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 204) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return No Content
     */
    openIncidentReport(id: number, comments: string, images: string[]): Observable<void> {
        let url_ = this.baseUrl + "/api/Courtesy/OpenIncidentReport?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        if (comments === undefined || comments === null)
            throw new Error("The parameter 'comments' must be defined and cannot be null.");
        else
            url_ += "comments=" + encodeURIComponent("" + comments) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(images);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processOpenIncidentReport(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processOpenIncidentReport(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processOpenIncidentReport(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 204) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return No Content
     */
    pauseIncidentReport(id: number, comments: string, images: string[]): Observable<void> {
        let url_ = this.baseUrl + "/api/Courtesy/PauseIncidentReport?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        if (comments === undefined || comments === null)
            throw new Error("The parameter 'comments' must be defined and cannot be null.");
        else
            url_ += "comments=" + encodeURIComponent("" + comments) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(images);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processPauseIncidentReport(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processPauseIncidentReport(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processPauseIncidentReport(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 204) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return No Content
     */
    closeIncidentReport(id: number, comments: string, images: string[]): Observable<void> {
        let url_ = this.baseUrl + "/api/Courtesy/CloseIncidentReport?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        if (comments === undefined || comments === null)
            throw new Error("The parameter 'comments' must be defined and cannot be null.");
        else
            url_ += "comments=" + encodeURIComponent("" + comments) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(images);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processCloseIncidentReport(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processCloseIncidentReport(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processCloseIncidentReport(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 204) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    entry(id: string): Observable<IncidentReportFormModel> {
        let url_ = this.baseUrl + "/api/Courtesy/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processEntry(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processEntry(response));
                } catch (e) {
                    return <Observable<IncidentReportFormModel>><any>Observable.throw(e);
                }
            } else
                return <Observable<IncidentReportFormModel>><any>Observable.throw(response);
        });
    }

    protected processEntry(response: Response): IncidentReportFormModel {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: IncidentReportFormModel | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? IncidentReportFormModel.fromJS(resultData200) : new IncidentReportFormModel();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response, null);
    }
}

export interface IInspectionsClient {
    /**
     * @return OK
     */
    get(): Observable<InspectionViewModel[]>;
    /**
     * @return No Content
     */
    startInspection(id: number): Observable<void>;
    /**
     * @return No Content
     */
    pauseInspection(id: number): Observable<void>;
    /**
     * @return No Content
     */
    finishInspection(finishInspectionViewModel: FinishInspectionViewModel): Observable<void>;
}

@Injectable()
export class InspectionsClient extends BaseClient implements IInspectionsClient {
    private http: Http = null; 
    private baseUrl: string | undefined = undefined; 
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(UserContext) configuration: UserContext, @Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super(configuration);
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : "http://devservices.apartmentapps.com"; 
    }

    /**
     * @return OK
     */
    get(): Observable<InspectionViewModel[]> {
        let url_ = this.baseUrl + "/api/Inspections/List";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processGet(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGet(response));
                } catch (e) {
                    return <Observable<InspectionViewModel[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<InspectionViewModel[]>><any>Observable.throw(response);
        });
    }

    protected processGet(response: Response): InspectionViewModel[] {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: InspectionViewModel[] | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(InspectionViewModel.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return No Content
     */
    startInspection(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/Inspections/StartInspection?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processStartInspection(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processStartInspection(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processStartInspection(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 204) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return No Content
     */
    pauseInspection(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/Inspections/PauseInspection?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processPauseInspection(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processPauseInspection(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processPauseInspection(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 204) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return No Content
     */
    finishInspection(finishInspectionViewModel: FinishInspectionViewModel): Observable<void> {
        let url_ = this.baseUrl + "/api/Inspections/FinishInspection";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(finishInspectionViewModel ? finishInspectionViewModel.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processFinishInspection(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processFinishInspection(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processFinishInspection(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 204) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response, null);
    }
}

export interface ILookupsClient {
    /**
     * @return OK
     */
    getLookups(type: string, search: string): Observable<QueryResultOfLookupBindingModel>;
    /**
     * @return OK
     */
    maintenanceRequestType(query?: string): Observable<QueryResultOfLookupBindingModel>;
    /**
     * @return OK
     */
    maintenanceRequestStatus(query?: string): Observable<QueryResultOfLookupBindingModel>;
    /**
     * @return OK
     */
    lookupUnits(query?: string): Observable<QueryResultOfLookupBindingModel>;
    /**
     * @return OK
     */
    users(query?: string): Observable<QueryResultOfLookupBindingModel>;
    /**
     * @return OK
     */
    getUnits(): Observable<LookupPairModel[]>;
}

@Injectable()
export class LookupsClient extends BaseClient implements ILookupsClient {
    private http: Http = null; 
    private baseUrl: string | undefined = undefined; 
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(UserContext) configuration: UserContext, @Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super(configuration);
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : "http://devservices.apartmentapps.com"; 
    }

    /**
     * @return OK
     */
    getLookups(type: string, search: string): Observable<QueryResultOfLookupBindingModel> {
        let url_ = this.baseUrl + "/api/Lookups/GetLookups?";
        if (type === undefined || type === null)
            throw new Error("The parameter 'type' must be defined and cannot be null.");
        else
            url_ += "type=" + encodeURIComponent("" + type) + "&"; 
        if (search === undefined || search === null)
            throw new Error("The parameter 'search' must be defined and cannot be null.");
        else
            url_ += "search=" + encodeURIComponent("" + search) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processGetLookups(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetLookups(response));
                } catch (e) {
                    return <Observable<QueryResultOfLookupBindingModel>><any>Observable.throw(e);
                }
            } else
                return <Observable<QueryResultOfLookupBindingModel>><any>Observable.throw(response);
        });
    }

    protected processGetLookups(response: Response): QueryResultOfLookupBindingModel {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: QueryResultOfLookupBindingModel | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? QueryResultOfLookupBindingModel.fromJS(resultData200) : new QueryResultOfLookupBindingModel();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    maintenanceRequestType(query?: string): Observable<QueryResultOfLookupBindingModel> {
        let url_ = this.baseUrl + "/api/Lookups/MaintenanceRequestType?";
        if (query !== undefined)
            url_ += "query=" + encodeURIComponent("" + query) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processMaintenanceRequestType(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processMaintenanceRequestType(response));
                } catch (e) {
                    return <Observable<QueryResultOfLookupBindingModel>><any>Observable.throw(e);
                }
            } else
                return <Observable<QueryResultOfLookupBindingModel>><any>Observable.throw(response);
        });
    }

    protected processMaintenanceRequestType(response: Response): QueryResultOfLookupBindingModel {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: QueryResultOfLookupBindingModel | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? QueryResultOfLookupBindingModel.fromJS(resultData200) : new QueryResultOfLookupBindingModel();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    maintenanceRequestStatus(query?: string): Observable<QueryResultOfLookupBindingModel> {
        let url_ = this.baseUrl + "/api/Lookups/MaintenanceRequestStatus?";
        if (query !== undefined)
            url_ += "query=" + encodeURIComponent("" + query) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processMaintenanceRequestStatus(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processMaintenanceRequestStatus(response));
                } catch (e) {
                    return <Observable<QueryResultOfLookupBindingModel>><any>Observable.throw(e);
                }
            } else
                return <Observable<QueryResultOfLookupBindingModel>><any>Observable.throw(response);
        });
    }

    protected processMaintenanceRequestStatus(response: Response): QueryResultOfLookupBindingModel {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: QueryResultOfLookupBindingModel | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? QueryResultOfLookupBindingModel.fromJS(resultData200) : new QueryResultOfLookupBindingModel();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    lookupUnits(query?: string): Observable<QueryResultOfLookupBindingModel> {
        let url_ = this.baseUrl + "/api/Lookups/LookupUnits?";
        if (query !== undefined)
            url_ += "query=" + encodeURIComponent("" + query) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processLookupUnits(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processLookupUnits(response));
                } catch (e) {
                    return <Observable<QueryResultOfLookupBindingModel>><any>Observable.throw(e);
                }
            } else
                return <Observable<QueryResultOfLookupBindingModel>><any>Observable.throw(response);
        });
    }

    protected processLookupUnits(response: Response): QueryResultOfLookupBindingModel {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: QueryResultOfLookupBindingModel | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? QueryResultOfLookupBindingModel.fromJS(resultData200) : new QueryResultOfLookupBindingModel();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    users(query?: string): Observable<QueryResultOfLookupBindingModel> {
        let url_ = this.baseUrl + "/api/Lookups/Users?";
        if (query !== undefined)
            url_ += "query=" + encodeURIComponent("" + query) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processUsers(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processUsers(response));
                } catch (e) {
                    return <Observable<QueryResultOfLookupBindingModel>><any>Observable.throw(e);
                }
            } else
                return <Observable<QueryResultOfLookupBindingModel>><any>Observable.throw(response);
        });
    }

    protected processUsers(response: Response): QueryResultOfLookupBindingModel {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: QueryResultOfLookupBindingModel | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? QueryResultOfLookupBindingModel.fromJS(resultData200) : new QueryResultOfLookupBindingModel();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    getUnits(): Observable<LookupPairModel[]> {
        let url_ = this.baseUrl + "/api/Lookups/Units";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processGetUnits(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetUnits(response));
                } catch (e) {
                    return <Observable<LookupPairModel[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<LookupPairModel[]>><any>Observable.throw(response);
        });
    }

    protected processGetUnits(response: Response): LookupPairModel[] {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: LookupPairModel[] | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(LookupPairModel.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response, null);
    }
}

export interface IMaitenanceClient {
    /**
     * @return OK
     */
    listRequests(): Observable<MaintenanceIndexBindingModel[]>;
    /**
     * @return OK
     */
    get(id: number): Observable<MaintenanceBindingModel>;
    /**
     * @return OK
     */
    fetch(query: Query): Observable<QueryResultOfMaintenanceRequestViewModel>;
    /**
     * @return No Content
     */
    scheduleRequest(id: number, scheduleDate: Date): Observable<void>;
    /**
     * @return No Content
     */
    submitRequest(request: MaitenanceRequestModel): Observable<void>;
    /**
     * @return No Content
     */
    completeRequest(id: number, comments: string, images: string[]): Observable<void>;
    /**
     * @return No Content
     */
    pauseRequest(id: number, comments: string, images: string[]): Observable<void>;
    /**
     * @return No Content
     */
    startRequest(id: number, comments: string, images: string[]): Observable<void>;
    /**
     * @return OK
     */
    getMaitenanceRequestTypes(): Observable<LookupPairModel[]>;
    /**
     * @return OK
     */
    getWorkOrders(workerId: string): Observable<MaitenanceRequest[]>;
    /**
     * @return OK
     */
    getByResident(workerId: string): Observable<MaitenanceRequest[]>;
}

@Injectable()
export class MaitenanceClient extends BaseClient implements IMaitenanceClient {
    private http: Http = null; 
    private baseUrl: string | undefined = undefined; 
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(UserContext) configuration: UserContext, @Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super(configuration);
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : "http://devservices.apartmentapps.com"; 
    }

    /**
     * @return OK
     */
    listRequests(): Observable<MaintenanceIndexBindingModel[]> {
        let url_ = this.baseUrl + "/api/Maitenance/List";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processListRequests(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processListRequests(response));
                } catch (e) {
                    return <Observable<MaintenanceIndexBindingModel[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<MaintenanceIndexBindingModel[]>><any>Observable.throw(response);
        });
    }

    protected processListRequests(response: Response): MaintenanceIndexBindingModel[] {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: MaintenanceIndexBindingModel[] | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(MaintenanceIndexBindingModel.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    get(id: number): Observable<MaintenanceBindingModel> {
        let url_ = this.baseUrl + "/api/Maitenance/GetRequest?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processGet(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGet(response));
                } catch (e) {
                    return <Observable<MaintenanceBindingModel>><any>Observable.throw(e);
                }
            } else
                return <Observable<MaintenanceBindingModel>><any>Observable.throw(response);
        });
    }

    protected processGet(response: Response): MaintenanceBindingModel {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: MaintenanceBindingModel | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? MaintenanceBindingModel.fromJS(resultData200) : new MaintenanceBindingModel();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    fetch(query: Query): Observable<QueryResultOfMaintenanceRequestViewModel> {
        let url_ = this.baseUrl + "/api/Maitenance/fetch";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query ? query.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processFetch(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processFetch(response));
                } catch (e) {
                    return <Observable<QueryResultOfMaintenanceRequestViewModel>><any>Observable.throw(e);
                }
            } else
                return <Observable<QueryResultOfMaintenanceRequestViewModel>><any>Observable.throw(response);
        });
    }

    protected processFetch(response: Response): QueryResultOfMaintenanceRequestViewModel {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: QueryResultOfMaintenanceRequestViewModel | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? QueryResultOfMaintenanceRequestViewModel.fromJS(resultData200) : new QueryResultOfMaintenanceRequestViewModel();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return No Content
     */
    scheduleRequest(id: number, scheduleDate: Date): Observable<void> {
        let url_ = this.baseUrl + "/api/Maitenance/ScheduleRequest?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        if (scheduleDate === undefined || scheduleDate === null)
            throw new Error("The parameter 'scheduleDate' must be defined and cannot be null.");
        else
            url_ += "scheduleDate=" + encodeURIComponent("" + scheduleDate.toJSON()) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processScheduleRequest(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processScheduleRequest(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processScheduleRequest(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 204) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return No Content
     */
    submitRequest(request: MaitenanceRequestModel): Observable<void> {
        let url_ = this.baseUrl + "/api/Maitenance/SubmitRequest";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request ? request.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processSubmitRequest(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processSubmitRequest(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processSubmitRequest(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 204) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return No Content
     */
    completeRequest(id: number, comments: string, images: string[]): Observable<void> {
        let url_ = this.baseUrl + "/api/Maitenance/CompleteRequest?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        if (comments === undefined || comments === null)
            throw new Error("The parameter 'comments' must be defined and cannot be null.");
        else
            url_ += "comments=" + encodeURIComponent("" + comments) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(images);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processCompleteRequest(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processCompleteRequest(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processCompleteRequest(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 204) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return No Content
     */
    pauseRequest(id: number, comments: string, images: string[]): Observable<void> {
        let url_ = this.baseUrl + "/api/Maitenance/PauseRequest?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        if (comments === undefined || comments === null)
            throw new Error("The parameter 'comments' must be defined and cannot be null.");
        else
            url_ += "comments=" + encodeURIComponent("" + comments) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(images);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processPauseRequest(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processPauseRequest(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processPauseRequest(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 204) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return No Content
     */
    startRequest(id: number, comments: string, images: string[]): Observable<void> {
        let url_ = this.baseUrl + "/api/Maitenance/StartRequest?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        if (comments === undefined || comments === null)
            throw new Error("The parameter 'comments' must be defined and cannot be null.");
        else
            url_ += "comments=" + encodeURIComponent("" + comments) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(images);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processStartRequest(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processStartRequest(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processStartRequest(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 204) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    getMaitenanceRequestTypes(): Observable<LookupPairModel[]> {
        let url_ = this.baseUrl + "/api/Maitenance/GetMaitenanceRequestTypes";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processGetMaitenanceRequestTypes(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetMaitenanceRequestTypes(response));
                } catch (e) {
                    return <Observable<LookupPairModel[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<LookupPairModel[]>><any>Observable.throw(response);
        });
    }

    protected processGetMaitenanceRequestTypes(response: Response): LookupPairModel[] {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: LookupPairModel[] | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(LookupPairModel.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    getWorkOrders(workerId: string): Observable<MaitenanceRequest[]> {
        let url_ = this.baseUrl + "/api/Maitenance/GetWorkOrders?";
        if (workerId === undefined || workerId === null)
            throw new Error("The parameter 'workerId' must be defined and cannot be null.");
        else
            url_ += "workerId=" + encodeURIComponent("" + workerId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processGetWorkOrders(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetWorkOrders(response));
                } catch (e) {
                    return <Observable<MaitenanceRequest[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<MaitenanceRequest[]>><any>Observable.throw(response);
        });
    }

    protected processGetWorkOrders(response: Response): MaitenanceRequest[] {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: MaitenanceRequest[] | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(MaitenanceRequest.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    getByResident(workerId: string): Observable<MaitenanceRequest[]> {
        let url_ = this.baseUrl + "/api/Maitenance/GetByResident?";
        if (workerId === undefined || workerId === null)
            throw new Error("The parameter 'workerId' must be defined and cannot be null.");
        else
            url_ += "workerId=" + encodeURIComponent("" + workerId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processGetByResident(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetByResident(response));
                } catch (e) {
                    return <Observable<MaitenanceRequest[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<MaitenanceRequest[]>><any>Observable.throw(response);
        });
    }

    protected processGetByResident(response: Response): MaitenanceRequest[] {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: MaitenanceRequest[] | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(MaitenanceRequest.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response, null);
    }
}

export interface IMessagingClient {
    /**
     * @return OK
     */
    getMessage(id: number): Observable<AlertBindingModel>;
}

@Injectable()
export class MessagingClient extends BaseClient implements IMessagingClient {
    private http: Http = null; 
    private baseUrl: string | undefined = undefined; 
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(UserContext) configuration: UserContext, @Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super(configuration);
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : "http://devservices.apartmentapps.com"; 
    }

    /**
     * @return OK
     */
    getMessage(id: number): Observable<AlertBindingModel> {
        let url_ = this.baseUrl + "/api/Messaging/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processGetMessage(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetMessage(response));
                } catch (e) {
                    return <Observable<AlertBindingModel>><any>Observable.throw(e);
                }
            } else
                return <Observable<AlertBindingModel>><any>Observable.throw(response);
        });
    }

    protected processGetMessage(response: Response): AlertBindingModel {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: AlertBindingModel | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? AlertBindingModel.fromJS(resultData200) : new AlertBindingModel();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response, null);
    }
}

export interface IModulesClient {
    /**
     * @return OK
     */
    saveConfig(moduleName: string, configJson: string): Observable<any>;
    /**
     * @return OK
     */
    getConfig(moduleName: string): Observable<any>;
    /**
     * @return OK
     */
    moduleSchemas(): Observable<any[]>;
}

@Injectable()
export class ModulesClient extends BaseClient implements IModulesClient {
    private http: Http = null; 
    private baseUrl: string | undefined = undefined; 
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(UserContext) configuration: UserContext, @Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super(configuration);
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : "http://devservices.apartmentapps.com"; 
    }

    /**
     * @return OK
     */
    saveConfig(moduleName: string, configJson: string): Observable<any> {
        let url_ = this.baseUrl + "/api/Modules/SaveConfig?";
        if (moduleName === undefined || moduleName === null)
            throw new Error("The parameter 'moduleName' must be defined and cannot be null.");
        else
            url_ += "moduleName=" + encodeURIComponent("" + moduleName) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(configJson);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processSaveConfig(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processSaveConfig(response));
                } catch (e) {
                    return <Observable<any>><any>Observable.throw(e);
                }
            } else
                return <Observable<any>><any>Observable.throw(response);
        });
    }

    protected processSaveConfig(response: Response): any {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: any | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {};
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        result200[key] = resultData200[key] !== undefined ? resultData200[key] : {};
                }
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    getConfig(moduleName: string): Observable<any> {
        let url_ = this.baseUrl + "/api/Modules/GetConfig?";
        if (moduleName === undefined || moduleName === null)
            throw new Error("The parameter 'moduleName' must be defined and cannot be null.");
        else
            url_ += "moduleName=" + encodeURIComponent("" + moduleName) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processGetConfig(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetConfig(response));
                } catch (e) {
                    return <Observable<any>><any>Observable.throw(e);
                }
            } else
                return <Observable<any>><any>Observable.throw(response);
        });
    }

    protected processGetConfig(response: Response): any {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: any | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {};
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        result200[key] = resultData200[key] !== undefined ? resultData200[key] : {};
                }
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    moduleSchemas(): Observable<any[]> {
        let url_ = this.baseUrl + "/api/Modules/ModuleSchemas";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processModuleSchemas(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processModuleSchemas(response));
                } catch (e) {
                    return <Observable<any[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<any[]>><any>Observable.throw(response);
        });
    }

    protected processModuleSchemas(response: Response): any[] {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: any[] | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(item);
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response, null);
    }
}

export interface INotifiationsClient {
    /**
     * @return OK
     */
    post(pns: string, message: string, to_tag: string): Observable<any>;
}

@Injectable()
export class NotifiationsClient extends BaseClient implements INotifiationsClient {
    private http: Http = null; 
    private baseUrl: string | undefined = undefined; 
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(UserContext) configuration: UserContext, @Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super(configuration);
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : "http://devservices.apartmentapps.com"; 
    }

    /**
     * @return OK
     */
    post(pns: string, message: string, to_tag: string): Observable<any> {
        let url_ = this.baseUrl + "/api/Notifiations?";
        if (pns === undefined || pns === null)
            throw new Error("The parameter 'pns' must be defined and cannot be null.");
        else
            url_ += "pns=" + encodeURIComponent("" + pns) + "&"; 
        if (to_tag === undefined || to_tag === null)
            throw new Error("The parameter 'to_tag' must be defined and cannot be null.");
        else
            url_ += "to_tag=" + encodeURIComponent("" + to_tag) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(message);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processPost(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processPost(response));
                } catch (e) {
                    return <Observable<any>><any>Observable.throw(e);
                }
            } else
                return <Observable<any>><any>Observable.throw(response);
        });
    }

    protected processPost(response: Response): any {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: any | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {};
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        result200[key] = resultData200[key] !== undefined ? resultData200[key] : {};
                }
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response, null);
    }
}

export interface IPaymentsClient {
    /**
     * @return OK
     */
    addCreditCard(addCreditCard: AddCreditCardBindingModel): Observable<AddCreditCardResult>;
    /**
     * @return OK
     */
    addBankAccount(addBankAccount: AddBankAccountBindingModel): Observable<AddBankAccountResult>;
    /**
     * @return OK
     */
    getPaymentOptions(): Observable<PaymentOptionBindingModel[]>;
    /**
     * @return OK
     */
    getPaymentHistory(): Observable<any[]>;
    /**
     * @return OK
     */
    getRentSummary(): Observable<PaymentListBindingModel>;
    /**
     * @return OK
     */
    getPaymentSummary(paymentOptionId: number): Observable<PaymentListBindingModel>;
    /**
     * @return OK
     */
    makePayment(makePaymentBindingModel: MakePaymentBindingModel): Observable<MakePaymentResult>;
    /**
     * @return OK
     */
    updateForteState(): Observable<any>;
}

@Injectable()
export class PaymentsClient extends BaseClient implements IPaymentsClient {
    private http: Http = null; 
    private baseUrl: string | undefined = undefined; 
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(UserContext) configuration: UserContext, @Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super(configuration);
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : "http://devservices.apartmentapps.com"; 
    }

    /**
     * @return OK
     */
    addCreditCard(addCreditCard: AddCreditCardBindingModel): Observable<AddCreditCardResult> {
        let url_ = this.baseUrl + "/api/Payments/AddCreditCard";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(addCreditCard ? addCreditCard.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processAddCreditCard(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processAddCreditCard(response));
                } catch (e) {
                    return <Observable<AddCreditCardResult>><any>Observable.throw(e);
                }
            } else
                return <Observable<AddCreditCardResult>><any>Observable.throw(response);
        });
    }

    protected processAddCreditCard(response: Response): AddCreditCardResult {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: AddCreditCardResult | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? AddCreditCardResult.fromJS(resultData200) : new AddCreditCardResult();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    addBankAccount(addBankAccount: AddBankAccountBindingModel): Observable<AddBankAccountResult> {
        let url_ = this.baseUrl + "/api/Payments/AddBankAccount";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(addBankAccount ? addBankAccount.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processAddBankAccount(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processAddBankAccount(response));
                } catch (e) {
                    return <Observable<AddBankAccountResult>><any>Observable.throw(e);
                }
            } else
                return <Observable<AddBankAccountResult>><any>Observable.throw(response);
        });
    }

    protected processAddBankAccount(response: Response): AddBankAccountResult {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: AddBankAccountResult | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? AddBankAccountResult.fromJS(resultData200) : new AddBankAccountResult();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    getPaymentOptions(): Observable<PaymentOptionBindingModel[]> {
        let url_ = this.baseUrl + "/api/Payments/GetPaymentOptions";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processGetPaymentOptions(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetPaymentOptions(response));
                } catch (e) {
                    return <Observable<PaymentOptionBindingModel[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<PaymentOptionBindingModel[]>><any>Observable.throw(response);
        });
    }

    protected processGetPaymentOptions(response: Response): PaymentOptionBindingModel[] {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: PaymentOptionBindingModel[] | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(PaymentOptionBindingModel.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    getPaymentHistory(): Observable<any[]> {
        let url_ = this.baseUrl + "/api/Payments/GetPaymentHistory";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processGetPaymentHistory(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetPaymentHistory(response));
                } catch (e) {
                    return <Observable<any[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<any[]>><any>Observable.throw(response);
        });
    }

    protected processGetPaymentHistory(response: Response): any[] {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: any[] | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(item);
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    getRentSummary(): Observable<PaymentListBindingModel> {
        let url_ = this.baseUrl + "/api/Payments/RentSummary";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processGetRentSummary(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetRentSummary(response));
                } catch (e) {
                    return <Observable<PaymentListBindingModel>><any>Observable.throw(e);
                }
            } else
                return <Observable<PaymentListBindingModel>><any>Observable.throw(response);
        });
    }

    protected processGetRentSummary(response: Response): PaymentListBindingModel {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: PaymentListBindingModel | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PaymentListBindingModel.fromJS(resultData200) : new PaymentListBindingModel();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    getPaymentSummary(paymentOptionId: number): Observable<PaymentListBindingModel> {
        let url_ = this.baseUrl + "/api/Payments/PaymentSummary?";
        if (paymentOptionId === undefined || paymentOptionId === null)
            throw new Error("The parameter 'paymentOptionId' must be defined and cannot be null.");
        else
            url_ += "paymentOptionId=" + encodeURIComponent("" + paymentOptionId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processGetPaymentSummary(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetPaymentSummary(response));
                } catch (e) {
                    return <Observable<PaymentListBindingModel>><any>Observable.throw(e);
                }
            } else
                return <Observable<PaymentListBindingModel>><any>Observable.throw(response);
        });
    }

    protected processGetPaymentSummary(response: Response): PaymentListBindingModel {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: PaymentListBindingModel | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PaymentListBindingModel.fromJS(resultData200) : new PaymentListBindingModel();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    makePayment(makePaymentBindingModel: MakePaymentBindingModel): Observable<MakePaymentResult> {
        let url_ = this.baseUrl + "/api/Payments/MakePayment";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(makePaymentBindingModel ? makePaymentBindingModel.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processMakePayment(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processMakePayment(response));
                } catch (e) {
                    return <Observable<MakePaymentResult>><any>Observable.throw(e);
                }
            } else
                return <Observable<MakePaymentResult>><any>Observable.throw(response);
        });
    }

    protected processMakePayment(response: Response): MakePaymentResult {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: MakePaymentResult | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? MakePaymentResult.fromJS(resultData200) : new MakePaymentResult();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    updateForteState(): Observable<any> {
        let url_ = this.baseUrl + "/api/Payments/UpdateForteState";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processUpdateForteState(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processUpdateForteState(response));
                } catch (e) {
                    return <Observable<any>><any>Observable.throw(e);
                }
            } else
                return <Observable<any>><any>Observable.throw(response);
        });
    }

    protected processUpdateForteState(response: Response): any {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: any | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {};
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        result200[key] = resultData200[key] !== undefined ? resultData200[key] : {};
                }
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response, null);
    }
}

export interface IPropertyClient {
    /**
     * @return OK
     */
    schema(): Observable<any>;
    /**
     * @return OK
     */
    fetch(query: Query): Observable<QueryResultOfPropertyIndexBindingModel>;
    /**
     * @return OK
     */
    entry(id: string): Observable<PropertyIndexBindingModel>;
    /**
     * @return OK
     */
    delete(id: string): Observable<any>;
    /**
     * @return OK
     */
    save(entry: PropertyIndexBindingModel): Observable<any>;
    /**
     * @return OK
     */
    save2(entry: PropertyIndexBindingModel): Observable<any>;
    /**
     * @return OK
     */
    toExcel(query: Query): Observable<any>;
    /**
     * @return OK
     */
    toExcel2(query: Query): Observable<any>;
    /**
     * @return OK
     */
    toPDF(query: Query): Observable<any>;
    /**
     * @return OK
     */
    toPDF2(query: Query): Observable<any>;
    /**
     * @return OK
     */
    activate(id: string): Observable<any>;
}

@Injectable()
export class PropertyClient extends BaseClient implements IPropertyClient {
    private http: Http = null; 
    private baseUrl: string | undefined = undefined; 
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(UserContext) configuration: UserContext, @Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super(configuration);
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : "http://devservices.apartmentapps.com"; 
    }

    /**
     * @return OK
     */
    schema(): Observable<any> {
        let url_ = this.baseUrl + "/api/Property/schema";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processSchema(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processSchema(response));
                } catch (e) {
                    return <Observable<any>><any>Observable.throw(e);
                }
            } else
                return <Observable<any>><any>Observable.throw(response);
        });
    }

    protected processSchema(response: Response): any {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: any | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {};
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        result200[key] = resultData200[key] !== undefined ? resultData200[key] : {};
                }
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    fetch(query: Query): Observable<QueryResultOfPropertyIndexBindingModel> {
        let url_ = this.baseUrl + "/api/Property/fetch";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query ? query.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processFetch(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processFetch(response));
                } catch (e) {
                    return <Observable<QueryResultOfPropertyIndexBindingModel>><any>Observable.throw(e);
                }
            } else
                return <Observable<QueryResultOfPropertyIndexBindingModel>><any>Observable.throw(response);
        });
    }

    protected processFetch(response: Response): QueryResultOfPropertyIndexBindingModel {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: QueryResultOfPropertyIndexBindingModel | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? QueryResultOfPropertyIndexBindingModel.fromJS(resultData200) : new QueryResultOfPropertyIndexBindingModel();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    entry(id: string): Observable<PropertyIndexBindingModel> {
        let url_ = this.baseUrl + "/api/Property/entry?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processEntry(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processEntry(response));
                } catch (e) {
                    return <Observable<PropertyIndexBindingModel>><any>Observable.throw(e);
                }
            } else
                return <Observable<PropertyIndexBindingModel>><any>Observable.throw(response);
        });
    }

    protected processEntry(response: Response): PropertyIndexBindingModel {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: PropertyIndexBindingModel | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PropertyIndexBindingModel.fromJS(resultData200) : new PropertyIndexBindingModel();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    delete(id: string): Observable<any> {
        let url_ = this.baseUrl + "/api/Property/delete?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processDelete(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processDelete(response));
                } catch (e) {
                    return <Observable<any>><any>Observable.throw(e);
                }
            } else
                return <Observable<any>><any>Observable.throw(response);
        });
    }

    protected processDelete(response: Response): any {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: any | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {};
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        result200[key] = resultData200[key] !== undefined ? resultData200[key] : {};
                }
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    save(entry: PropertyIndexBindingModel): Observable<any> {
        let url_ = this.baseUrl + "/api/Property/save";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(entry ? entry.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processSave(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processSave(response));
                } catch (e) {
                    return <Observable<any>><any>Observable.throw(e);
                }
            } else
                return <Observable<any>><any>Observable.throw(response);
        });
    }

    protected processSave(response: Response): any {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: any | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {};
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        result200[key] = resultData200[key] !== undefined ? resultData200[key] : {};
                }
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    save2(entry: PropertyIndexBindingModel): Observable<any> {
        let url_ = this.baseUrl + "/api/Property/save";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(entry ? entry.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processSave2(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processSave2(response));
                } catch (e) {
                    return <Observable<any>><any>Observable.throw(e);
                }
            } else
                return <Observable<any>><any>Observable.throw(response);
        });
    }

    protected processSave2(response: Response): any {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: any | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {};
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        result200[key] = resultData200[key] !== undefined ? resultData200[key] : {};
                }
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    toExcel(query: Query): Observable<any> {
        let url_ = this.baseUrl + "/api/Property/excel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query ? query.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processToExcel(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processToExcel(response));
                } catch (e) {
                    return <Observable<any>><any>Observable.throw(e);
                }
            } else
                return <Observable<any>><any>Observable.throw(response);
        });
    }

    protected processToExcel(response: Response): any {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: any | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {};
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        result200[key] = resultData200[key] !== undefined ? resultData200[key] : {};
                }
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    toExcel2(query: Query): Observable<any> {
        let url_ = this.baseUrl + "/api/Property/excel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query ? query.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processToExcel2(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processToExcel2(response));
                } catch (e) {
                    return <Observable<any>><any>Observable.throw(e);
                }
            } else
                return <Observable<any>><any>Observable.throw(response);
        });
    }

    protected processToExcel2(response: Response): any {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: any | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {};
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        result200[key] = resultData200[key] !== undefined ? resultData200[key] : {};
                }
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    toPDF(query: Query): Observable<any> {
        let url_ = this.baseUrl + "/api/Property/pdf";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query ? query.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processToPDF(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processToPDF(response));
                } catch (e) {
                    return <Observable<any>><any>Observable.throw(e);
                }
            } else
                return <Observable<any>><any>Observable.throw(response);
        });
    }

    protected processToPDF(response: Response): any {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: any | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {};
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        result200[key] = resultData200[key] !== undefined ? resultData200[key] : {};
                }
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    toPDF2(query: Query): Observable<any> {
        let url_ = this.baseUrl + "/api/Property/pdf";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query ? query.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processToPDF2(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processToPDF2(response));
                } catch (e) {
                    return <Observable<any>><any>Observable.throw(e);
                }
            } else
                return <Observable<any>><any>Observable.throw(response);
        });
    }

    protected processToPDF2(response: Response): any {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: any | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {};
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        result200[key] = resultData200[key] !== undefined ? resultData200[key] : {};
                }
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    activate(id: string): Observable<any> {
        let url_ = this.baseUrl + "/api/Property/activate?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processActivate(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processActivate(response));
                } catch (e) {
                    return <Observable<any>><any>Observable.throw(e);
                }
            } else
                return <Observable<any>><any>Observable.throw(response);
        });
    }

    protected processActivate(response: Response): any {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: any | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {};
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        result200[key] = resultData200[key] !== undefined ? resultData200[key] : {};
                }
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response, null);
    }
}

export interface IProspectClient {
    /**
     * @return OK
     */
    submitApplicant(vm: ProspectApplicationBindingModel): Observable<any>;
    /**
     * @return OK
     */
    scanId(base64Image: string): Observable<ScanIdResult>;
    /**
     * @return OK
     */
    scanIdByText(text: string): Observable<ScanIdResult>;
    /**
     * @return OK
     */
    getDesiredPropertyTypes(): Observable<LookupPairModel[]>;
    /**
     * @return OK
     */
    getHowdYouHereAboutUsItems(): Observable<LookupPairModel[]>;
    /**
     * @return OK
     */
    getProspectApplications(): Observable<ProspectApplicationBindingModel[]>;
    /**
     * @return OK
     */
    getProspectApplication(id: string): Observable<ProspectApplicationBindingModel>;
    /**
     * @return No Content
     */
    delete(id: string): Observable<void>;
}

@Injectable()
export class ProspectClient extends BaseClient implements IProspectClient {
    private http: Http = null; 
    private baseUrl: string | undefined = undefined; 
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(UserContext) configuration: UserContext, @Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super(configuration);
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : "http://devservices.apartmentapps.com"; 
    }

    /**
     * @return OK
     */
    submitApplicant(vm: ProspectApplicationBindingModel): Observable<any> {
        let url_ = this.baseUrl + "/api/ProspectId/SubmitApplicant";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(vm ? vm.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processSubmitApplicant(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processSubmitApplicant(response));
                } catch (e) {
                    return <Observable<any>><any>Observable.throw(e);
                }
            } else
                return <Observable<any>><any>Observable.throw(response);
        });
    }

    protected processSubmitApplicant(response: Response): any {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: any | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {};
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        result200[key] = resultData200[key] !== undefined ? resultData200[key] : {};
                }
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    scanId(base64Image: string): Observable<ScanIdResult> {
        let url_ = this.baseUrl + "/api/ProspectId/ScanId";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(base64Image);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processScanId(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processScanId(response));
                } catch (e) {
                    return <Observable<ScanIdResult>><any>Observable.throw(e);
                }
            } else
                return <Observable<ScanIdResult>><any>Observable.throw(response);
        });
    }

    protected processScanId(response: Response): ScanIdResult {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: ScanIdResult | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ScanIdResult.fromJS(resultData200) : new ScanIdResult();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    scanIdByText(text: string): Observable<ScanIdResult> {
        let url_ = this.baseUrl + "/api/ProspectId/ScanIdByText";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(text);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processScanIdByText(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processScanIdByText(response));
                } catch (e) {
                    return <Observable<ScanIdResult>><any>Observable.throw(e);
                }
            } else
                return <Observable<ScanIdResult>><any>Observable.throw(response);
        });
    }

    protected processScanIdByText(response: Response): ScanIdResult {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: ScanIdResult | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ScanIdResult.fromJS(resultData200) : new ScanIdResult();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    getDesiredPropertyTypes(): Observable<LookupPairModel[]> {
        let url_ = this.baseUrl + "/api/ProspectId/GetDesiredPropertyTypes";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processGetDesiredPropertyTypes(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetDesiredPropertyTypes(response));
                } catch (e) {
                    return <Observable<LookupPairModel[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<LookupPairModel[]>><any>Observable.throw(response);
        });
    }

    protected processGetDesiredPropertyTypes(response: Response): LookupPairModel[] {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: LookupPairModel[] | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(LookupPairModel.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    getHowdYouHereAboutUsItems(): Observable<LookupPairModel[]> {
        let url_ = this.baseUrl + "/api/ProspectId/GetHowdYouHereAboutUsItems";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processGetHowdYouHereAboutUsItems(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetHowdYouHereAboutUsItems(response));
                } catch (e) {
                    return <Observable<LookupPairModel[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<LookupPairModel[]>><any>Observable.throw(response);
        });
    }

    protected processGetHowdYouHereAboutUsItems(response: Response): LookupPairModel[] {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: LookupPairModel[] | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(LookupPairModel.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    getProspectApplications(): Observable<ProspectApplicationBindingModel[]> {
        let url_ = this.baseUrl + "/api/ProspectId/GetProspectApplications";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processGetProspectApplications(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetProspectApplications(response));
                } catch (e) {
                    return <Observable<ProspectApplicationBindingModel[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<ProspectApplicationBindingModel[]>><any>Observable.throw(response);
        });
    }

    protected processGetProspectApplications(response: Response): ProspectApplicationBindingModel[] {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: ProspectApplicationBindingModel[] | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(ProspectApplicationBindingModel.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    getProspectApplication(id: string): Observable<ProspectApplicationBindingModel> {
        let url_ = this.baseUrl + "/api/ProspectId/GetProspectApplication?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processGetProspectApplication(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetProspectApplication(response));
                } catch (e) {
                    return <Observable<ProspectApplicationBindingModel>><any>Observable.throw(e);
                }
            } else
                return <Observable<ProspectApplicationBindingModel>><any>Observable.throw(response);
        });
    }

    protected processGetProspectApplication(response: Response): ProspectApplicationBindingModel {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: ProspectApplicationBindingModel | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ProspectApplicationBindingModel.fromJS(resultData200) : new ProspectApplicationBindingModel();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return No Content
     */
    delete(id: string): Observable<void> {
        let url_ = this.baseUrl + "/api/ProspectId/Delete?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processDelete(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processDelete(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processDelete(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 204) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response, null);
    }
}

export interface IRegisterClient {
    /**
     * @return OK
     */
    post(handle?: string): Observable<string>;
    /**
     * @return OK
     */
    put(id: string, deviceUpdate: DeviceRegistration): Observable<any>;
    /**
     * @return OK
     */
    delete(id: string): Observable<any>;
}

@Injectable()
export class RegisterClient extends BaseClient implements IRegisterClient {
    private http: Http = null; 
    private baseUrl: string | undefined = undefined; 
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(UserContext) configuration: UserContext, @Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super(configuration);
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : "http://devservices.apartmentapps.com"; 
    }

    /**
     * @return OK
     */
    post(handle?: string): Observable<string> {
        let url_ = this.baseUrl + "/api/Register?";
        if (handle !== undefined)
            url_ += "handle=" + encodeURIComponent("" + handle) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processPost(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processPost(response));
                } catch (e) {
                    return <Observable<string>><any>Observable.throw(e);
                }
            } else
                return <Observable<string>><any>Observable.throw(response);
        });
    }

    protected processPost(response: Response): string {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: string | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    put(id: string, deviceUpdate: DeviceRegistration): Observable<any> {
        let url_ = this.baseUrl + "/api/Register/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(deviceUpdate ? deviceUpdate.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processPut(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processPut(response));
                } catch (e) {
                    return <Observable<any>><any>Observable.throw(e);
                }
            } else
                return <Observable<any>><any>Observable.throw(response);
        });
    }

    protected processPut(response: Response): any {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: any | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {};
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        result200[key] = resultData200[key] !== undefined ? resultData200[key] : {};
                }
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    delete(id: string): Observable<any> {
        let url_ = this.baseUrl + "/api/Register/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processDelete(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processDelete(response));
                } catch (e) {
                    return <Observable<any>><any>Observable.throw(e);
                }
            } else
                return <Observable<any>><any>Observable.throw(response);
        });
    }

    protected processDelete(response: Response): any {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: any | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {};
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        result200[key] = resultData200[key] !== undefined ? resultData200[key] : {};
                }
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response, null);
    }
}

export interface ISearchEnginesClient {
    /**
     * @return OK
     */
    getSearchModel(id: string): Observable<SearchModelGetResponse>;
}

@Injectable()
export class SearchEnginesClient extends BaseClient implements ISearchEnginesClient {
    private http: Http = null; 
    private baseUrl: string | undefined = undefined; 
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(UserContext) configuration: UserContext, @Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super(configuration);
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : "http://devservices.apartmentapps.com"; 
    }

    /**
     * @return OK
     */
    getSearchModel(id: string): Observable<SearchModelGetResponse> {
        let url_ = this.baseUrl + "/api/searches?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processGetSearchModel(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetSearchModel(response));
                } catch (e) {
                    return <Observable<SearchModelGetResponse>><any>Observable.throw(e);
                }
            } else
                return <Observable<SearchModelGetResponse>><any>Observable.throw(response);
        });
    }

    protected processGetSearchModel(response: Response): SearchModelGetResponse {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: SearchModelGetResponse | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? SearchModelGetResponse.fromJS(resultData200) : new SearchModelGetResponse();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response, null);
    }
}

export interface IUnitClient {
    /**
     * @return OK
     */
    schema(): Observable<any>;
    /**
     * @return OK
     */
    fetch(query: Query): Observable<QueryResultOfUnitViewModel>;
    /**
     * @return OK
     */
    entry(id: string): Observable<UnitViewModel>;
    /**
     * @return OK
     */
    delete(id: string): Observable<any>;
    /**
     * @return OK
     */
    save(entry: UnitViewModel): Observable<any>;
    /**
     * @return OK
     */
    save2(entry: UnitViewModel): Observable<any>;
    /**
     * @return OK
     */
    toExcel(query: Query): Observable<any>;
    /**
     * @return OK
     */
    toExcel2(query: Query): Observable<any>;
    /**
     * @return OK
     */
    toPDF(query: Query): Observable<any>;
    /**
     * @return OK
     */
    toPDF2(query: Query): Observable<any>;
}

@Injectable()
export class UnitClient extends BaseClient implements IUnitClient {
    private http: Http = null; 
    private baseUrl: string | undefined = undefined; 
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(UserContext) configuration: UserContext, @Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super(configuration);
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : "http://devservices.apartmentapps.com"; 
    }

    /**
     * @return OK
     */
    schema(): Observable<any> {
        let url_ = this.baseUrl + "/api/Unit/schema";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processSchema(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processSchema(response));
                } catch (e) {
                    return <Observable<any>><any>Observable.throw(e);
                }
            } else
                return <Observable<any>><any>Observable.throw(response);
        });
    }

    protected processSchema(response: Response): any {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: any | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {};
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        result200[key] = resultData200[key] !== undefined ? resultData200[key] : {};
                }
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    fetch(query: Query): Observable<QueryResultOfUnitViewModel> {
        let url_ = this.baseUrl + "/api/Unit/fetch";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query ? query.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processFetch(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processFetch(response));
                } catch (e) {
                    return <Observable<QueryResultOfUnitViewModel>><any>Observable.throw(e);
                }
            } else
                return <Observable<QueryResultOfUnitViewModel>><any>Observable.throw(response);
        });
    }

    protected processFetch(response: Response): QueryResultOfUnitViewModel {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: QueryResultOfUnitViewModel | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? QueryResultOfUnitViewModel.fromJS(resultData200) : new QueryResultOfUnitViewModel();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    entry(id: string): Observable<UnitViewModel> {
        let url_ = this.baseUrl + "/api/Unit/entry?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processEntry(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processEntry(response));
                } catch (e) {
                    return <Observable<UnitViewModel>><any>Observable.throw(e);
                }
            } else
                return <Observable<UnitViewModel>><any>Observable.throw(response);
        });
    }

    protected processEntry(response: Response): UnitViewModel {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: UnitViewModel | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? UnitViewModel.fromJS(resultData200) : new UnitViewModel();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    delete(id: string): Observable<any> {
        let url_ = this.baseUrl + "/api/Unit/delete?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processDelete(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processDelete(response));
                } catch (e) {
                    return <Observable<any>><any>Observable.throw(e);
                }
            } else
                return <Observable<any>><any>Observable.throw(response);
        });
    }

    protected processDelete(response: Response): any {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: any | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {};
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        result200[key] = resultData200[key] !== undefined ? resultData200[key] : {};
                }
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    save(entry: UnitViewModel): Observable<any> {
        let url_ = this.baseUrl + "/api/Unit/save";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(entry ? entry.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processSave(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processSave(response));
                } catch (e) {
                    return <Observable<any>><any>Observable.throw(e);
                }
            } else
                return <Observable<any>><any>Observable.throw(response);
        });
    }

    protected processSave(response: Response): any {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: any | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {};
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        result200[key] = resultData200[key] !== undefined ? resultData200[key] : {};
                }
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    save2(entry: UnitViewModel): Observable<any> {
        let url_ = this.baseUrl + "/api/Unit/save";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(entry ? entry.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processSave2(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processSave2(response));
                } catch (e) {
                    return <Observable<any>><any>Observable.throw(e);
                }
            } else
                return <Observable<any>><any>Observable.throw(response);
        });
    }

    protected processSave2(response: Response): any {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: any | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {};
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        result200[key] = resultData200[key] !== undefined ? resultData200[key] : {};
                }
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    toExcel(query: Query): Observable<any> {
        let url_ = this.baseUrl + "/api/Unit/excel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query ? query.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processToExcel(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processToExcel(response));
                } catch (e) {
                    return <Observable<any>><any>Observable.throw(e);
                }
            } else
                return <Observable<any>><any>Observable.throw(response);
        });
    }

    protected processToExcel(response: Response): any {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: any | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {};
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        result200[key] = resultData200[key] !== undefined ? resultData200[key] : {};
                }
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    toExcel2(query: Query): Observable<any> {
        let url_ = this.baseUrl + "/api/Unit/excel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query ? query.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processToExcel2(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processToExcel2(response));
                } catch (e) {
                    return <Observable<any>><any>Observable.throw(e);
                }
            } else
                return <Observable<any>><any>Observable.throw(response);
        });
    }

    protected processToExcel2(response: Response): any {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: any | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {};
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        result200[key] = resultData200[key] !== undefined ? resultData200[key] : {};
                }
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    toPDF(query: Query): Observable<any> {
        let url_ = this.baseUrl + "/api/Unit/pdf";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query ? query.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processToPDF(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processToPDF(response));
                } catch (e) {
                    return <Observable<any>><any>Observable.throw(e);
                }
            } else
                return <Observable<any>><any>Observable.throw(response);
        });
    }

    protected processToPDF(response: Response): any {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: any | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {};
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        result200[key] = resultData200[key] !== undefined ? resultData200[key] : {};
                }
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    toPDF2(query: Query): Observable<any> {
        let url_ = this.baseUrl + "/api/Unit/pdf";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query ? query.toJS() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processToPDF2(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processToPDF2(response));
                } catch (e) {
                    return <Observable<any>><any>Observable.throw(e);
                }
            } else
                return <Observable<any>><any>Observable.throw(response);
        });
    }

    protected processToPDF2(response: Response): any {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: any | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {};
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        result200[key] = resultData200[key] !== undefined ? resultData200[key] : {};
                }
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response, null);
    }
}

export interface IVersionClient {
    /**
     * @return OK
     */
    get(): Observable<VersionInfo>;
}

@Injectable()
export class VersionClient extends BaseClient implements IVersionClient {
    private http: Http = null; 
    private baseUrl: string | undefined = undefined; 
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(UserContext) configuration: UserContext, @Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super(configuration);
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : "http://devservices.apartmentapps.com"; 
    }

    /**
     * @return OK
     */
    get(): Observable<VersionInfo> {
        let url_ = this.baseUrl + "/api/Version";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processGet(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGet(response));
                } catch (e) {
                    return <Observable<VersionInfo>><any>Observable.throw(e);
                }
            } else
                return <Observable<VersionInfo>><any>Observable.throw(response);
        });
    }

    protected processGet(response: Response): VersionInfo {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: VersionInfo | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? VersionInfo.fromJS(resultData200) : new VersionInfo();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response, null);
    }
}

export class UserInfoViewModel {
    email: string | null | undefined;
    hasRegistered: boolean | null | undefined;
    loginProvider: string | null | undefined;
    roles: string[] | null | undefined;
    imageUrl: string | null | undefined;
    imageThumbnailUrl: string | null | undefined;
    firstName: string | null | undefined;
    lastName: string | null | undefined;
    fullName: string | null | undefined;
    propertyConfig: PropertyConfig | null | undefined;

    constructor(data?: any) {
        if (data !== undefined) {
            this.email = data["Email"] !== undefined ? data["Email"] : undefined;
            this.hasRegistered = data["HasRegistered"] !== undefined ? data["HasRegistered"] : undefined;
            this.loginProvider = data["LoginProvider"] !== undefined ? data["LoginProvider"] : undefined;
            if (data["Roles"] && data["Roles"].constructor === Array) {
                this.roles = [];
                for (let item of data["Roles"])
                    this.roles.push(item);
            }
            this.imageUrl = data["ImageUrl"] !== undefined ? data["ImageUrl"] : undefined;
            this.imageThumbnailUrl = data["ImageThumbnailUrl"] !== undefined ? data["ImageThumbnailUrl"] : undefined;
            this.firstName = data["FirstName"] !== undefined ? data["FirstName"] : undefined;
            this.lastName = data["LastName"] !== undefined ? data["LastName"] : undefined;
            this.fullName = data["FullName"] !== undefined ? data["FullName"] : undefined;
            this.propertyConfig = data["PropertyConfig"] ? PropertyConfig.fromJS(data["PropertyConfig"]) : undefined;
        }
    }

    static fromJS(data: any): UserInfoViewModel {
        return new UserInfoViewModel(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["Email"] = this.email !== undefined ? this.email : undefined;
        data["HasRegistered"] = this.hasRegistered !== undefined ? this.hasRegistered : undefined;
        data["LoginProvider"] = this.loginProvider !== undefined ? this.loginProvider : undefined;
        if (this.roles && this.roles.constructor === Array) {
            data["Roles"] = [];
            for (let item of this.roles)
                data["Roles"].push(item);
        }
        data["ImageUrl"] = this.imageUrl !== undefined ? this.imageUrl : undefined;
        data["ImageThumbnailUrl"] = this.imageThumbnailUrl !== undefined ? this.imageThumbnailUrl : undefined;
        data["FirstName"] = this.firstName !== undefined ? this.firstName : undefined;
        data["LastName"] = this.lastName !== undefined ? this.lastName : undefined;
        data["FullName"] = this.fullName !== undefined ? this.fullName : undefined;
        data["PropertyConfig"] = this.propertyConfig ? this.propertyConfig.toJS() : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new UserInfoViewModel(JSON.parse(json));
    }
}

export class PropertyConfig {
    moduleInfo: ModuleInfo | null | undefined;
    name: string | null | undefined;

    constructor(data?: any) {
        if (data !== undefined) {
            this.moduleInfo = data["ModuleInfo"] ? ModuleInfo.fromJS(data["ModuleInfo"]) : undefined;
            this.name = data["Name"] !== undefined ? data["Name"] : undefined;
        }
    }

    static fromJS(data: any): PropertyConfig {
        return new PropertyConfig(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["ModuleInfo"] = this.moduleInfo ? this.moduleInfo.toJS() : undefined;
        data["Name"] = this.name !== undefined ? this.name : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new PropertyConfig(JSON.parse(json));
    }
}

export class ModuleInfo {
    paymentsConfig: PaymentsConfig | null | undefined;
    messagingConfig: MessagingConfig | null | undefined;
    courtesyConfig: CourtesyConfig | null | undefined;
    maintenanceConfig: MaintenanceConfig | null | undefined;
    prospectConfig: ProspectModuleConfig | null | undefined;
    companySettingsConfig: CompanySettingsConfig | null | undefined;

    constructor(data?: any) {
        if (data !== undefined) {
            this.paymentsConfig = data["PaymentsConfig"] ? PaymentsConfig.fromJS(data["PaymentsConfig"]) : undefined;
            this.messagingConfig = data["MessagingConfig"] ? MessagingConfig.fromJS(data["MessagingConfig"]) : undefined;
            this.courtesyConfig = data["CourtesyConfig"] ? CourtesyConfig.fromJS(data["CourtesyConfig"]) : undefined;
            this.maintenanceConfig = data["MaintenanceConfig"] ? MaintenanceConfig.fromJS(data["MaintenanceConfig"]) : undefined;
            this.prospectConfig = data["ProspectConfig"] ? ProspectModuleConfig.fromJS(data["ProspectConfig"]) : undefined;
            this.companySettingsConfig = data["CompanySettingsConfig"] ? CompanySettingsConfig.fromJS(data["CompanySettingsConfig"]) : undefined;
        }
    }

    static fromJS(data: any): ModuleInfo {
        return new ModuleInfo(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["PaymentsConfig"] = this.paymentsConfig ? this.paymentsConfig.toJS() : undefined;
        data["MessagingConfig"] = this.messagingConfig ? this.messagingConfig.toJS() : undefined;
        data["CourtesyConfig"] = this.courtesyConfig ? this.courtesyConfig.toJS() : undefined;
        data["MaintenanceConfig"] = this.maintenanceConfig ? this.maintenanceConfig.toJS() : undefined;
        data["ProspectConfig"] = this.prospectConfig ? this.prospectConfig.toJS() : undefined;
        data["CompanySettingsConfig"] = this.companySettingsConfig ? this.companySettingsConfig.toJS() : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ModuleInfo(JSON.parse(json));
    }
}

export class PaymentsConfig {
    useUrl: boolean | null | undefined;
    url: string | null | undefined;
    merchantId: string | null | undefined;
    apiLoginId: string | null | undefined;
    merchantPassword: string | null | undefined;
    visaConvenienceFee: number | null | undefined;
    mastercardConvenienceFee: number | null | undefined;
    discoverConvenienceFee: number | null | undefined;
    americanExpressConvenienceFee: number | null | undefined;
    bankAccountSavingsConvenienceFee: number | null | undefined;
    bankAccountCheckingConvenienceFee: number | null | undefined;
    secureTransactionKey: string | null | undefined;
    enabled: boolean | null | undefined;
    propertyId: number | null | undefined;
    id: number | null | undefined;
    createDate: Date | null | undefined;

    constructor(data?: any) {
        if (data !== undefined) {
            this.useUrl = data["UseUrl"] !== undefined ? data["UseUrl"] : undefined;
            this.url = data["Url"] !== undefined ? data["Url"] : undefined;
            this.merchantId = data["MerchantId"] !== undefined ? data["MerchantId"] : undefined;
            this.apiLoginId = data["ApiLoginId"] !== undefined ? data["ApiLoginId"] : undefined;
            this.merchantPassword = data["MerchantPassword"] !== undefined ? data["MerchantPassword"] : undefined;
            this.visaConvenienceFee = data["VisaConvenienceFee"] !== undefined ? data["VisaConvenienceFee"] : undefined;
            this.mastercardConvenienceFee = data["MastercardConvenienceFee"] !== undefined ? data["MastercardConvenienceFee"] : undefined;
            this.discoverConvenienceFee = data["DiscoverConvenienceFee"] !== undefined ? data["DiscoverConvenienceFee"] : undefined;
            this.americanExpressConvenienceFee = data["AmericanExpressConvenienceFee"] !== undefined ? data["AmericanExpressConvenienceFee"] : undefined;
            this.bankAccountSavingsConvenienceFee = data["BankAccountSavingsConvenienceFee"] !== undefined ? data["BankAccountSavingsConvenienceFee"] : undefined;
            this.bankAccountCheckingConvenienceFee = data["BankAccountCheckingConvenienceFee"] !== undefined ? data["BankAccountCheckingConvenienceFee"] : undefined;
            this.secureTransactionKey = data["SecureTransactionKey"] !== undefined ? data["SecureTransactionKey"] : undefined;
            this.enabled = data["Enabled"] !== undefined ? data["Enabled"] : undefined;
            this.propertyId = data["PropertyId"] !== undefined ? data["PropertyId"] : undefined;
            this.id = data["Id"] !== undefined ? data["Id"] : undefined;
            this.createDate = data["CreateDate"] ? new Date(data["CreateDate"].toString()) : undefined;
        }
    }

    static fromJS(data: any): PaymentsConfig {
        return new PaymentsConfig(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["UseUrl"] = this.useUrl !== undefined ? this.useUrl : undefined;
        data["Url"] = this.url !== undefined ? this.url : undefined;
        data["MerchantId"] = this.merchantId !== undefined ? this.merchantId : undefined;
        data["ApiLoginId"] = this.apiLoginId !== undefined ? this.apiLoginId : undefined;
        data["MerchantPassword"] = this.merchantPassword !== undefined ? this.merchantPassword : undefined;
        data["VisaConvenienceFee"] = this.visaConvenienceFee !== undefined ? this.visaConvenienceFee : undefined;
        data["MastercardConvenienceFee"] = this.mastercardConvenienceFee !== undefined ? this.mastercardConvenienceFee : undefined;
        data["DiscoverConvenienceFee"] = this.discoverConvenienceFee !== undefined ? this.discoverConvenienceFee : undefined;
        data["AmericanExpressConvenienceFee"] = this.americanExpressConvenienceFee !== undefined ? this.americanExpressConvenienceFee : undefined;
        data["BankAccountSavingsConvenienceFee"] = this.bankAccountSavingsConvenienceFee !== undefined ? this.bankAccountSavingsConvenienceFee : undefined;
        data["BankAccountCheckingConvenienceFee"] = this.bankAccountCheckingConvenienceFee !== undefined ? this.bankAccountCheckingConvenienceFee : undefined;
        data["SecureTransactionKey"] = this.secureTransactionKey !== undefined ? this.secureTransactionKey : undefined;
        data["Enabled"] = this.enabled !== undefined ? this.enabled : undefined;
        data["PropertyId"] = this.propertyId !== undefined ? this.propertyId : undefined;
        data["Id"] = this.id !== undefined ? this.id : undefined;
        data["CreateDate"] = this.createDate ? this.createDate.toISOString() : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new PaymentsConfig(JSON.parse(json));
    }
}

export class MessagingConfig {
    sendGridApiToken: string | null | undefined;
    sendFromEmail: string | null | undefined;
    fullLogging: boolean | null | undefined;
    template: string | null | undefined;
    logoImageUrl: string | null | undefined;
    enabled: boolean | null | undefined;
    propertyId: number | null | undefined;
    id: number | null | undefined;
    createDate: Date | null | undefined;

    constructor(data?: any) {
        if (data !== undefined) {
            this.sendGridApiToken = data["SendGridApiToken"] !== undefined ? data["SendGridApiToken"] : undefined;
            this.sendFromEmail = data["SendFromEmail"] !== undefined ? data["SendFromEmail"] : undefined;
            this.fullLogging = data["FullLogging"] !== undefined ? data["FullLogging"] : undefined;
            this.template = data["Template"] !== undefined ? data["Template"] : undefined;
            this.logoImageUrl = data["LogoImageUrl"] !== undefined ? data["LogoImageUrl"] : undefined;
            this.enabled = data["Enabled"] !== undefined ? data["Enabled"] : undefined;
            this.propertyId = data["PropertyId"] !== undefined ? data["PropertyId"] : undefined;
            this.id = data["Id"] !== undefined ? data["Id"] : undefined;
            this.createDate = data["CreateDate"] ? new Date(data["CreateDate"].toString()) : undefined;
        }
    }

    static fromJS(data: any): MessagingConfig {
        return new MessagingConfig(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["SendGridApiToken"] = this.sendGridApiToken !== undefined ? this.sendGridApiToken : undefined;
        data["SendFromEmail"] = this.sendFromEmail !== undefined ? this.sendFromEmail : undefined;
        data["FullLogging"] = this.fullLogging !== undefined ? this.fullLogging : undefined;
        data["Template"] = this.template !== undefined ? this.template : undefined;
        data["LogoImageUrl"] = this.logoImageUrl !== undefined ? this.logoImageUrl : undefined;
        data["Enabled"] = this.enabled !== undefined ? this.enabled : undefined;
        data["PropertyId"] = this.propertyId !== undefined ? this.propertyId : undefined;
        data["Id"] = this.id !== undefined ? this.id : undefined;
        data["CreateDate"] = this.createDate ? this.createDate.toISOString() : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new MessagingConfig(JSON.parse(json));
    }
}

export class CourtesyConfig {
    enabled: boolean | null | undefined;
    propertyId: number | null | undefined;
    id: number | null | undefined;
    createDate: Date | null | undefined;

    constructor(data?: any) {
        if (data !== undefined) {
            this.enabled = data["Enabled"] !== undefined ? data["Enabled"] : undefined;
            this.propertyId = data["PropertyId"] !== undefined ? data["PropertyId"] : undefined;
            this.id = data["Id"] !== undefined ? data["Id"] : undefined;
            this.createDate = data["CreateDate"] ? new Date(data["CreateDate"].toString()) : undefined;
        }
    }

    static fromJS(data: any): CourtesyConfig {
        return new CourtesyConfig(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["Enabled"] = this.enabled !== undefined ? this.enabled : undefined;
        data["PropertyId"] = this.propertyId !== undefined ? this.propertyId : undefined;
        data["Id"] = this.id !== undefined ? this.id : undefined;
        data["CreateDate"] = this.createDate ? this.createDate.toISOString() : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new CourtesyConfig(JSON.parse(json));
    }
}

export class MaintenanceConfig {
    supervisorMode: boolean | null | undefined;
    residentEmergencyInstructions: string | null | undefined;
    residentNoPermissionToEnterInstructions: string | null | undefined;
    maintenancePhoneNumber: string | null | undefined;
    verifyBarCodes: boolean | null | undefined;
    enabled: boolean | null | undefined;
    propertyId: number | null | undefined;
    id: number | null | undefined;
    createDate: Date | null | undefined;

    constructor(data?: any) {
        if (data !== undefined) {
            this.supervisorMode = data["SupervisorMode"] !== undefined ? data["SupervisorMode"] : undefined;
            this.residentEmergencyInstructions = data["ResidentEmergencyInstructions"] !== undefined ? data["ResidentEmergencyInstructions"] : undefined;
            this.residentNoPermissionToEnterInstructions = data["ResidentNoPermissionToEnterInstructions"] !== undefined ? data["ResidentNoPermissionToEnterInstructions"] : undefined;
            this.maintenancePhoneNumber = data["MaintenancePhoneNumber"] !== undefined ? data["MaintenancePhoneNumber"] : undefined;
            this.verifyBarCodes = data["VerifyBarCodes"] !== undefined ? data["VerifyBarCodes"] : undefined;
            this.enabled = data["Enabled"] !== undefined ? data["Enabled"] : undefined;
            this.propertyId = data["PropertyId"] !== undefined ? data["PropertyId"] : undefined;
            this.id = data["Id"] !== undefined ? data["Id"] : undefined;
            this.createDate = data["CreateDate"] ? new Date(data["CreateDate"].toString()) : undefined;
        }
    }

    static fromJS(data: any): MaintenanceConfig {
        return new MaintenanceConfig(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["SupervisorMode"] = this.supervisorMode !== undefined ? this.supervisorMode : undefined;
        data["ResidentEmergencyInstructions"] = this.residentEmergencyInstructions !== undefined ? this.residentEmergencyInstructions : undefined;
        data["ResidentNoPermissionToEnterInstructions"] = this.residentNoPermissionToEnterInstructions !== undefined ? this.residentNoPermissionToEnterInstructions : undefined;
        data["MaintenancePhoneNumber"] = this.maintenancePhoneNumber !== undefined ? this.maintenancePhoneNumber : undefined;
        data["VerifyBarCodes"] = this.verifyBarCodes !== undefined ? this.verifyBarCodes : undefined;
        data["Enabled"] = this.enabled !== undefined ? this.enabled : undefined;
        data["PropertyId"] = this.propertyId !== undefined ? this.propertyId : undefined;
        data["Id"] = this.id !== undefined ? this.id : undefined;
        data["CreateDate"] = this.createDate ? this.createDate.toISOString() : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new MaintenanceConfig(JSON.parse(json));
    }
}

export class ProspectModuleConfig {
    enabled: boolean | null | undefined;
    propertyId: number | null | undefined;
    id: number | null | undefined;
    createDate: Date | null | undefined;

    constructor(data?: any) {
        if (data !== undefined) {
            this.enabled = data["Enabled"] !== undefined ? data["Enabled"] : undefined;
            this.propertyId = data["PropertyId"] !== undefined ? data["PropertyId"] : undefined;
            this.id = data["Id"] !== undefined ? data["Id"] : undefined;
            this.createDate = data["CreateDate"] ? new Date(data["CreateDate"].toString()) : undefined;
        }
    }

    static fromJS(data: any): ProspectModuleConfig {
        return new ProspectModuleConfig(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["Enabled"] = this.enabled !== undefined ? this.enabled : undefined;
        data["PropertyId"] = this.propertyId !== undefined ? this.propertyId : undefined;
        data["Id"] = this.id !== undefined ? this.id : undefined;
        data["CreateDate"] = this.createDate ? this.createDate.toISOString() : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ProspectModuleConfig(JSON.parse(json));
    }
}

export class CompanySettingsConfig {
    phoneNumber: string | null | undefined;
    enabled: boolean | null | undefined;
    propertyId: number | null | undefined;
    id: number | null | undefined;
    createDate: Date | null | undefined;

    constructor(data?: any) {
        if (data !== undefined) {
            this.phoneNumber = data["PhoneNumber"] !== undefined ? data["PhoneNumber"] : undefined;
            this.enabled = data["Enabled"] !== undefined ? data["Enabled"] : undefined;
            this.propertyId = data["PropertyId"] !== undefined ? data["PropertyId"] : undefined;
            this.id = data["Id"] !== undefined ? data["Id"] : undefined;
            this.createDate = data["CreateDate"] ? new Date(data["CreateDate"].toString()) : undefined;
        }
    }

    static fromJS(data: any): CompanySettingsConfig {
        return new CompanySettingsConfig(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["PhoneNumber"] = this.phoneNumber !== undefined ? this.phoneNumber : undefined;
        data["Enabled"] = this.enabled !== undefined ? this.enabled : undefined;
        data["PropertyId"] = this.propertyId !== undefined ? this.propertyId : undefined;
        data["Id"] = this.id !== undefined ? this.id : undefined;
        data["CreateDate"] = this.createDate ? this.createDate.toISOString() : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new CompanySettingsConfig(JSON.parse(json));
    }
}

export class ManageInfoViewModel {
    localLoginProvider: string | null | undefined;
    email: string | null | undefined;
    logins: UserLoginInfoViewModel[] | null | undefined;
    externalLoginProviders: ExternalLoginViewModel[] | null | undefined;

    constructor(data?: any) {
        if (data !== undefined) {
            this.localLoginProvider = data["LocalLoginProvider"] !== undefined ? data["LocalLoginProvider"] : undefined;
            this.email = data["Email"] !== undefined ? data["Email"] : undefined;
            if (data["Logins"] && data["Logins"].constructor === Array) {
                this.logins = [];
                for (let item of data["Logins"])
                    this.logins.push(UserLoginInfoViewModel.fromJS(item));
            }
            if (data["ExternalLoginProviders"] && data["ExternalLoginProviders"].constructor === Array) {
                this.externalLoginProviders = [];
                for (let item of data["ExternalLoginProviders"])
                    this.externalLoginProviders.push(ExternalLoginViewModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ManageInfoViewModel {
        return new ManageInfoViewModel(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["LocalLoginProvider"] = this.localLoginProvider !== undefined ? this.localLoginProvider : undefined;
        data["Email"] = this.email !== undefined ? this.email : undefined;
        if (this.logins && this.logins.constructor === Array) {
            data["Logins"] = [];
            for (let item of this.logins)
                data["Logins"].push(item.toJS());
        }
        if (this.externalLoginProviders && this.externalLoginProviders.constructor === Array) {
            data["ExternalLoginProviders"] = [];
            for (let item of this.externalLoginProviders)
                data["ExternalLoginProviders"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ManageInfoViewModel(JSON.parse(json));
    }
}

export class UserLoginInfoViewModel {
    loginProvider: string | null | undefined;
    providerKey: string | null | undefined;

    constructor(data?: any) {
        if (data !== undefined) {
            this.loginProvider = data["LoginProvider"] !== undefined ? data["LoginProvider"] : undefined;
            this.providerKey = data["ProviderKey"] !== undefined ? data["ProviderKey"] : undefined;
        }
    }

    static fromJS(data: any): UserLoginInfoViewModel {
        return new UserLoginInfoViewModel(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["LoginProvider"] = this.loginProvider !== undefined ? this.loginProvider : undefined;
        data["ProviderKey"] = this.providerKey !== undefined ? this.providerKey : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new UserLoginInfoViewModel(JSON.parse(json));
    }
}

export class ExternalLoginViewModel {
    name: string | null | undefined;
    url: string | null | undefined;
    state: string | null | undefined;

    constructor(data?: any) {
        if (data !== undefined) {
            this.name = data["Name"] !== undefined ? data["Name"] : undefined;
            this.url = data["Url"] !== undefined ? data["Url"] : undefined;
            this.state = data["State"] !== undefined ? data["State"] : undefined;
        }
    }

    static fromJS(data: any): ExternalLoginViewModel {
        return new ExternalLoginViewModel(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["Name"] = this.name !== undefined ? this.name : undefined;
        data["Url"] = this.url !== undefined ? this.url : undefined;
        data["State"] = this.state !== undefined ? this.state : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ExternalLoginViewModel(JSON.parse(json));
    }
}

export class ChangePasswordBindingModel {
    oldPassword: string | undefined;
    newPassword: string | undefined;
    confirmPassword: string | null | undefined;

    constructor(data?: any) {
        if (data !== undefined) {
            this.oldPassword = data["OldPassword"] !== undefined ? data["OldPassword"] : undefined;
            this.newPassword = data["NewPassword"] !== undefined ? data["NewPassword"] : undefined;
            this.confirmPassword = data["ConfirmPassword"] !== undefined ? data["ConfirmPassword"] : undefined;
        }
    }

    static fromJS(data: any): ChangePasswordBindingModel {
        return new ChangePasswordBindingModel(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["OldPassword"] = this.oldPassword !== undefined ? this.oldPassword : undefined;
        data["NewPassword"] = this.newPassword !== undefined ? this.newPassword : undefined;
        data["ConfirmPassword"] = this.confirmPassword !== undefined ? this.confirmPassword : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ChangePasswordBindingModel(JSON.parse(json));
    }
}

export class SetPasswordBindingModel {
    newPassword: string | undefined;
    confirmPassword: string | null | undefined;

    constructor(data?: any) {
        if (data !== undefined) {
            this.newPassword = data["NewPassword"] !== undefined ? data["NewPassword"] : undefined;
            this.confirmPassword = data["ConfirmPassword"] !== undefined ? data["ConfirmPassword"] : undefined;
        }
    }

    static fromJS(data: any): SetPasswordBindingModel {
        return new SetPasswordBindingModel(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["NewPassword"] = this.newPassword !== undefined ? this.newPassword : undefined;
        data["ConfirmPassword"] = this.confirmPassword !== undefined ? this.confirmPassword : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new SetPasswordBindingModel(JSON.parse(json));
    }
}

export class AddExternalLoginBindingModel {
    externalAccessToken: string | undefined;

    constructor(data?: any) {
        if (data !== undefined) {
            this.externalAccessToken = data["ExternalAccessToken"] !== undefined ? data["ExternalAccessToken"] : undefined;
        }
    }

    static fromJS(data: any): AddExternalLoginBindingModel {
        return new AddExternalLoginBindingModel(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["ExternalAccessToken"] = this.externalAccessToken !== undefined ? this.externalAccessToken : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new AddExternalLoginBindingModel(JSON.parse(json));
    }
}

export class RemoveLoginBindingModel {
    loginProvider: string | undefined;
    providerKey: string | undefined;

    constructor(data?: any) {
        if (data !== undefined) {
            this.loginProvider = data["LoginProvider"] !== undefined ? data["LoginProvider"] : undefined;
            this.providerKey = data["ProviderKey"] !== undefined ? data["ProviderKey"] : undefined;
        }
    }

    static fromJS(data: any): RemoveLoginBindingModel {
        return new RemoveLoginBindingModel(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["LoginProvider"] = this.loginProvider !== undefined ? this.loginProvider : undefined;
        data["ProviderKey"] = this.providerKey !== undefined ? this.providerKey : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new RemoveLoginBindingModel(JSON.parse(json));
    }
}

export class RegisterFromPhoneBindingModel {
    email: string | undefined;
    password: string | undefined;
    confirmPassword: string | null | undefined;
    phoneNumber: string | null | undefined;
    firstName: string | null | undefined;
    lastName: string | null | undefined;

    constructor(data?: any) {
        if (data !== undefined) {
            this.email = data["Email"] !== undefined ? data["Email"] : undefined;
            this.password = data["Password"] !== undefined ? data["Password"] : undefined;
            this.confirmPassword = data["ConfirmPassword"] !== undefined ? data["ConfirmPassword"] : undefined;
            this.phoneNumber = data["PhoneNumber"] !== undefined ? data["PhoneNumber"] : undefined;
            this.firstName = data["FirstName"] !== undefined ? data["FirstName"] : undefined;
            this.lastName = data["LastName"] !== undefined ? data["LastName"] : undefined;
        }
    }

    static fromJS(data: any): RegisterFromPhoneBindingModel {
        return new RegisterFromPhoneBindingModel(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["Email"] = this.email !== undefined ? this.email : undefined;
        data["Password"] = this.password !== undefined ? this.password : undefined;
        data["ConfirmPassword"] = this.confirmPassword !== undefined ? this.confirmPassword : undefined;
        data["PhoneNumber"] = this.phoneNumber !== undefined ? this.phoneNumber : undefined;
        data["FirstName"] = this.firstName !== undefined ? this.firstName : undefined;
        data["LastName"] = this.lastName !== undefined ? this.lastName : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new RegisterFromPhoneBindingModel(JSON.parse(json));
    }
}

export class RegisterExternalBindingModel {
    email: string | undefined;

    constructor(data?: any) {
        if (data !== undefined) {
            this.email = data["Email"] !== undefined ? data["Email"] : undefined;
        }
    }

    static fromJS(data: any): RegisterExternalBindingModel {
        return new RegisterExternalBindingModel(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["Email"] = this.email !== undefined ? this.email : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new RegisterExternalBindingModel(JSON.parse(json));
    }
}

export class AlertBindingModel {
    createdOn: Date | null | undefined;
    message: string | null | undefined;
    title: string | null | undefined;
    type: string | null | undefined;
    relatedId: number | null | undefined;
    hasRead: boolean | null | undefined;
    id: number | null | undefined;

    constructor(data?: any) {
        if (data !== undefined) {
            this.createdOn = data["CreatedOn"] ? new Date(data["CreatedOn"].toString()) : undefined;
            this.message = data["Message"] !== undefined ? data["Message"] : undefined;
            this.title = data["Title"] !== undefined ? data["Title"] : undefined;
            this.type = data["Type"] !== undefined ? data["Type"] : undefined;
            this.relatedId = data["RelatedId"] !== undefined ? data["RelatedId"] : undefined;
            this.hasRead = data["HasRead"] !== undefined ? data["HasRead"] : undefined;
            this.id = data["Id"] !== undefined ? data["Id"] : undefined;
        }
    }

    static fromJS(data: any): AlertBindingModel {
        return new AlertBindingModel(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["CreatedOn"] = this.createdOn ? this.createdOn.toISOString() : undefined;
        data["Message"] = this.message !== undefined ? this.message : undefined;
        data["Title"] = this.title !== undefined ? this.title : undefined;
        data["Type"] = this.type !== undefined ? this.type : undefined;
        data["RelatedId"] = this.relatedId !== undefined ? this.relatedId : undefined;
        data["HasRead"] = this.hasRead !== undefined ? this.hasRead : undefined;
        data["Id"] = this.id !== undefined ? this.id : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new AlertBindingModel(JSON.parse(json));
    }
}

export class AlertsCountBindingModel {
    totalUnread: number | null | undefined;

    constructor(data?: any) {
        if (data !== undefined) {
            this.totalUnread = data["TotalUnread"] !== undefined ? data["TotalUnread"] : undefined;
        }
    }

    static fromJS(data: any): AlertsCountBindingModel {
        return new AlertsCountBindingModel(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["TotalUnread"] = this.totalUnread !== undefined ? this.totalUnread : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new AlertsCountBindingModel(JSON.parse(json));
    }
}

export class Query {
    navigation: Navigation | null | undefined;
    order: any | null | undefined;
    search: Search | null | undefined;

    constructor(data?: any) {
        if (data !== undefined) {
            this.navigation = data["Navigation"] ? Navigation.fromJS(data["Navigation"]) : undefined;
            if (data["Order"]) {
                this.order = {};
                for (let key in data["Order"]) {
                    if (data["Order"].hasOwnProperty(key))
                        this.order[key] = data["Order"][key] !== undefined ? data["Order"][key] : undefined;
                }
            }
            this.search = data["Search"] ? Search.fromJS(data["Search"]) : undefined;
        }
    }

    static fromJS(data: any): Query {
        return new Query(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["Navigation"] = this.navigation ? this.navigation.toJS() : undefined;
        if (this.order) {
            data["Order"] = {};
            for (let key in this.order) {
                if (this.order.hasOwnProperty(key))
                    data["Order"][key] = this.order[key] !== undefined ? this.order[key] : undefined;
            }
        }
        data["Search"] = this.search ? this.search.toJS() : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new Query(JSON.parse(json));
    }
}

export class Navigation {
    skip: number | null | undefined;
    take: number | null | undefined;

    constructor(data?: any) {
        if (data !== undefined) {
            this.skip = data["Skip"] !== undefined ? data["Skip"] : undefined;
            this.take = data["Take"] !== undefined ? data["Take"] : undefined;
        }
    }

    static fromJS(data: any): Navigation {
        return new Navigation(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["Skip"] = this.skip !== undefined ? this.skip : undefined;
        data["Take"] = this.take !== undefined ? this.take : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new Navigation(JSON.parse(json));
    }
}

export class Search {
    engineId: string | null | undefined;
    filters: FilterData[] | null | undefined;

    constructor(data?: any) {
        if (data !== undefined) {
            this.engineId = data["EngineId"] !== undefined ? data["EngineId"] : undefined;
            if (data["Filters"] && data["Filters"].constructor === Array) {
                this.filters = [];
                for (let item of data["Filters"])
                    this.filters.push(FilterData.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Search {
        return new Search(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["EngineId"] = this.engineId !== undefined ? this.engineId : undefined;
        if (this.filters && this.filters.constructor === Array) {
            data["Filters"] = [];
            for (let item of this.filters)
                data["Filters"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new Search(JSON.parse(json));
    }
}

export class FilterData {
    filterId: string | null | undefined;
    jsonValue: string | null | undefined;

    constructor(data?: any) {
        if (data !== undefined) {
            this.filterId = data["FilterId"] !== undefined ? data["FilterId"] : undefined;
            this.jsonValue = data["JsonValue"] !== undefined ? data["JsonValue"] : undefined;
        }
    }

    static fromJS(data: any): FilterData {
        return new FilterData(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["FilterId"] = this.filterId !== undefined ? this.filterId : undefined;
        data["JsonValue"] = this.jsonValue !== undefined ? this.jsonValue : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new FilterData(JSON.parse(json));
    }
}

export class QueryResultOfBuildingViewModel {
    total: number | null | undefined;
    result: BuildingViewModel[] | null | undefined;

    constructor(data?: any) {
        if (data !== undefined) {
            this.total = data["Total"] !== undefined ? data["Total"] : undefined;
            if (data["Result"] && data["Result"].constructor === Array) {
                this.result = [];
                for (let item of data["Result"])
                    this.result.push(BuildingViewModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): QueryResultOfBuildingViewModel {
        return new QueryResultOfBuildingViewModel(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["Total"] = this.total !== undefined ? this.total : undefined;
        if (this.result && this.result.constructor === Array) {
            data["Result"] = [];
            for (let item of this.result)
                data["Result"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new QueryResultOfBuildingViewModel(JSON.parse(json));
    }
}

export class BuildingViewModel {
    name: string | null | undefined;
    id: string | null | undefined;
    title: string | null | undefined;
    actionLinks: ActionLinkModel[] | null | undefined;

    constructor(data?: any) {
        if (data !== undefined) {
            this.name = data["Name"] !== undefined ? data["Name"] : undefined;
            this.id = data["Id"] !== undefined ? data["Id"] : undefined;
            this.title = data["Title"] !== undefined ? data["Title"] : undefined;
            if (data["ActionLinks"] && data["ActionLinks"].constructor === Array) {
                this.actionLinks = [];
                for (let item of data["ActionLinks"])
                    this.actionLinks.push(ActionLinkModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): BuildingViewModel {
        return new BuildingViewModel(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["Name"] = this.name !== undefined ? this.name : undefined;
        data["Id"] = this.id !== undefined ? this.id : undefined;
        data["Title"] = this.title !== undefined ? this.title : undefined;
        if (this.actionLinks && this.actionLinks.constructor === Array) {
            data["ActionLinks"] = [];
            for (let item of this.actionLinks)
                data["ActionLinks"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new BuildingViewModel(JSON.parse(json));
    }
}

export class ActionLinkModel {
    label: string | null | undefined;
    isDialog: boolean | null | undefined;
    group: string | null | undefined;
    groupName: string | null | undefined;
    action: string | null | undefined;
    controller: string | null | undefined;
    parameters: any | null | undefined;
    allowed: boolean | null | undefined;
    index: number | null | undefined;
    icon: string | null | undefined;

    constructor(data?: any) {
        if (data !== undefined) {
            this.label = data["Label"] !== undefined ? data["Label"] : undefined;
            this.isDialog = data["IsDialog"] !== undefined ? data["IsDialog"] : undefined;
            this.group = data["Group"] !== undefined ? data["Group"] : undefined;
            this.groupName = data["GroupName"] !== undefined ? data["GroupName"] : undefined;
            this.action = data["Action"] !== undefined ? data["Action"] : undefined;
            this.controller = data["Controller"] !== undefined ? data["Controller"] : undefined;
            if (data["Parameters"]) {
                this.parameters = {};
                for (let key in data["Parameters"]) {
                    if (data["Parameters"].hasOwnProperty(key))
                        this.parameters[key] = data["Parameters"][key] !== undefined ? data["Parameters"][key] : undefined;
                }
            }
            this.allowed = data["Allowed"] !== undefined ? data["Allowed"] : undefined;
            this.index = data["Index"] !== undefined ? data["Index"] : undefined;
            this.icon = data["Icon"] !== undefined ? data["Icon"] : undefined;
        }
    }

    static fromJS(data: any): ActionLinkModel {
        return new ActionLinkModel(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["Label"] = this.label !== undefined ? this.label : undefined;
        data["IsDialog"] = this.isDialog !== undefined ? this.isDialog : undefined;
        data["Group"] = this.group !== undefined ? this.group : undefined;
        data["GroupName"] = this.groupName !== undefined ? this.groupName : undefined;
        data["Action"] = this.action !== undefined ? this.action : undefined;
        data["Controller"] = this.controller !== undefined ? this.controller : undefined;
        if (this.parameters) {
            data["Parameters"] = {};
            for (let key in this.parameters) {
                if (this.parameters.hasOwnProperty(key))
                    data["Parameters"][key] = this.parameters[key] !== undefined ? this.parameters[key] : undefined;
            }
        }
        data["Allowed"] = this.allowed !== undefined ? this.allowed : undefined;
        data["Index"] = this.index !== undefined ? this.index : undefined;
        data["Icon"] = this.icon !== undefined ? this.icon : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ActionLinkModel(JSON.parse(json));
    }
}

export class CourtesyCheckinBindingModel {
    latitude: number | null | undefined;
    longitude: number | null | undefined;
    label: string | null | undefined;
    acceptableCheckinCodes: string[] | null | undefined;
    id: number | null | undefined;
    complete: boolean | null | undefined;
    date: Date | null | undefined;
    officer: UserBindingModel | null | undefined;

    constructor(data?: any) {
        if (data !== undefined) {
            this.latitude = data["Latitude"] !== undefined ? data["Latitude"] : undefined;
            this.longitude = data["Longitude"] !== undefined ? data["Longitude"] : undefined;
            this.label = data["Label"] !== undefined ? data["Label"] : undefined;
            if (data["AcceptableCheckinCodes"] && data["AcceptableCheckinCodes"].constructor === Array) {
                this.acceptableCheckinCodes = [];
                for (let item of data["AcceptableCheckinCodes"])
                    this.acceptableCheckinCodes.push(item);
            }
            this.id = data["Id"] !== undefined ? data["Id"] : undefined;
            this.complete = data["Complete"] !== undefined ? data["Complete"] : undefined;
            this.date = data["Date"] ? new Date(data["Date"].toString()) : undefined;
            this.officer = data["Officer"] ? UserBindingModel.fromJS(data["Officer"]) : undefined;
        }
    }

    static fromJS(data: any): CourtesyCheckinBindingModel {
        return new CourtesyCheckinBindingModel(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["Latitude"] = this.latitude !== undefined ? this.latitude : undefined;
        data["Longitude"] = this.longitude !== undefined ? this.longitude : undefined;
        data["Label"] = this.label !== undefined ? this.label : undefined;
        if (this.acceptableCheckinCodes && this.acceptableCheckinCodes.constructor === Array) {
            data["AcceptableCheckinCodes"] = [];
            for (let item of this.acceptableCheckinCodes)
                data["AcceptableCheckinCodes"].push(item);
        }
        data["Id"] = this.id !== undefined ? this.id : undefined;
        data["Complete"] = this.complete !== undefined ? this.complete : undefined;
        data["Date"] = this.date ? this.date.toISOString() : undefined;
        data["Officer"] = this.officer ? this.officer.toJS() : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new CourtesyCheckinBindingModel(JSON.parse(json));
    }
}

export class UserBindingModel {
    imageUrl: string | null | undefined;
    imageThumbnailUrl: string | null | undefined;
    firstName: string | null | undefined;
    lastName: string | null | undefined;
    unitName: string | null | undefined;
    buildingName: string | null | undefined;
    isTenant: boolean | null | undefined;
    phoneNumber: string | null | undefined;
    fullName: string | null | undefined;
    address: string | null | undefined;
    city: string | null | undefined;
    postalCode: string | null | undefined;
    email: string | null | undefined;
    archived: boolean | null | undefined;
    roles: string[] | null | undefined;
    id: string | null | undefined;
    title: string | null | undefined;
    actionLinks: ActionLinkModel[] | null | undefined;

    constructor(data?: any) {
        if (data !== undefined) {
            this.imageUrl = data["ImageUrl"] !== undefined ? data["ImageUrl"] : undefined;
            this.imageThumbnailUrl = data["ImageThumbnailUrl"] !== undefined ? data["ImageThumbnailUrl"] : undefined;
            this.firstName = data["FirstName"] !== undefined ? data["FirstName"] : undefined;
            this.lastName = data["LastName"] !== undefined ? data["LastName"] : undefined;
            this.unitName = data["UnitName"] !== undefined ? data["UnitName"] : undefined;
            this.buildingName = data["BuildingName"] !== undefined ? data["BuildingName"] : undefined;
            this.isTenant = data["IsTenant"] !== undefined ? data["IsTenant"] : undefined;
            this.phoneNumber = data["PhoneNumber"] !== undefined ? data["PhoneNumber"] : undefined;
            this.fullName = data["FullName"] !== undefined ? data["FullName"] : undefined;
            this.address = data["Address"] !== undefined ? data["Address"] : undefined;
            this.city = data["City"] !== undefined ? data["City"] : undefined;
            this.postalCode = data["PostalCode"] !== undefined ? data["PostalCode"] : undefined;
            this.email = data["Email"] !== undefined ? data["Email"] : undefined;
            this.archived = data["Archived"] !== undefined ? data["Archived"] : undefined;
            if (data["Roles"] && data["Roles"].constructor === Array) {
                this.roles = [];
                for (let item of data["Roles"])
                    this.roles.push(item);
            }
            this.id = data["Id"] !== undefined ? data["Id"] : undefined;
            this.title = data["Title"] !== undefined ? data["Title"] : undefined;
            if (data["ActionLinks"] && data["ActionLinks"].constructor === Array) {
                this.actionLinks = [];
                for (let item of data["ActionLinks"])
                    this.actionLinks.push(ActionLinkModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UserBindingModel {
        return new UserBindingModel(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["ImageUrl"] = this.imageUrl !== undefined ? this.imageUrl : undefined;
        data["ImageThumbnailUrl"] = this.imageThumbnailUrl !== undefined ? this.imageThumbnailUrl : undefined;
        data["FirstName"] = this.firstName !== undefined ? this.firstName : undefined;
        data["LastName"] = this.lastName !== undefined ? this.lastName : undefined;
        data["UnitName"] = this.unitName !== undefined ? this.unitName : undefined;
        data["BuildingName"] = this.buildingName !== undefined ? this.buildingName : undefined;
        data["IsTenant"] = this.isTenant !== undefined ? this.isTenant : undefined;
        data["PhoneNumber"] = this.phoneNumber !== undefined ? this.phoneNumber : undefined;
        data["FullName"] = this.fullName !== undefined ? this.fullName : undefined;
        data["Address"] = this.address !== undefined ? this.address : undefined;
        data["City"] = this.city !== undefined ? this.city : undefined;
        data["PostalCode"] = this.postalCode !== undefined ? this.postalCode : undefined;
        data["Email"] = this.email !== undefined ? this.email : undefined;
        data["Archived"] = this.archived !== undefined ? this.archived : undefined;
        if (this.roles && this.roles.constructor === Array) {
            data["Roles"] = [];
            for (let item of this.roles)
                data["Roles"].push(item);
        }
        data["Id"] = this.id !== undefined ? this.id : undefined;
        data["Title"] = this.title !== undefined ? this.title : undefined;
        if (this.actionLinks && this.actionLinks.constructor === Array) {
            data["ActionLinks"] = [];
            for (let item of this.actionLinks)
                data["ActionLinks"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new UserBindingModel(JSON.parse(json));
    }
}

export class LocationBindingModel {
    name: string | null | undefined;
    latitude: number | null | undefined;
    longitude: number | null | undefined;
    type: string | null | undefined;
    id: number | null | undefined;

    constructor(data?: any) {
        if (data !== undefined) {
            this.name = data["Name"] !== undefined ? data["Name"] : undefined;
            this.latitude = data["Latitude"] !== undefined ? data["Latitude"] : undefined;
            this.longitude = data["Longitude"] !== undefined ? data["Longitude"] : undefined;
            this.type = data["Type"] !== undefined ? data["Type"] : undefined;
            this.id = data["Id"] !== undefined ? data["Id"] : undefined;
        }
    }

    static fromJS(data: any): LocationBindingModel {
        return new LocationBindingModel(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["Name"] = this.name !== undefined ? this.name : undefined;
        data["Latitude"] = this.latitude !== undefined ? this.latitude : undefined;
        data["Longitude"] = this.longitude !== undefined ? this.longitude : undefined;
        data["Type"] = this.type !== undefined ? this.type : undefined;
        data["Id"] = this.id !== undefined ? this.id : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new LocationBindingModel(JSON.parse(json));
    }
}

export class QueryResultOfCorporationIndexBindingModel {
    total: number | null | undefined;
    result: CorporationIndexBindingModel[] | null | undefined;

    constructor(data?: any) {
        if (data !== undefined) {
            this.total = data["Total"] !== undefined ? data["Total"] : undefined;
            if (data["Result"] && data["Result"].constructor === Array) {
                this.result = [];
                for (let item of data["Result"])
                    this.result.push(CorporationIndexBindingModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): QueryResultOfCorporationIndexBindingModel {
        return new QueryResultOfCorporationIndexBindingModel(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["Total"] = this.total !== undefined ? this.total : undefined;
        if (this.result && this.result.constructor === Array) {
            data["Result"] = [];
            for (let item of this.result)
                data["Result"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new QueryResultOfCorporationIndexBindingModel(JSON.parse(json));
    }
}

export class CorporationIndexBindingModel {
    propertyCount: number | null | undefined;
    id: string | null | undefined;
    title: string | null | undefined;
    actionLinks: ActionLinkModel[] | null | undefined;

    constructor(data?: any) {
        if (data !== undefined) {
            this.propertyCount = data["PropertyCount"] !== undefined ? data["PropertyCount"] : undefined;
            this.id = data["Id"] !== undefined ? data["Id"] : undefined;
            this.title = data["Title"] !== undefined ? data["Title"] : undefined;
            if (data["ActionLinks"] && data["ActionLinks"].constructor === Array) {
                this.actionLinks = [];
                for (let item of data["ActionLinks"])
                    this.actionLinks.push(ActionLinkModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CorporationIndexBindingModel {
        return new CorporationIndexBindingModel(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["PropertyCount"] = this.propertyCount !== undefined ? this.propertyCount : undefined;
        data["Id"] = this.id !== undefined ? this.id : undefined;
        data["Title"] = this.title !== undefined ? this.title : undefined;
        if (this.actionLinks && this.actionLinks.constructor === Array) {
            data["ActionLinks"] = [];
            for (let item of this.actionLinks)
                data["ActionLinks"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new CorporationIndexBindingModel(JSON.parse(json));
    }
}

export class QueryResultOfIncidentReportViewModel {
    total: number | null | undefined;
    result: IncidentReportViewModel[] | null | undefined;

    constructor(data?: any) {
        if (data !== undefined) {
            this.total = data["Total"] !== undefined ? data["Total"] : undefined;
            if (data["Result"] && data["Result"].constructor === Array) {
                this.result = [];
                for (let item of data["Result"])
                    this.result.push(IncidentReportViewModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): QueryResultOfIncidentReportViewModel {
        return new QueryResultOfIncidentReportViewModel(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["Total"] = this.total !== undefined ? this.total : undefined;
        if (this.result && this.result.constructor === Array) {
            data["Result"] = [];
            for (let item of this.result)
                data["Result"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new QueryResultOfIncidentReportViewModel(JSON.parse(json));
    }
}

export class IncidentReportViewModel {
    title: string | null | undefined;
    requestDate: Date | null | undefined;
    comments: string | null | undefined;
    submissionBy: UserBindingModel | null | undefined;
    statusId: string | null | undefined;
    unitName: string | null | undefined;
    buildingName: string | null | undefined;
    latestCheckin: IncidentCheckinBindingModel | null | undefined;
    checkins: IncidentCheckinBindingModel[] | null | undefined;
    id: string | null | undefined;
    actionLinks: ActionLinkModel[] | null | undefined;

    constructor(data?: any) {
        if (data !== undefined) {
            this.title = data["Title"] !== undefined ? data["Title"] : undefined;
            this.requestDate = data["RequestDate"] ? new Date(data["RequestDate"].toString()) : undefined;
            this.comments = data["Comments"] !== undefined ? data["Comments"] : undefined;
            this.submissionBy = data["SubmissionBy"] ? UserBindingModel.fromJS(data["SubmissionBy"]) : undefined;
            this.statusId = data["StatusId"] !== undefined ? data["StatusId"] : undefined;
            this.unitName = data["UnitName"] !== undefined ? data["UnitName"] : undefined;
            this.buildingName = data["BuildingName"] !== undefined ? data["BuildingName"] : undefined;
            this.latestCheckin = data["LatestCheckin"] ? IncidentCheckinBindingModel.fromJS(data["LatestCheckin"]) : undefined;
            if (data["Checkins"] && data["Checkins"].constructor === Array) {
                this.checkins = [];
                for (let item of data["Checkins"])
                    this.checkins.push(IncidentCheckinBindingModel.fromJS(item));
            }
            this.id = data["Id"] !== undefined ? data["Id"] : undefined;
            if (data["ActionLinks"] && data["ActionLinks"].constructor === Array) {
                this.actionLinks = [];
                for (let item of data["ActionLinks"])
                    this.actionLinks.push(ActionLinkModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): IncidentReportViewModel {
        return new IncidentReportViewModel(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["Title"] = this.title !== undefined ? this.title : undefined;
        data["RequestDate"] = this.requestDate ? this.requestDate.toISOString() : undefined;
        data["Comments"] = this.comments !== undefined ? this.comments : undefined;
        data["SubmissionBy"] = this.submissionBy ? this.submissionBy.toJS() : undefined;
        data["StatusId"] = this.statusId !== undefined ? this.statusId : undefined;
        data["UnitName"] = this.unitName !== undefined ? this.unitName : undefined;
        data["BuildingName"] = this.buildingName !== undefined ? this.buildingName : undefined;
        data["LatestCheckin"] = this.latestCheckin ? this.latestCheckin.toJS() : undefined;
        if (this.checkins && this.checkins.constructor === Array) {
            data["Checkins"] = [];
            for (let item of this.checkins)
                data["Checkins"].push(item.toJS());
        }
        data["Id"] = this.id !== undefined ? this.id : undefined;
        if (this.actionLinks && this.actionLinks.constructor === Array) {
            data["ActionLinks"] = [];
            for (let item of this.actionLinks)
                data["ActionLinks"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new IncidentReportViewModel(JSON.parse(json));
    }
}

export class IncidentCheckinBindingModel {
    statusId: string | null | undefined;
    date: Date | null | undefined;
    comments: string | null | undefined;
    photos: ImageReference[] | null | undefined;
    officer: UserBindingModel | null | undefined;

    constructor(data?: any) {
        if (data !== undefined) {
            this.statusId = data["StatusId"] !== undefined ? data["StatusId"] : undefined;
            this.date = data["Date"] ? new Date(data["Date"].toString()) : undefined;
            this.comments = data["Comments"] !== undefined ? data["Comments"] : undefined;
            if (data["Photos"] && data["Photos"].constructor === Array) {
                this.photos = [];
                for (let item of data["Photos"])
                    this.photos.push(ImageReference.fromJS(item));
            }
            this.officer = data["Officer"] ? UserBindingModel.fromJS(data["Officer"]) : undefined;
        }
    }

    static fromJS(data: any): IncidentCheckinBindingModel {
        return new IncidentCheckinBindingModel(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["StatusId"] = this.statusId !== undefined ? this.statusId : undefined;
        data["Date"] = this.date ? this.date.toISOString() : undefined;
        data["Comments"] = this.comments !== undefined ? this.comments : undefined;
        if (this.photos && this.photos.constructor === Array) {
            data["Photos"] = [];
            for (let item of this.photos)
                data["Photos"].push(item.toJS());
        }
        data["Officer"] = this.officer ? this.officer.toJS() : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new IncidentCheckinBindingModel(JSON.parse(json));
    }
}

export class ImageReference {
    id: number | null | undefined;
    url: string | null | undefined;
    thumbnailUrl: string | null | undefined;
    name: string | null | undefined;
    groupId: string | null | undefined;

    constructor(data?: any) {
        if (data !== undefined) {
            this.id = data["Id"] !== undefined ? data["Id"] : undefined;
            this.url = data["Url"] !== undefined ? data["Url"] : undefined;
            this.thumbnailUrl = data["ThumbnailUrl"] !== undefined ? data["ThumbnailUrl"] : undefined;
            this.name = data["Name"] !== undefined ? data["Name"] : undefined;
            this.groupId = data["GroupId"] !== undefined ? data["GroupId"] : undefined;
        }
    }

    static fromJS(data: any): ImageReference {
        return new ImageReference(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["Id"] = this.id !== undefined ? this.id : undefined;
        data["Url"] = this.url !== undefined ? this.url : undefined;
        data["ThumbnailUrl"] = this.thumbnailUrl !== undefined ? this.thumbnailUrl : undefined;
        data["Name"] = this.name !== undefined ? this.name : undefined;
        data["GroupId"] = this.groupId !== undefined ? this.groupId : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ImageReference(JSON.parse(json));
    }
}

export class IncidentReportFormModel {
    unitId: number | null | undefined;
    reportType: IncidentReportFormModelReportType | undefined;
    comments: string | null | undefined;
    id: string | null | undefined;
    title: string | null | undefined;
    actionLinks: ActionLinkModel[] | null | undefined;

    constructor(data?: any) {
        if (data !== undefined) {
            this.unitId = data["UnitId"] !== undefined ? data["UnitId"] : undefined;
            this.reportType = data["ReportType"] !== undefined ? data["ReportType"] : undefined;
            this.comments = data["Comments"] !== undefined ? data["Comments"] : undefined;
            this.id = data["Id"] !== undefined ? data["Id"] : undefined;
            this.title = data["Title"] !== undefined ? data["Title"] : undefined;
            if (data["ActionLinks"] && data["ActionLinks"].constructor === Array) {
                this.actionLinks = [];
                for (let item of data["ActionLinks"])
                    this.actionLinks.push(ActionLinkModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): IncidentReportFormModel {
        return new IncidentReportFormModel(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["UnitId"] = this.unitId !== undefined ? this.unitId : undefined;
        data["ReportType"] = this.reportType !== undefined ? this.reportType : undefined;
        data["Comments"] = this.comments !== undefined ? this.comments : undefined;
        data["Id"] = this.id !== undefined ? this.id : undefined;
        data["Title"] = this.title !== undefined ? this.title : undefined;
        if (this.actionLinks && this.actionLinks.constructor === Array) {
            data["ActionLinks"] = [];
            for (let item of this.actionLinks)
                data["ActionLinks"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new IncidentReportFormModel(JSON.parse(json));
    }
}

export class QueryResultOfLookupBindingModel {
    total: number | null | undefined;
    result: LookupBindingModel[] | null | undefined;

    constructor(data?: any) {
        if (data !== undefined) {
            this.total = data["Total"] !== undefined ? data["Total"] : undefined;
            if (data["Result"] && data["Result"].constructor === Array) {
                this.result = [];
                for (let item of data["Result"])
                    this.result.push(LookupBindingModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): QueryResultOfLookupBindingModel {
        return new QueryResultOfLookupBindingModel(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["Total"] = this.total !== undefined ? this.total : undefined;
        if (this.result && this.result.constructor === Array) {
            data["Result"] = [];
            for (let item of this.result)
                data["Result"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new QueryResultOfLookupBindingModel(JSON.parse(json));
    }
}

export class LookupBindingModel {
    id: string | null | undefined;
    title: string | null | undefined;
    textPrimary: string | null | undefined;
    textSecondary: string | null | undefined;
    imageUrl: string | null | undefined;
    selected: boolean | null | undefined;

    constructor(data?: any) {
        if (data !== undefined) {
            this.id = data["Id"] !== undefined ? data["Id"] : undefined;
            this.title = data["Title"] !== undefined ? data["Title"] : undefined;
            this.textPrimary = data["TextPrimary"] !== undefined ? data["TextPrimary"] : undefined;
            this.textSecondary = data["TextSecondary"] !== undefined ? data["TextSecondary"] : undefined;
            this.imageUrl = data["ImageUrl"] !== undefined ? data["ImageUrl"] : undefined;
            this.selected = data["Selected"] !== undefined ? data["Selected"] : undefined;
        }
    }

    static fromJS(data: any): LookupBindingModel {
        return new LookupBindingModel(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["Id"] = this.id !== undefined ? this.id : undefined;
        data["Title"] = this.title !== undefined ? this.title : undefined;
        data["TextPrimary"] = this.textPrimary !== undefined ? this.textPrimary : undefined;
        data["TextSecondary"] = this.textSecondary !== undefined ? this.textSecondary : undefined;
        data["ImageUrl"] = this.imageUrl !== undefined ? this.imageUrl : undefined;
        data["Selected"] = this.selected !== undefined ? this.selected : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new LookupBindingModel(JSON.parse(json));
    }
}

export class IncidentIndexBindingModel {
    title: string | null | undefined;
    comments: string | null | undefined;
    statusId: string | null | undefined;
    requestDate: Date | null | undefined;
    reportedBy: UserBindingModel | null | undefined;
    unitName: string | null | undefined;
    buildingName: string | null | undefined;
    latestCheckin: IncidentCheckinBindingModel | null | undefined;
    reporter: string | null | undefined;
    id: string | null | undefined;
    actionLinks: ActionLinkModel[] | null | undefined;

    constructor(data?: any) {
        if (data !== undefined) {
            this.title = data["Title"] !== undefined ? data["Title"] : undefined;
            this.comments = data["Comments"] !== undefined ? data["Comments"] : undefined;
            this.statusId = data["StatusId"] !== undefined ? data["StatusId"] : undefined;
            this.requestDate = data["RequestDate"] ? new Date(data["RequestDate"].toString()) : undefined;
            this.reportedBy = data["ReportedBy"] ? UserBindingModel.fromJS(data["ReportedBy"]) : undefined;
            this.unitName = data["UnitName"] !== undefined ? data["UnitName"] : undefined;
            this.buildingName = data["BuildingName"] !== undefined ? data["BuildingName"] : undefined;
            this.latestCheckin = data["LatestCheckin"] ? IncidentCheckinBindingModel.fromJS(data["LatestCheckin"]) : undefined;
            this.reporter = data["Reporter"] !== undefined ? data["Reporter"] : undefined;
            this.id = data["Id"] !== undefined ? data["Id"] : undefined;
            if (data["ActionLinks"] && data["ActionLinks"].constructor === Array) {
                this.actionLinks = [];
                for (let item of data["ActionLinks"])
                    this.actionLinks.push(ActionLinkModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): IncidentIndexBindingModel {
        return new IncidentIndexBindingModel(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["Title"] = this.title !== undefined ? this.title : undefined;
        data["Comments"] = this.comments !== undefined ? this.comments : undefined;
        data["StatusId"] = this.statusId !== undefined ? this.statusId : undefined;
        data["RequestDate"] = this.requestDate ? this.requestDate.toISOString() : undefined;
        data["ReportedBy"] = this.reportedBy ? this.reportedBy.toJS() : undefined;
        data["UnitName"] = this.unitName !== undefined ? this.unitName : undefined;
        data["BuildingName"] = this.buildingName !== undefined ? this.buildingName : undefined;
        data["LatestCheckin"] = this.latestCheckin ? this.latestCheckin.toJS() : undefined;
        data["Reporter"] = this.reporter !== undefined ? this.reporter : undefined;
        data["Id"] = this.id !== undefined ? this.id : undefined;
        if (this.actionLinks && this.actionLinks.constructor === Array) {
            data["ActionLinks"] = [];
            for (let item of this.actionLinks)
                data["ActionLinks"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new IncidentIndexBindingModel(JSON.parse(json));
    }
}

export class IncidentReportBindingModel {
    comments: string | null | undefined;
    incidentType: string | null | undefined;
    photos: string[] | null | undefined;
    requester: UserBindingModel | null | undefined;
    requesterId: string | null | undefined;
    createdOn: Date | null | undefined;
    unitName: string | null | undefined;
    buildingName: string | null | undefined;
    status: string | null | undefined;
    checkins: IncidentCheckinBindingModel[] | null | undefined;
    requesterPhoneNumber: string | null | undefined;
    unitId: number | null | undefined;
    id: number | null | undefined;

    constructor(data?: any) {
        if (data !== undefined) {
            this.comments = data["Comments"] !== undefined ? data["Comments"] : undefined;
            this.incidentType = data["IncidentType"] !== undefined ? data["IncidentType"] : undefined;
            if (data["Photos"] && data["Photos"].constructor === Array) {
                this.photos = [];
                for (let item of data["Photos"])
                    this.photos.push(item);
            }
            this.requester = data["Requester"] ? UserBindingModel.fromJS(data["Requester"]) : undefined;
            this.requesterId = data["RequesterId"] !== undefined ? data["RequesterId"] : undefined;
            this.createdOn = data["CreatedOn"] ? new Date(data["CreatedOn"].toString()) : undefined;
            this.unitName = data["UnitName"] !== undefined ? data["UnitName"] : undefined;
            this.buildingName = data["BuildingName"] !== undefined ? data["BuildingName"] : undefined;
            this.status = data["Status"] !== undefined ? data["Status"] : undefined;
            if (data["Checkins"] && data["Checkins"].constructor === Array) {
                this.checkins = [];
                for (let item of data["Checkins"])
                    this.checkins.push(IncidentCheckinBindingModel.fromJS(item));
            }
            this.requesterPhoneNumber = data["RequesterPhoneNumber"] !== undefined ? data["RequesterPhoneNumber"] : undefined;
            this.unitId = data["UnitId"] !== undefined ? data["UnitId"] : undefined;
            this.id = data["Id"] !== undefined ? data["Id"] : undefined;
        }
    }

    static fromJS(data: any): IncidentReportBindingModel {
        return new IncidentReportBindingModel(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["Comments"] = this.comments !== undefined ? this.comments : undefined;
        data["IncidentType"] = this.incidentType !== undefined ? this.incidentType : undefined;
        if (this.photos && this.photos.constructor === Array) {
            data["Photos"] = [];
            for (let item of this.photos)
                data["Photos"].push(item);
        }
        data["Requester"] = this.requester ? this.requester.toJS() : undefined;
        data["RequesterId"] = this.requesterId !== undefined ? this.requesterId : undefined;
        data["CreatedOn"] = this.createdOn ? this.createdOn.toISOString() : undefined;
        data["UnitName"] = this.unitName !== undefined ? this.unitName : undefined;
        data["BuildingName"] = this.buildingName !== undefined ? this.buildingName : undefined;
        data["Status"] = this.status !== undefined ? this.status : undefined;
        if (this.checkins && this.checkins.constructor === Array) {
            data["Checkins"] = [];
            for (let item of this.checkins)
                data["Checkins"].push(item.toJS());
        }
        data["RequesterPhoneNumber"] = this.requesterPhoneNumber !== undefined ? this.requesterPhoneNumber : undefined;
        data["UnitId"] = this.unitId !== undefined ? this.unitId : undefined;
        data["Id"] = this.id !== undefined ? this.id : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new IncidentReportBindingModel(JSON.parse(json));
    }
}

export class IncidentReportModel {
    incidentReportTypeId: IncidentReportModelIncidentReportTypeId | null | undefined;
    comments: string | null | undefined;
    images: string[] | null | undefined;

    constructor(data?: any) {
        if (data !== undefined) {
            this.incidentReportTypeId = data["IncidentReportTypeId"] !== undefined ? data["IncidentReportTypeId"] : undefined;
            this.comments = data["Comments"] !== undefined ? data["Comments"] : undefined;
            if (data["Images"] && data["Images"].constructor === Array) {
                this.images = [];
                for (let item of data["Images"])
                    this.images.push(item);
            }
        }
    }

    static fromJS(data: any): IncidentReportModel {
        return new IncidentReportModel(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["IncidentReportTypeId"] = this.incidentReportTypeId !== undefined ? this.incidentReportTypeId : undefined;
        data["Comments"] = this.comments !== undefined ? this.comments : undefined;
        if (this.images && this.images.constructor === Array) {
            data["Images"] = [];
            for (let item of this.images)
                data["Images"].push(item);
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new IncidentReportModel(JSON.parse(json));
    }
}

export class InspectionViewModel {
    createDate: Date | null | undefined;
    scheduleDate: Date | null | undefined;
    endDate: Date | null | undefined;
    message: string | null | undefined;
    submissionUser: UserBindingModel | null | undefined;
    status: InspectionViewModelStatus | null | undefined;
    unitName: string | null | undefined;
    buildingName: string | null | undefined;
    petStatus: number | null | undefined;
    hasPet: boolean | null | undefined;
    id: string | null | undefined;
    title: string | null | undefined;
    actionLinks: ActionLinkModel[] | null | undefined;

    constructor(data?: any) {
        if (data !== undefined) {
            this.createDate = data["CreateDate"] ? new Date(data["CreateDate"].toString()) : undefined;
            this.scheduleDate = data["ScheduleDate"] ? new Date(data["ScheduleDate"].toString()) : undefined;
            this.endDate = data["EndDate"] ? new Date(data["EndDate"].toString()) : undefined;
            this.message = data["Message"] !== undefined ? data["Message"] : undefined;
            this.submissionUser = data["SubmissionUser"] ? UserBindingModel.fromJS(data["SubmissionUser"]) : undefined;
            this.status = data["Status"] !== undefined ? data["Status"] : undefined;
            this.unitName = data["UnitName"] !== undefined ? data["UnitName"] : undefined;
            this.buildingName = data["BuildingName"] !== undefined ? data["BuildingName"] : undefined;
            this.petStatus = data["PetStatus"] !== undefined ? data["PetStatus"] : undefined;
            this.hasPet = data["HasPet"] !== undefined ? data["HasPet"] : undefined;
            this.id = data["Id"] !== undefined ? data["Id"] : undefined;
            this.title = data["Title"] !== undefined ? data["Title"] : undefined;
            if (data["ActionLinks"] && data["ActionLinks"].constructor === Array) {
                this.actionLinks = [];
                for (let item of data["ActionLinks"])
                    this.actionLinks.push(ActionLinkModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): InspectionViewModel {
        return new InspectionViewModel(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["CreateDate"] = this.createDate ? this.createDate.toISOString() : undefined;
        data["ScheduleDate"] = this.scheduleDate ? this.scheduleDate.toISOString() : undefined;
        data["EndDate"] = this.endDate ? this.endDate.toISOString() : undefined;
        data["Message"] = this.message !== undefined ? this.message : undefined;
        data["SubmissionUser"] = this.submissionUser ? this.submissionUser.toJS() : undefined;
        data["Status"] = this.status !== undefined ? this.status : undefined;
        data["UnitName"] = this.unitName !== undefined ? this.unitName : undefined;
        data["BuildingName"] = this.buildingName !== undefined ? this.buildingName : undefined;
        data["PetStatus"] = this.petStatus !== undefined ? this.petStatus : undefined;
        data["HasPet"] = this.hasPet !== undefined ? this.hasPet : undefined;
        data["Id"] = this.id !== undefined ? this.id : undefined;
        data["Title"] = this.title !== undefined ? this.title : undefined;
        if (this.actionLinks && this.actionLinks.constructor === Array) {
            data["ActionLinks"] = [];
            for (let item of this.actionLinks)
                data["ActionLinks"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new InspectionViewModel(JSON.parse(json));
    }
}

export class FinishInspectionViewModel {
    inspectionId: number | null | undefined;
    answers: InspectionCategoryAnswerViewModel[] | null | undefined;
    status: FinishInspectionViewModelStatus | null | undefined;

    constructor(data?: any) {
        if (data !== undefined) {
            this.inspectionId = data["InspectionId"] !== undefined ? data["InspectionId"] : undefined;
            if (data["Answers"] && data["Answers"].constructor === Array) {
                this.answers = [];
                for (let item of data["Answers"])
                    this.answers.push(InspectionCategoryAnswerViewModel.fromJS(item));
            }
            this.status = data["Status"] !== undefined ? data["Status"] : undefined;
        }
    }

    static fromJS(data: any): FinishInspectionViewModel {
        return new FinishInspectionViewModel(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["InspectionId"] = this.inspectionId !== undefined ? this.inspectionId : undefined;
        if (this.answers && this.answers.constructor === Array) {
            data["Answers"] = [];
            for (let item of this.answers)
                data["Answers"].push(item.toJS());
        }
        data["Status"] = this.status !== undefined ? this.status : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new FinishInspectionViewModel(JSON.parse(json));
    }
}

export class InspectionCategoryAnswerViewModel {
    roomId: number | null | undefined;
    categoryId: number | null | undefined;
    answers: InspectionAnswerViewModel[] | null | undefined;
    status: InspectionCategoryAnswerViewModelStatus | null | undefined;

    constructor(data?: any) {
        if (data !== undefined) {
            this.roomId = data["RoomId"] !== undefined ? data["RoomId"] : undefined;
            this.categoryId = data["CategoryId"] !== undefined ? data["CategoryId"] : undefined;
            if (data["Answers"] && data["Answers"].constructor === Array) {
                this.answers = [];
                for (let item of data["Answers"])
                    this.answers.push(InspectionAnswerViewModel.fromJS(item));
            }
            this.status = data["Status"] !== undefined ? data["Status"] : undefined;
        }
    }

    static fromJS(data: any): InspectionCategoryAnswerViewModel {
        return new InspectionCategoryAnswerViewModel(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["RoomId"] = this.roomId !== undefined ? this.roomId : undefined;
        data["CategoryId"] = this.categoryId !== undefined ? this.categoryId : undefined;
        if (this.answers && this.answers.constructor === Array) {
            data["Answers"] = [];
            for (let item of this.answers)
                data["Answers"].push(item.toJS());
        }
        data["Status"] = this.status !== undefined ? this.status : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new InspectionCategoryAnswerViewModel(JSON.parse(json));
    }
}

export class InspectionAnswerViewModel {
    questionId: number | null | undefined;
    value: string | null | undefined;

    constructor(data?: any) {
        if (data !== undefined) {
            this.questionId = data["QuestionId"] !== undefined ? data["QuestionId"] : undefined;
            this.value = data["Value"] !== undefined ? data["Value"] : undefined;
        }
    }

    static fromJS(data: any): InspectionAnswerViewModel {
        return new InspectionAnswerViewModel(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["QuestionId"] = this.questionId !== undefined ? this.questionId : undefined;
        data["Value"] = this.value !== undefined ? this.value : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new InspectionAnswerViewModel(JSON.parse(json));
    }
}

export class LookupPairModel {
    key: string | null | undefined;
    value: string | null | undefined;

    constructor(data?: any) {
        if (data !== undefined) {
            this.key = data["Key"] !== undefined ? data["Key"] : undefined;
            this.value = data["Value"] !== undefined ? data["Value"] : undefined;
        }
    }

    static fromJS(data: any): LookupPairModel {
        return new LookupPairModel(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["Key"] = this.key !== undefined ? this.key : undefined;
        data["Value"] = this.value !== undefined ? this.value : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new LookupPairModel(JSON.parse(json));
    }
}

export class MaintenanceIndexBindingModel {
    title: string | null | undefined;
    comments: string | null | undefined;
    statusId: string | null | undefined;
    requestDate: Date | null | undefined;
    submissionBy: UserBindingModel | null | undefined;
    latestCheckin: MaintenanceCheckinBindingModel | null | undefined;
    unitName: string | null | undefined;
    buildingName: string | null | undefined;
    id: string | null | undefined;
    actionLinks: ActionLinkModel[] | null | undefined;

    constructor(data?: any) {
        if (data !== undefined) {
            this.title = data["Title"] !== undefined ? data["Title"] : undefined;
            this.comments = data["Comments"] !== undefined ? data["Comments"] : undefined;
            this.statusId = data["StatusId"] !== undefined ? data["StatusId"] : undefined;
            this.requestDate = data["RequestDate"] ? new Date(data["RequestDate"].toString()) : undefined;
            this.submissionBy = data["SubmissionBy"] ? UserBindingModel.fromJS(data["SubmissionBy"]) : undefined;
            this.latestCheckin = data["LatestCheckin"] ? MaintenanceCheckinBindingModel.fromJS(data["LatestCheckin"]) : undefined;
            this.unitName = data["UnitName"] !== undefined ? data["UnitName"] : undefined;
            this.buildingName = data["BuildingName"] !== undefined ? data["BuildingName"] : undefined;
            this.id = data["Id"] !== undefined ? data["Id"] : undefined;
            if (data["ActionLinks"] && data["ActionLinks"].constructor === Array) {
                this.actionLinks = [];
                for (let item of data["ActionLinks"])
                    this.actionLinks.push(ActionLinkModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): MaintenanceIndexBindingModel {
        return new MaintenanceIndexBindingModel(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["Title"] = this.title !== undefined ? this.title : undefined;
        data["Comments"] = this.comments !== undefined ? this.comments : undefined;
        data["StatusId"] = this.statusId !== undefined ? this.statusId : undefined;
        data["RequestDate"] = this.requestDate ? this.requestDate.toISOString() : undefined;
        data["SubmissionBy"] = this.submissionBy ? this.submissionBy.toJS() : undefined;
        data["LatestCheckin"] = this.latestCheckin ? this.latestCheckin.toJS() : undefined;
        data["UnitName"] = this.unitName !== undefined ? this.unitName : undefined;
        data["BuildingName"] = this.buildingName !== undefined ? this.buildingName : undefined;
        data["Id"] = this.id !== undefined ? this.id : undefined;
        if (this.actionLinks && this.actionLinks.constructor === Array) {
            data["ActionLinks"] = [];
            for (let item of this.actionLinks)
                data["ActionLinks"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new MaintenanceIndexBindingModel(JSON.parse(json));
    }
}

export class MaintenanceCheckinBindingModel {
    statusId: string | null | undefined;
    date: Date | null | undefined;
    comments: string | null | undefined;
    photos: ImageReference[] | null | undefined;
    worker: UserBindingModel | null | undefined;

    constructor(data?: any) {
        if (data !== undefined) {
            this.statusId = data["StatusId"] !== undefined ? data["StatusId"] : undefined;
            this.date = data["Date"] ? new Date(data["Date"].toString()) : undefined;
            this.comments = data["Comments"] !== undefined ? data["Comments"] : undefined;
            if (data["Photos"] && data["Photos"].constructor === Array) {
                this.photos = [];
                for (let item of data["Photos"])
                    this.photos.push(ImageReference.fromJS(item));
            }
            this.worker = data["Worker"] ? UserBindingModel.fromJS(data["Worker"]) : undefined;
        }
    }

    static fromJS(data: any): MaintenanceCheckinBindingModel {
        return new MaintenanceCheckinBindingModel(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["StatusId"] = this.statusId !== undefined ? this.statusId : undefined;
        data["Date"] = this.date ? this.date.toISOString() : undefined;
        data["Comments"] = this.comments !== undefined ? this.comments : undefined;
        if (this.photos && this.photos.constructor === Array) {
            data["Photos"] = [];
            for (let item of this.photos)
                data["Photos"].push(item.toJS());
        }
        data["Worker"] = this.worker ? this.worker.toJS() : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new MaintenanceCheckinBindingModel(JSON.parse(json));
    }
}

export class MaintenanceBindingModel {
    userName: string | null | undefined;
    userId: string | null | undefined;
    name: string | null | undefined;
    message: string | null | undefined;
    photos: string[] | null | undefined;
    unitName: string | null | undefined;
    status: string | null | undefined;
    scheduleDate: Date | null | undefined;
    petStatus: number | null | undefined;
    checkins: MaintenanceCheckinBindingModel[] | null | undefined;
    user: UserBindingModel | null | undefined;
    buildingName: string | null | undefined;
    permissionToEnter: boolean | null | undefined;
    acceptableCheckinCodes: string[] | null | undefined;
    canComplete: boolean | null | undefined;
    canPause: boolean | null | undefined;
    canSchedule: boolean | null | undefined;
    canStart: boolean | null | undefined;

    constructor(data?: any) {
        if (data !== undefined) {
            this.userName = data["UserName"] !== undefined ? data["UserName"] : undefined;
            this.userId = data["UserId"] !== undefined ? data["UserId"] : undefined;
            this.name = data["Name"] !== undefined ? data["Name"] : undefined;
            this.message = data["Message"] !== undefined ? data["Message"] : undefined;
            if (data["Photos"] && data["Photos"].constructor === Array) {
                this.photos = [];
                for (let item of data["Photos"])
                    this.photos.push(item);
            }
            this.unitName = data["UnitName"] !== undefined ? data["UnitName"] : undefined;
            this.status = data["Status"] !== undefined ? data["Status"] : undefined;
            this.scheduleDate = data["ScheduleDate"] ? new Date(data["ScheduleDate"].toString()) : undefined;
            this.petStatus = data["PetStatus"] !== undefined ? data["PetStatus"] : undefined;
            if (data["Checkins"] && data["Checkins"].constructor === Array) {
                this.checkins = [];
                for (let item of data["Checkins"])
                    this.checkins.push(MaintenanceCheckinBindingModel.fromJS(item));
            }
            this.user = data["User"] ? UserBindingModel.fromJS(data["User"]) : undefined;
            this.buildingName = data["BuildingName"] !== undefined ? data["BuildingName"] : undefined;
            this.permissionToEnter = data["PermissionToEnter"] !== undefined ? data["PermissionToEnter"] : undefined;
            if (data["AcceptableCheckinCodes"] && data["AcceptableCheckinCodes"].constructor === Array) {
                this.acceptableCheckinCodes = [];
                for (let item of data["AcceptableCheckinCodes"])
                    this.acceptableCheckinCodes.push(item);
            }
            this.canComplete = data["CanComplete"] !== undefined ? data["CanComplete"] : undefined;
            this.canPause = data["CanPause"] !== undefined ? data["CanPause"] : undefined;
            this.canSchedule = data["CanSchedule"] !== undefined ? data["CanSchedule"] : undefined;
            this.canStart = data["CanStart"] !== undefined ? data["CanStart"] : undefined;
        }
    }

    static fromJS(data: any): MaintenanceBindingModel {
        return new MaintenanceBindingModel(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["UserName"] = this.userName !== undefined ? this.userName : undefined;
        data["UserId"] = this.userId !== undefined ? this.userId : undefined;
        data["Name"] = this.name !== undefined ? this.name : undefined;
        data["Message"] = this.message !== undefined ? this.message : undefined;
        if (this.photos && this.photos.constructor === Array) {
            data["Photos"] = [];
            for (let item of this.photos)
                data["Photos"].push(item);
        }
        data["UnitName"] = this.unitName !== undefined ? this.unitName : undefined;
        data["Status"] = this.status !== undefined ? this.status : undefined;
        data["ScheduleDate"] = this.scheduleDate ? this.scheduleDate.toISOString() : undefined;
        data["PetStatus"] = this.petStatus !== undefined ? this.petStatus : undefined;
        if (this.checkins && this.checkins.constructor === Array) {
            data["Checkins"] = [];
            for (let item of this.checkins)
                data["Checkins"].push(item.toJS());
        }
        data["User"] = this.user ? this.user.toJS() : undefined;
        data["BuildingName"] = this.buildingName !== undefined ? this.buildingName : undefined;
        data["PermissionToEnter"] = this.permissionToEnter !== undefined ? this.permissionToEnter : undefined;
        if (this.acceptableCheckinCodes && this.acceptableCheckinCodes.constructor === Array) {
            data["AcceptableCheckinCodes"] = [];
            for (let item of this.acceptableCheckinCodes)
                data["AcceptableCheckinCodes"].push(item);
        }
        data["CanComplete"] = this.canComplete !== undefined ? this.canComplete : undefined;
        data["CanPause"] = this.canPause !== undefined ? this.canPause : undefined;
        data["CanSchedule"] = this.canSchedule !== undefined ? this.canSchedule : undefined;
        data["CanStart"] = this.canStart !== undefined ? this.canStart : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new MaintenanceBindingModel(JSON.parse(json));
    }
}

export class QueryResultOfMaintenanceRequestViewModel {
    total: number | null | undefined;
    result: MaintenanceRequestViewModel[] | null | undefined;

    constructor(data?: any) {
        if (data !== undefined) {
            this.total = data["Total"] !== undefined ? data["Total"] : undefined;
            if (data["Result"] && data["Result"].constructor === Array) {
                this.result = [];
                for (let item of data["Result"])
                    this.result.push(MaintenanceRequestViewModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): QueryResultOfMaintenanceRequestViewModel {
        return new QueryResultOfMaintenanceRequestViewModel(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["Total"] = this.total !== undefined ? this.total : undefined;
        if (this.result && this.result.constructor === Array) {
            data["Result"] = [];
            for (let item of this.result)
                data["Result"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new QueryResultOfMaintenanceRequestViewModel(JSON.parse(json));
    }
}

export class MaintenanceRequestViewModel {
    scheduleDate: Date | null | undefined;
    submissionDate: Date | null | undefined;
    title: string | null | undefined;
    requestDate: Date | null | undefined;
    comments: string | null | undefined;
    submissionBy: UserBindingModel | null | undefined;
    completedBy: UserBindingModel | null | undefined;
    readonly submissionByFullName: string | null | undefined;
    readonly completedByFullName: string | null | undefined;
    statusId: string | null | undefined;
    unitName: string | null | undefined;
    buildingName: string | null | undefined;
    latestCheckin: MaintenanceCheckinBindingModel | null | undefined;
    checkins: MaintenanceCheckinBindingModel[] | null | undefined;
    mainImage: string | null | undefined;
    permissionToEnter: boolean | null | undefined;
    petStatus: number | null | undefined;
    hasPet: boolean | null | undefined;
    endDate: Date | null | undefined;
    startDate: Date | null | undefined;
    completeDate: Date | null | undefined;
    assignedToId: string | null | undefined;
    assignedTo: UserBindingModel | null | undefined;
    description: string | null | undefined;
    assignLink: ActionLinkModel | null | undefined;
    tenants: UserBindingModel[] | null | undefined;
    id: string | null | undefined;
    actionLinks: ActionLinkModel[] | null | undefined;

    constructor(data?: any) {
        if (data !== undefined) {
            this.scheduleDate = data["ScheduleDate"] ? new Date(data["ScheduleDate"].toString()) : undefined;
            this.submissionDate = data["SubmissionDate"] ? new Date(data["SubmissionDate"].toString()) : undefined;
            this.title = data["Title"] !== undefined ? data["Title"] : undefined;
            this.requestDate = data["RequestDate"] ? new Date(data["RequestDate"].toString()) : undefined;
            this.comments = data["Comments"] !== undefined ? data["Comments"] : undefined;
            this.submissionBy = data["SubmissionBy"] ? UserBindingModel.fromJS(data["SubmissionBy"]) : undefined;
            this.completedBy = data["CompletedBy"] ? UserBindingModel.fromJS(data["CompletedBy"]) : undefined;
            this.submissionByFullName = data["SubmissionByFullName"] !== undefined ? data["SubmissionByFullName"] : undefined;
            this.completedByFullName = data["CompletedByFullName"] !== undefined ? data["CompletedByFullName"] : undefined;
            this.statusId = data["StatusId"] !== undefined ? data["StatusId"] : undefined;
            this.unitName = data["UnitName"] !== undefined ? data["UnitName"] : undefined;
            this.buildingName = data["BuildingName"] !== undefined ? data["BuildingName"] : undefined;
            this.latestCheckin = data["LatestCheckin"] ? MaintenanceCheckinBindingModel.fromJS(data["LatestCheckin"]) : undefined;
            if (data["Checkins"] && data["Checkins"].constructor === Array) {
                this.checkins = [];
                for (let item of data["Checkins"])
                    this.checkins.push(MaintenanceCheckinBindingModel.fromJS(item));
            }
            this.mainImage = data["MainImage"] !== undefined ? data["MainImage"] : undefined;
            this.permissionToEnter = data["PermissionToEnter"] !== undefined ? data["PermissionToEnter"] : undefined;
            this.petStatus = data["PetStatus"] !== undefined ? data["PetStatus"] : undefined;
            this.hasPet = data["HasPet"] !== undefined ? data["HasPet"] : undefined;
            this.endDate = data["EndDate"] ? new Date(data["EndDate"].toString()) : undefined;
            this.startDate = data["StartDate"] ? new Date(data["StartDate"].toString()) : undefined;
            this.completeDate = data["CompleteDate"] ? new Date(data["CompleteDate"].toString()) : undefined;
            this.assignedToId = data["AssignedToId"] !== undefined ? data["AssignedToId"] : undefined;
            this.assignedTo = data["AssignedTo"] ? UserBindingModel.fromJS(data["AssignedTo"]) : undefined;
            this.description = data["Description"] !== undefined ? data["Description"] : undefined;
            this.assignLink = data["AssignLink"] ? ActionLinkModel.fromJS(data["AssignLink"]) : undefined;
            if (data["Tenants"] && data["Tenants"].constructor === Array) {
                this.tenants = [];
                for (let item of data["Tenants"])
                    this.tenants.push(UserBindingModel.fromJS(item));
            }
            this.id = data["Id"] !== undefined ? data["Id"] : undefined;
            if (data["ActionLinks"] && data["ActionLinks"].constructor === Array) {
                this.actionLinks = [];
                for (let item of data["ActionLinks"])
                    this.actionLinks.push(ActionLinkModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): MaintenanceRequestViewModel {
        return new MaintenanceRequestViewModel(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["ScheduleDate"] = this.scheduleDate ? this.scheduleDate.toISOString() : undefined;
        data["SubmissionDate"] = this.submissionDate ? this.submissionDate.toISOString() : undefined;
        data["Title"] = this.title !== undefined ? this.title : undefined;
        data["RequestDate"] = this.requestDate ? this.requestDate.toISOString() : undefined;
        data["Comments"] = this.comments !== undefined ? this.comments : undefined;
        data["SubmissionBy"] = this.submissionBy ? this.submissionBy.toJS() : undefined;
        data["CompletedBy"] = this.completedBy ? this.completedBy.toJS() : undefined;
        data["SubmissionByFullName"] = this.submissionByFullName !== undefined ? this.submissionByFullName : undefined;
        data["CompletedByFullName"] = this.completedByFullName !== undefined ? this.completedByFullName : undefined;
        data["StatusId"] = this.statusId !== undefined ? this.statusId : undefined;
        data["UnitName"] = this.unitName !== undefined ? this.unitName : undefined;
        data["BuildingName"] = this.buildingName !== undefined ? this.buildingName : undefined;
        data["LatestCheckin"] = this.latestCheckin ? this.latestCheckin.toJS() : undefined;
        if (this.checkins && this.checkins.constructor === Array) {
            data["Checkins"] = [];
            for (let item of this.checkins)
                data["Checkins"].push(item.toJS());
        }
        data["MainImage"] = this.mainImage !== undefined ? this.mainImage : undefined;
        data["PermissionToEnter"] = this.permissionToEnter !== undefined ? this.permissionToEnter : undefined;
        data["PetStatus"] = this.petStatus !== undefined ? this.petStatus : undefined;
        data["HasPet"] = this.hasPet !== undefined ? this.hasPet : undefined;
        data["EndDate"] = this.endDate ? this.endDate.toISOString() : undefined;
        data["StartDate"] = this.startDate ? this.startDate.toISOString() : undefined;
        data["CompleteDate"] = this.completeDate ? this.completeDate.toISOString() : undefined;
        data["AssignedToId"] = this.assignedToId !== undefined ? this.assignedToId : undefined;
        data["AssignedTo"] = this.assignedTo ? this.assignedTo.toJS() : undefined;
        data["Description"] = this.description !== undefined ? this.description : undefined;
        data["AssignLink"] = this.assignLink ? this.assignLink.toJS() : undefined;
        if (this.tenants && this.tenants.constructor === Array) {
            data["Tenants"] = [];
            for (let item of this.tenants)
                data["Tenants"].push(item.toJS());
        }
        data["Id"] = this.id !== undefined ? this.id : undefined;
        if (this.actionLinks && this.actionLinks.constructor === Array) {
            data["ActionLinks"] = [];
            for (let item of this.actionLinks)
                data["ActionLinks"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new MaintenanceRequestViewModel(JSON.parse(json));
    }
}

export class MaitenanceRequestModel {
    permissionToEnter: boolean | null | undefined;
    petStatus: number | null | undefined;
    unitId: number | null | undefined;
    maitenanceRequestTypeId: number | null | undefined;
    comments: string | null | undefined;
    emergency: boolean | null | undefined;
    images: string[] | null | undefined;

    constructor(data?: any) {
        if (data !== undefined) {
            this.permissionToEnter = data["PermissionToEnter"] !== undefined ? data["PermissionToEnter"] : undefined;
            this.petStatus = data["PetStatus"] !== undefined ? data["PetStatus"] : undefined;
            this.unitId = data["UnitId"] !== undefined ? data["UnitId"] : undefined;
            this.maitenanceRequestTypeId = data["MaitenanceRequestTypeId"] !== undefined ? data["MaitenanceRequestTypeId"] : undefined;
            this.comments = data["Comments"] !== undefined ? data["Comments"] : undefined;
            this.emergency = data["Emergency"] !== undefined ? data["Emergency"] : undefined;
            if (data["Images"] && data["Images"].constructor === Array) {
                this.images = [];
                for (let item of data["Images"])
                    this.images.push(item);
            }
        }
    }

    static fromJS(data: any): MaitenanceRequestModel {
        return new MaitenanceRequestModel(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["PermissionToEnter"] = this.permissionToEnter !== undefined ? this.permissionToEnter : undefined;
        data["PetStatus"] = this.petStatus !== undefined ? this.petStatus : undefined;
        data["UnitId"] = this.unitId !== undefined ? this.unitId : undefined;
        data["MaitenanceRequestTypeId"] = this.maitenanceRequestTypeId !== undefined ? this.maitenanceRequestTypeId : undefined;
        data["Comments"] = this.comments !== undefined ? this.comments : undefined;
        data["Emergency"] = this.emergency !== undefined ? this.emergency : undefined;
        if (this.images && this.images.constructor === Array) {
            data["Images"] = [];
            for (let item of this.images)
                data["Images"].push(item);
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new MaitenanceRequestModel(JSON.parse(json));
    }
}

export class MaitenanceRequest {
    workerAssignedId: string | null | undefined;
    workerAssigned: ApplicationUser | null | undefined;
    userId: string | null | undefined;
    maitenanceRequestTypeId: number | null | undefined;
    permissionToEnter: boolean | null | undefined;
    groupId: string | null | undefined;
    readonly description: string | null | undefined;
    readonly relatedId: any | null | undefined;
    readonly type: MaitenanceRequestType2 | null | undefined;
    emergency: boolean | null | undefined;
    petStatus: number | null | undefined;
    unitId: number | null | undefined;
    unit: Unit | null | undefined;
    user: ApplicationUser | null | undefined;
    maitenanceRequestType: MaitenanceRequestType | null | undefined;
    checkins: MaintenanceRequestCheckin[] | null | undefined;
    scheduleDate: Date | null | undefined;
    message: string | null | undefined;
    readonly latestCheckin: MaintenanceRequestCheckin | null | undefined;
    statusId: string | null | undefined;
    status: MaintenanceRequestStatus | null | undefined;
    submissionDate: Date | null | undefined;
    completionDate: Date | null | undefined;
    readonly timeToComplete: string | null | undefined;
    submittedVia: MaitenanceRequestSubmittedVia | null | undefined;
    propertyId: number | null | undefined;
    id: number | null | undefined;
    createDate: Date | null | undefined;

    constructor(data?: any) {
        if (data !== undefined) {
            this.workerAssignedId = data["WorkerAssignedId"] !== undefined ? data["WorkerAssignedId"] : undefined;
            this.workerAssigned = data["WorkerAssigned"] ? ApplicationUser.fromJS(data["WorkerAssigned"]) : undefined;
            this.userId = data["UserId"] !== undefined ? data["UserId"] : undefined;
            this.maitenanceRequestTypeId = data["MaitenanceRequestTypeId"] !== undefined ? data["MaitenanceRequestTypeId"] : undefined;
            this.permissionToEnter = data["PermissionToEnter"] !== undefined ? data["PermissionToEnter"] : undefined;
            this.groupId = data["GroupId"] !== undefined ? data["GroupId"] : undefined;
            this.description = data["Description"] !== undefined ? data["Description"] : undefined;
            if (data["RelatedId"]) {
                this.relatedId = {};
                for (let key in data["RelatedId"]) {
                    if (data["RelatedId"].hasOwnProperty(key))
                        this.relatedId[key] = data["RelatedId"][key] !== undefined ? data["RelatedId"][key] : undefined;
                }
            }
            this.type = data["Type"] !== undefined ? data["Type"] : undefined;
            this.emergency = data["Emergency"] !== undefined ? data["Emergency"] : undefined;
            this.petStatus = data["PetStatus"] !== undefined ? data["PetStatus"] : undefined;
            this.unitId = data["UnitId"] !== undefined ? data["UnitId"] : undefined;
            this.unit = data["Unit"] ? Unit.fromJS(data["Unit"]) : undefined;
            this.user = data["User"] ? ApplicationUser.fromJS(data["User"]) : undefined;
            this.maitenanceRequestType = data["MaitenanceRequestType"] ? MaitenanceRequestType.fromJS(data["MaitenanceRequestType"]) : undefined;
            if (data["Checkins"] && data["Checkins"].constructor === Array) {
                this.checkins = [];
                for (let item of data["Checkins"])
                    this.checkins.push(MaintenanceRequestCheckin.fromJS(item));
            }
            this.scheduleDate = data["ScheduleDate"] ? new Date(data["ScheduleDate"].toString()) : undefined;
            this.message = data["Message"] !== undefined ? data["Message"] : undefined;
            this.latestCheckin = data["LatestCheckin"] ? MaintenanceRequestCheckin.fromJS(data["LatestCheckin"]) : undefined;
            this.statusId = data["StatusId"] !== undefined ? data["StatusId"] : undefined;
            this.status = data["Status"] ? MaintenanceRequestStatus.fromJS(data["Status"]) : undefined;
            this.submissionDate = data["SubmissionDate"] ? new Date(data["SubmissionDate"].toString()) : undefined;
            this.completionDate = data["CompletionDate"] ? new Date(data["CompletionDate"].toString()) : undefined;
            this.timeToComplete = data["TimeToComplete"] !== undefined ? data["TimeToComplete"] : undefined;
            this.submittedVia = data["SubmittedVia"] !== undefined ? data["SubmittedVia"] : undefined;
            this.propertyId = data["PropertyId"] !== undefined ? data["PropertyId"] : undefined;
            this.id = data["Id"] !== undefined ? data["Id"] : undefined;
            this.createDate = data["CreateDate"] ? new Date(data["CreateDate"].toString()) : undefined;
        }
    }

    static fromJS(data: any): MaitenanceRequest {
        return new MaitenanceRequest(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["WorkerAssignedId"] = this.workerAssignedId !== undefined ? this.workerAssignedId : undefined;
        data["WorkerAssigned"] = this.workerAssigned ? this.workerAssigned.toJS() : undefined;
        data["UserId"] = this.userId !== undefined ? this.userId : undefined;
        data["MaitenanceRequestTypeId"] = this.maitenanceRequestTypeId !== undefined ? this.maitenanceRequestTypeId : undefined;
        data["PermissionToEnter"] = this.permissionToEnter !== undefined ? this.permissionToEnter : undefined;
        data["GroupId"] = this.groupId !== undefined ? this.groupId : undefined;
        data["Description"] = this.description !== undefined ? this.description : undefined;
        if (this.relatedId) {
            data["RelatedId"] = {};
            for (let key in this.relatedId) {
                if (this.relatedId.hasOwnProperty(key))
                    data["RelatedId"][key] = this.relatedId[key] !== undefined ? this.relatedId[key] : undefined;
            }
        }
        data["Type"] = this.type !== undefined ? this.type : undefined;
        data["Emergency"] = this.emergency !== undefined ? this.emergency : undefined;
        data["PetStatus"] = this.petStatus !== undefined ? this.petStatus : undefined;
        data["UnitId"] = this.unitId !== undefined ? this.unitId : undefined;
        data["Unit"] = this.unit ? this.unit.toJS() : undefined;
        data["User"] = this.user ? this.user.toJS() : undefined;
        data["MaitenanceRequestType"] = this.maitenanceRequestType ? this.maitenanceRequestType.toJS() : undefined;
        if (this.checkins && this.checkins.constructor === Array) {
            data["Checkins"] = [];
            for (let item of this.checkins)
                data["Checkins"].push(item.toJS());
        }
        data["ScheduleDate"] = this.scheduleDate ? this.scheduleDate.toISOString() : undefined;
        data["Message"] = this.message !== undefined ? this.message : undefined;
        data["LatestCheckin"] = this.latestCheckin ? this.latestCheckin.toJS() : undefined;
        data["StatusId"] = this.statusId !== undefined ? this.statusId : undefined;
        data["Status"] = this.status ? this.status.toJS() : undefined;
        data["SubmissionDate"] = this.submissionDate ? this.submissionDate.toISOString() : undefined;
        data["CompletionDate"] = this.completionDate ? this.completionDate.toISOString() : undefined;
        data["TimeToComplete"] = this.timeToComplete !== undefined ? this.timeToComplete : undefined;
        data["SubmittedVia"] = this.submittedVia !== undefined ? this.submittedVia : undefined;
        data["PropertyId"] = this.propertyId !== undefined ? this.propertyId : undefined;
        data["Id"] = this.id !== undefined ? this.id : undefined;
        data["CreateDate"] = this.createDate ? this.createDate.toISOString() : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new MaitenanceRequest(JSON.parse(json));
    }
}

export class ApplicationUser {
    id: string | null | undefined;
    createDate: Date | null | undefined;
    imageUrl: string | null | undefined;
    imageThumbnailUrl: string | null | undefined;
    firstName: string | null | undefined;
    lastName: string | null | undefined;
    propertyId: number | null | undefined;
    archived: boolean | null | undefined;
    property: Property | null | undefined;
    unitId: number | null | undefined;
    unit: Unit | null | undefined;
    thirdPartyId: string | null | undefined;
    middleName: string | null | undefined;
    address: string | null | undefined;
    city: string | null | undefined;
    state: string | null | undefined;
    postalCode: string | null | undefined;
    gender: string | null | undefined;
    readonly timeZone: any | null | undefined;
    maitenanceRequests: MaitenanceRequest[] | null | undefined;
    userAlerts: UserAlert[] | null | undefined;
    devicePlatform: string | null | undefined;
    deviceToken: string | null | undefined;
    lastMobileLoginTime: Date | null | undefined;
    lastPortalLoginTime: Date | null | undefined;
    readonly activeOnMobile: boolean | null | undefined;
    forteClientId: number | null | undefined;
    syncId: string | null | undefined;
    engagementLetterSentOn: Date | null | undefined;
    email: string | null | undefined;
    emailConfirmed: boolean | null | undefined;
    passwordHash: string | null | undefined;
    securityStamp: string | null | undefined;
    phoneNumber: string | null | undefined;
    phoneNumberConfirmed: boolean | null | undefined;
    twoFactorEnabled: boolean | null | undefined;
    lockoutEndDateUtc: Date | null | undefined;
    lockoutEnabled: boolean | null | undefined;
    accessFailedCount: number | null | undefined;
    readonly roles: IdentityUserRole[] | null | undefined;
    readonly claims: IdentityUserClaim[] | null | undefined;
    readonly logins: IdentityUserLogin[] | null | undefined;
    userName: string | null | undefined;

    constructor(data?: any) {
        if (data !== undefined) {
            this.id = data["Id"] !== undefined ? data["Id"] : undefined;
            this.createDate = data["CreateDate"] ? new Date(data["CreateDate"].toString()) : undefined;
            this.imageUrl = data["ImageUrl"] !== undefined ? data["ImageUrl"] : undefined;
            this.imageThumbnailUrl = data["ImageThumbnailUrl"] !== undefined ? data["ImageThumbnailUrl"] : undefined;
            this.firstName = data["FirstName"] !== undefined ? data["FirstName"] : undefined;
            this.lastName = data["LastName"] !== undefined ? data["LastName"] : undefined;
            this.propertyId = data["PropertyId"] !== undefined ? data["PropertyId"] : undefined;
            this.archived = data["Archived"] !== undefined ? data["Archived"] : undefined;
            this.property = data["Property"] ? Property.fromJS(data["Property"]) : undefined;
            this.unitId = data["UnitId"] !== undefined ? data["UnitId"] : undefined;
            this.unit = data["Unit"] ? Unit.fromJS(data["Unit"]) : undefined;
            this.thirdPartyId = data["ThirdPartyId"] !== undefined ? data["ThirdPartyId"] : undefined;
            this.middleName = data["MiddleName"] !== undefined ? data["MiddleName"] : undefined;
            this.address = data["Address"] !== undefined ? data["Address"] : undefined;
            this.city = data["City"] !== undefined ? data["City"] : undefined;
            this.state = data["State"] !== undefined ? data["State"] : undefined;
            this.postalCode = data["PostalCode"] !== undefined ? data["PostalCode"] : undefined;
            this.gender = data["Gender"] !== undefined ? data["Gender"] : undefined;
            if (data["TimeZone"]) {
                this.timeZone = {};
                for (let key in data["TimeZone"]) {
                    if (data["TimeZone"].hasOwnProperty(key))
                        this.timeZone[key] = data["TimeZone"][key] !== undefined ? data["TimeZone"][key] : undefined;
                }
            }
            if (data["MaitenanceRequests"] && data["MaitenanceRequests"].constructor === Array) {
                this.maitenanceRequests = [];
                for (let item of data["MaitenanceRequests"])
                    this.maitenanceRequests.push(MaitenanceRequest.fromJS(item));
            }
            if (data["UserAlerts"] && data["UserAlerts"].constructor === Array) {
                this.userAlerts = [];
                for (let item of data["UserAlerts"])
                    this.userAlerts.push(UserAlert.fromJS(item));
            }
            this.devicePlatform = data["DevicePlatform"] !== undefined ? data["DevicePlatform"] : undefined;
            this.deviceToken = data["DeviceToken"] !== undefined ? data["DeviceToken"] : undefined;
            this.lastMobileLoginTime = data["LastMobileLoginTime"] ? new Date(data["LastMobileLoginTime"].toString()) : undefined;
            this.lastPortalLoginTime = data["LastPortalLoginTime"] ? new Date(data["LastPortalLoginTime"].toString()) : undefined;
            this.activeOnMobile = data["ActiveOnMobile"] !== undefined ? data["ActiveOnMobile"] : undefined;
            this.forteClientId = data["ForteClientId"] !== undefined ? data["ForteClientId"] : undefined;
            this.syncId = data["SyncId"] !== undefined ? data["SyncId"] : undefined;
            this.engagementLetterSentOn = data["EngagementLetterSentOn"] ? new Date(data["EngagementLetterSentOn"].toString()) : undefined;
            this.email = data["Email"] !== undefined ? data["Email"] : undefined;
            this.emailConfirmed = data["EmailConfirmed"] !== undefined ? data["EmailConfirmed"] : undefined;
            this.passwordHash = data["PasswordHash"] !== undefined ? data["PasswordHash"] : undefined;
            this.securityStamp = data["SecurityStamp"] !== undefined ? data["SecurityStamp"] : undefined;
            this.phoneNumber = data["PhoneNumber"] !== undefined ? data["PhoneNumber"] : undefined;
            this.phoneNumberConfirmed = data["PhoneNumberConfirmed"] !== undefined ? data["PhoneNumberConfirmed"] : undefined;
            this.twoFactorEnabled = data["TwoFactorEnabled"] !== undefined ? data["TwoFactorEnabled"] : undefined;
            this.lockoutEndDateUtc = data["LockoutEndDateUtc"] ? new Date(data["LockoutEndDateUtc"].toString()) : undefined;
            this.lockoutEnabled = data["LockoutEnabled"] !== undefined ? data["LockoutEnabled"] : undefined;
            this.accessFailedCount = data["AccessFailedCount"] !== undefined ? data["AccessFailedCount"] : undefined;
            if (data["Roles"] && data["Roles"].constructor === Array) {
                this.roles = [];
                for (let item of data["Roles"])
                    this.roles.push(IdentityUserRole.fromJS(item));
            }
            if (data["Claims"] && data["Claims"].constructor === Array) {
                this.claims = [];
                for (let item of data["Claims"])
                    this.claims.push(IdentityUserClaim.fromJS(item));
            }
            if (data["Logins"] && data["Logins"].constructor === Array) {
                this.logins = [];
                for (let item of data["Logins"])
                    this.logins.push(IdentityUserLogin.fromJS(item));
            }
            this.userName = data["UserName"] !== undefined ? data["UserName"] : undefined;
        }
    }

    static fromJS(data: any): ApplicationUser {
        return new ApplicationUser(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["Id"] = this.id !== undefined ? this.id : undefined;
        data["CreateDate"] = this.createDate ? this.createDate.toISOString() : undefined;
        data["ImageUrl"] = this.imageUrl !== undefined ? this.imageUrl : undefined;
        data["ImageThumbnailUrl"] = this.imageThumbnailUrl !== undefined ? this.imageThumbnailUrl : undefined;
        data["FirstName"] = this.firstName !== undefined ? this.firstName : undefined;
        data["LastName"] = this.lastName !== undefined ? this.lastName : undefined;
        data["PropertyId"] = this.propertyId !== undefined ? this.propertyId : undefined;
        data["Archived"] = this.archived !== undefined ? this.archived : undefined;
        data["Property"] = this.property ? this.property.toJS() : undefined;
        data["UnitId"] = this.unitId !== undefined ? this.unitId : undefined;
        data["Unit"] = this.unit ? this.unit.toJS() : undefined;
        data["ThirdPartyId"] = this.thirdPartyId !== undefined ? this.thirdPartyId : undefined;
        data["MiddleName"] = this.middleName !== undefined ? this.middleName : undefined;
        data["Address"] = this.address !== undefined ? this.address : undefined;
        data["City"] = this.city !== undefined ? this.city : undefined;
        data["State"] = this.state !== undefined ? this.state : undefined;
        data["PostalCode"] = this.postalCode !== undefined ? this.postalCode : undefined;
        data["Gender"] = this.gender !== undefined ? this.gender : undefined;
        if (this.timeZone) {
            data["TimeZone"] = {};
            for (let key in this.timeZone) {
                if (this.timeZone.hasOwnProperty(key))
                    data["TimeZone"][key] = this.timeZone[key] !== undefined ? this.timeZone[key] : undefined;
            }
        }
        if (this.maitenanceRequests && this.maitenanceRequests.constructor === Array) {
            data["MaitenanceRequests"] = [];
            for (let item of this.maitenanceRequests)
                data["MaitenanceRequests"].push(item.toJS());
        }
        if (this.userAlerts && this.userAlerts.constructor === Array) {
            data["UserAlerts"] = [];
            for (let item of this.userAlerts)
                data["UserAlerts"].push(item.toJS());
        }
        data["DevicePlatform"] = this.devicePlatform !== undefined ? this.devicePlatform : undefined;
        data["DeviceToken"] = this.deviceToken !== undefined ? this.deviceToken : undefined;
        data["LastMobileLoginTime"] = this.lastMobileLoginTime ? this.lastMobileLoginTime.toISOString() : undefined;
        data["LastPortalLoginTime"] = this.lastPortalLoginTime ? this.lastPortalLoginTime.toISOString() : undefined;
        data["ActiveOnMobile"] = this.activeOnMobile !== undefined ? this.activeOnMobile : undefined;
        data["ForteClientId"] = this.forteClientId !== undefined ? this.forteClientId : undefined;
        data["SyncId"] = this.syncId !== undefined ? this.syncId : undefined;
        data["EngagementLetterSentOn"] = this.engagementLetterSentOn ? this.engagementLetterSentOn.toISOString() : undefined;
        data["Email"] = this.email !== undefined ? this.email : undefined;
        data["EmailConfirmed"] = this.emailConfirmed !== undefined ? this.emailConfirmed : undefined;
        data["PasswordHash"] = this.passwordHash !== undefined ? this.passwordHash : undefined;
        data["SecurityStamp"] = this.securityStamp !== undefined ? this.securityStamp : undefined;
        data["PhoneNumber"] = this.phoneNumber !== undefined ? this.phoneNumber : undefined;
        data["PhoneNumberConfirmed"] = this.phoneNumberConfirmed !== undefined ? this.phoneNumberConfirmed : undefined;
        data["TwoFactorEnabled"] = this.twoFactorEnabled !== undefined ? this.twoFactorEnabled : undefined;
        data["LockoutEndDateUtc"] = this.lockoutEndDateUtc ? this.lockoutEndDateUtc.toISOString() : undefined;
        data["LockoutEnabled"] = this.lockoutEnabled !== undefined ? this.lockoutEnabled : undefined;
        data["AccessFailedCount"] = this.accessFailedCount !== undefined ? this.accessFailedCount : undefined;
        if (this.roles && this.roles.constructor === Array) {
            data["Roles"] = [];
            for (let item of this.roles)
                data["Roles"].push(item.toJS());
        }
        if (this.claims && this.claims.constructor === Array) {
            data["Claims"] = [];
            for (let item of this.claims)
                data["Claims"].push(item.toJS());
        }
        if (this.logins && this.logins.constructor === Array) {
            data["Logins"] = [];
            for (let item of this.logins)
                data["Logins"].push(item.toJS());
        }
        data["UserName"] = this.userName !== undefined ? this.userName : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ApplicationUser(JSON.parse(json));
    }
}

export class Unit {
    buildingId: number | null | undefined;
    building: Building | null | undefined;
    maitenanceRequests: MaitenanceRequest[] | null | undefined;
    users: ApplicationUser[] | null | undefined;
    name: string | null | undefined;
    latitude: number | null | undefined;
    longitude: number | null | undefined;
    calculatedTitle: string | null | undefined;
    propertyId: number | null | undefined;
    id: number | null | undefined;
    createDate: Date | null | undefined;

    constructor(data?: any) {
        if (data !== undefined) {
            this.buildingId = data["BuildingId"] !== undefined ? data["BuildingId"] : undefined;
            this.building = data["Building"] ? Building.fromJS(data["Building"]) : undefined;
            if (data["MaitenanceRequests"] && data["MaitenanceRequests"].constructor === Array) {
                this.maitenanceRequests = [];
                for (let item of data["MaitenanceRequests"])
                    this.maitenanceRequests.push(MaitenanceRequest.fromJS(item));
            }
            if (data["Users"] && data["Users"].constructor === Array) {
                this.users = [];
                for (let item of data["Users"])
                    this.users.push(ApplicationUser.fromJS(item));
            }
            this.name = data["Name"] !== undefined ? data["Name"] : undefined;
            this.latitude = data["Latitude"] !== undefined ? data["Latitude"] : undefined;
            this.longitude = data["Longitude"] !== undefined ? data["Longitude"] : undefined;
            this.calculatedTitle = data["CalculatedTitle"] !== undefined ? data["CalculatedTitle"] : undefined;
            this.propertyId = data["PropertyId"] !== undefined ? data["PropertyId"] : undefined;
            this.id = data["Id"] !== undefined ? data["Id"] : undefined;
            this.createDate = data["CreateDate"] ? new Date(data["CreateDate"].toString()) : undefined;
        }
    }

    static fromJS(data: any): Unit {
        return new Unit(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["BuildingId"] = this.buildingId !== undefined ? this.buildingId : undefined;
        data["Building"] = this.building ? this.building.toJS() : undefined;
        if (this.maitenanceRequests && this.maitenanceRequests.constructor === Array) {
            data["MaitenanceRequests"] = [];
            for (let item of this.maitenanceRequests)
                data["MaitenanceRequests"].push(item.toJS());
        }
        if (this.users && this.users.constructor === Array) {
            data["Users"] = [];
            for (let item of this.users)
                data["Users"].push(item.toJS());
        }
        data["Name"] = this.name !== undefined ? this.name : undefined;
        data["Latitude"] = this.latitude !== undefined ? this.latitude : undefined;
        data["Longitude"] = this.longitude !== undefined ? this.longitude : undefined;
        data["CalculatedTitle"] = this.calculatedTitle !== undefined ? this.calculatedTitle : undefined;
        data["PropertyId"] = this.propertyId !== undefined ? this.propertyId : undefined;
        data["Id"] = this.id !== undefined ? this.id : undefined;
        data["CreateDate"] = this.createDate ? this.createDate.toISOString() : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new Unit(JSON.parse(json));
    }
}

export class MaitenanceRequestType {
    id: number | null | undefined;
    name: string | null | undefined;

    constructor(data?: any) {
        if (data !== undefined) {
            this.id = data["Id"] !== undefined ? data["Id"] : undefined;
            this.name = data["Name"] !== undefined ? data["Name"] : undefined;
        }
    }

    static fromJS(data: any): MaitenanceRequestType {
        return new MaitenanceRequestType(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["Id"] = this.id !== undefined ? this.id : undefined;
        data["Name"] = this.name !== undefined ? this.name : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new MaitenanceRequestType(JSON.parse(json));
    }
}

export class MaintenanceRequestCheckin {
    workerId: string | null | undefined;
    worker: ApplicationUser | null | undefined;
    statusId: string | null | undefined;
    status: MaintenanceRequestStatus | null | undefined;
    maitenanceRequestId: number | null | undefined;
    maitenanceRequest: MaitenanceRequest | null | undefined;
    comments: string | null | undefined;
    date: Date | null | undefined;
    groupId: string | null | undefined;
    readonly description: string | null | undefined;
    readonly relatedId: any | null | undefined;
    readonly type: MaintenanceRequestCheckinType | null | undefined;
    propertyId: number | null | undefined;
    id: number | null | undefined;
    createDate: Date | null | undefined;

    constructor(data?: any) {
        if (data !== undefined) {
            this.workerId = data["WorkerId"] !== undefined ? data["WorkerId"] : undefined;
            this.worker = data["Worker"] ? ApplicationUser.fromJS(data["Worker"]) : undefined;
            this.statusId = data["StatusId"] !== undefined ? data["StatusId"] : undefined;
            this.status = data["Status"] ? MaintenanceRequestStatus.fromJS(data["Status"]) : undefined;
            this.maitenanceRequestId = data["MaitenanceRequestId"] !== undefined ? data["MaitenanceRequestId"] : undefined;
            this.maitenanceRequest = data["MaitenanceRequest"] ? MaitenanceRequest.fromJS(data["MaitenanceRequest"]) : undefined;
            this.comments = data["Comments"] !== undefined ? data["Comments"] : undefined;
            this.date = data["Date"] ? new Date(data["Date"].toString()) : undefined;
            this.groupId = data["GroupId"] !== undefined ? data["GroupId"] : undefined;
            this.description = data["Description"] !== undefined ? data["Description"] : undefined;
            if (data["RelatedId"]) {
                this.relatedId = {};
                for (let key in data["RelatedId"]) {
                    if (data["RelatedId"].hasOwnProperty(key))
                        this.relatedId[key] = data["RelatedId"][key] !== undefined ? data["RelatedId"][key] : undefined;
                }
            }
            this.type = data["Type"] !== undefined ? data["Type"] : undefined;
            this.propertyId = data["PropertyId"] !== undefined ? data["PropertyId"] : undefined;
            this.id = data["Id"] !== undefined ? data["Id"] : undefined;
            this.createDate = data["CreateDate"] ? new Date(data["CreateDate"].toString()) : undefined;
        }
    }

    static fromJS(data: any): MaintenanceRequestCheckin {
        return new MaintenanceRequestCheckin(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["WorkerId"] = this.workerId !== undefined ? this.workerId : undefined;
        data["Worker"] = this.worker ? this.worker.toJS() : undefined;
        data["StatusId"] = this.statusId !== undefined ? this.statusId : undefined;
        data["Status"] = this.status ? this.status.toJS() : undefined;
        data["MaitenanceRequestId"] = this.maitenanceRequestId !== undefined ? this.maitenanceRequestId : undefined;
        data["MaitenanceRequest"] = this.maitenanceRequest ? this.maitenanceRequest.toJS() : undefined;
        data["Comments"] = this.comments !== undefined ? this.comments : undefined;
        data["Date"] = this.date ? this.date.toISOString() : undefined;
        data["GroupId"] = this.groupId !== undefined ? this.groupId : undefined;
        data["Description"] = this.description !== undefined ? this.description : undefined;
        if (this.relatedId) {
            data["RelatedId"] = {};
            for (let key in this.relatedId) {
                if (this.relatedId.hasOwnProperty(key))
                    data["RelatedId"][key] = this.relatedId[key] !== undefined ? this.relatedId[key] : undefined;
            }
        }
        data["Type"] = this.type !== undefined ? this.type : undefined;
        data["PropertyId"] = this.propertyId !== undefined ? this.propertyId : undefined;
        data["Id"] = this.id !== undefined ? this.id : undefined;
        data["CreateDate"] = this.createDate ? this.createDate.toISOString() : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new MaintenanceRequestCheckin(JSON.parse(json));
    }
}

export class MaintenanceRequestStatus {
    name: string | null | undefined;

    constructor(data?: any) {
        if (data !== undefined) {
            this.name = data["Name"] !== undefined ? data["Name"] : undefined;
        }
    }

    static fromJS(data: any): MaintenanceRequestStatus {
        return new MaintenanceRequestStatus(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["Name"] = this.name !== undefined ? this.name : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new MaintenanceRequestStatus(JSON.parse(json));
    }
}

export class Property {
    readonly timeZone: any | null | undefined;
    id: number | null | undefined;
    createDate: Date | null | undefined;
    name: string | null | undefined;
    corporationId: number | null | undefined;
    corporation: Corporation | null | undefined;
    propertyAddons: PropertyAddon[] | null | undefined;
    buildings: Building[] | null | undefined;
    readonly maitenanceRequests: MaitenanceRequest[] | null | undefined;
    timeZoneIdentifier: string | null | undefined;
    users: ApplicationUser[] | null | undefined;
    state: PropertyState | null | undefined;

    constructor(data?: any) {
        if (data !== undefined) {
            if (data["TimeZone"]) {
                this.timeZone = {};
                for (let key in data["TimeZone"]) {
                    if (data["TimeZone"].hasOwnProperty(key))
                        this.timeZone[key] = data["TimeZone"][key] !== undefined ? data["TimeZone"][key] : undefined;
                }
            }
            this.id = data["Id"] !== undefined ? data["Id"] : undefined;
            this.createDate = data["CreateDate"] ? new Date(data["CreateDate"].toString()) : undefined;
            this.name = data["Name"] !== undefined ? data["Name"] : undefined;
            this.corporationId = data["CorporationId"] !== undefined ? data["CorporationId"] : undefined;
            this.corporation = data["Corporation"] ? Corporation.fromJS(data["Corporation"]) : undefined;
            if (data["PropertyAddons"] && data["PropertyAddons"].constructor === Array) {
                this.propertyAddons = [];
                for (let item of data["PropertyAddons"])
                    this.propertyAddons.push(PropertyAddon.fromJS(item));
            }
            if (data["Buildings"] && data["Buildings"].constructor === Array) {
                this.buildings = [];
                for (let item of data["Buildings"])
                    this.buildings.push(Building.fromJS(item));
            }
            if (data["MaitenanceRequests"] && data["MaitenanceRequests"].constructor === Array) {
                this.maitenanceRequests = [];
                for (let item of data["MaitenanceRequests"])
                    this.maitenanceRequests.push(MaitenanceRequest.fromJS(item));
            }
            this.timeZoneIdentifier = data["TimeZoneIdentifier"] !== undefined ? data["TimeZoneIdentifier"] : undefined;
            if (data["Users"] && data["Users"].constructor === Array) {
                this.users = [];
                for (let item of data["Users"])
                    this.users.push(ApplicationUser.fromJS(item));
            }
            this.state = data["State"] !== undefined ? data["State"] : undefined;
        }
    }

    static fromJS(data: any): Property {
        return new Property(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        if (this.timeZone) {
            data["TimeZone"] = {};
            for (let key in this.timeZone) {
                if (this.timeZone.hasOwnProperty(key))
                    data["TimeZone"][key] = this.timeZone[key] !== undefined ? this.timeZone[key] : undefined;
            }
        }
        data["Id"] = this.id !== undefined ? this.id : undefined;
        data["CreateDate"] = this.createDate ? this.createDate.toISOString() : undefined;
        data["Name"] = this.name !== undefined ? this.name : undefined;
        data["CorporationId"] = this.corporationId !== undefined ? this.corporationId : undefined;
        data["Corporation"] = this.corporation ? this.corporation.toJS() : undefined;
        if (this.propertyAddons && this.propertyAddons.constructor === Array) {
            data["PropertyAddons"] = [];
            for (let item of this.propertyAddons)
                data["PropertyAddons"].push(item.toJS());
        }
        if (this.buildings && this.buildings.constructor === Array) {
            data["Buildings"] = [];
            for (let item of this.buildings)
                data["Buildings"].push(item.toJS());
        }
        if (this.maitenanceRequests && this.maitenanceRequests.constructor === Array) {
            data["MaitenanceRequests"] = [];
            for (let item of this.maitenanceRequests)
                data["MaitenanceRequests"].push(item.toJS());
        }
        data["TimeZoneIdentifier"] = this.timeZoneIdentifier !== undefined ? this.timeZoneIdentifier : undefined;
        if (this.users && this.users.constructor === Array) {
            data["Users"] = [];
            for (let item of this.users)
                data["Users"].push(item.toJS());
        }
        data["State"] = this.state !== undefined ? this.state : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new Property(JSON.parse(json));
    }
}

export class UserAlert {
    userId: string | null | undefined;
    createdOn: Date | null | undefined;
    user: ApplicationUser | null | undefined;
    title: string | null | undefined;
    message: string | null | undefined;
    type: string | null | undefined;
    relatedId: number | null | undefined;
    hasRead: boolean | null | undefined;
    propertyId: number | null | undefined;
    id: number | null | undefined;
    createDate: Date | null | undefined;

    constructor(data?: any) {
        if (data !== undefined) {
            this.userId = data["UserId"] !== undefined ? data["UserId"] : undefined;
            this.createdOn = data["CreatedOn"] ? new Date(data["CreatedOn"].toString()) : undefined;
            this.user = data["User"] ? ApplicationUser.fromJS(data["User"]) : undefined;
            this.title = data["Title"] !== undefined ? data["Title"] : undefined;
            this.message = data["Message"] !== undefined ? data["Message"] : undefined;
            this.type = data["Type"] !== undefined ? data["Type"] : undefined;
            this.relatedId = data["RelatedId"] !== undefined ? data["RelatedId"] : undefined;
            this.hasRead = data["HasRead"] !== undefined ? data["HasRead"] : undefined;
            this.propertyId = data["PropertyId"] !== undefined ? data["PropertyId"] : undefined;
            this.id = data["Id"] !== undefined ? data["Id"] : undefined;
            this.createDate = data["CreateDate"] ? new Date(data["CreateDate"].toString()) : undefined;
        }
    }

    static fromJS(data: any): UserAlert {
        return new UserAlert(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["UserId"] = this.userId !== undefined ? this.userId : undefined;
        data["CreatedOn"] = this.createdOn ? this.createdOn.toISOString() : undefined;
        data["User"] = this.user ? this.user.toJS() : undefined;
        data["Title"] = this.title !== undefined ? this.title : undefined;
        data["Message"] = this.message !== undefined ? this.message : undefined;
        data["Type"] = this.type !== undefined ? this.type : undefined;
        data["RelatedId"] = this.relatedId !== undefined ? this.relatedId : undefined;
        data["HasRead"] = this.hasRead !== undefined ? this.hasRead : undefined;
        data["PropertyId"] = this.propertyId !== undefined ? this.propertyId : undefined;
        data["Id"] = this.id !== undefined ? this.id : undefined;
        data["CreateDate"] = this.createDate ? this.createDate.toISOString() : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new UserAlert(JSON.parse(json));
    }
}

export class IdentityUserRole {
    userId: string | null | undefined;
    roleId: string | null | undefined;

    constructor(data?: any) {
        if (data !== undefined) {
            this.userId = data["UserId"] !== undefined ? data["UserId"] : undefined;
            this.roleId = data["RoleId"] !== undefined ? data["RoleId"] : undefined;
        }
    }

    static fromJS(data: any): IdentityUserRole {
        return new IdentityUserRole(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["UserId"] = this.userId !== undefined ? this.userId : undefined;
        data["RoleId"] = this.roleId !== undefined ? this.roleId : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new IdentityUserRole(JSON.parse(json));
    }
}

export class IdentityUserClaim {
    id: number | null | undefined;
    userId: string | null | undefined;
    claimType: string | null | undefined;
    claimValue: string | null | undefined;

    constructor(data?: any) {
        if (data !== undefined) {
            this.id = data["Id"] !== undefined ? data["Id"] : undefined;
            this.userId = data["UserId"] !== undefined ? data["UserId"] : undefined;
            this.claimType = data["ClaimType"] !== undefined ? data["ClaimType"] : undefined;
            this.claimValue = data["ClaimValue"] !== undefined ? data["ClaimValue"] : undefined;
        }
    }

    static fromJS(data: any): IdentityUserClaim {
        return new IdentityUserClaim(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["Id"] = this.id !== undefined ? this.id : undefined;
        data["UserId"] = this.userId !== undefined ? this.userId : undefined;
        data["ClaimType"] = this.claimType !== undefined ? this.claimType : undefined;
        data["ClaimValue"] = this.claimValue !== undefined ? this.claimValue : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new IdentityUserClaim(JSON.parse(json));
    }
}

export class IdentityUserLogin {
    loginProvider: string | null | undefined;
    providerKey: string | null | undefined;
    userId: string | null | undefined;

    constructor(data?: any) {
        if (data !== undefined) {
            this.loginProvider = data["LoginProvider"] !== undefined ? data["LoginProvider"] : undefined;
            this.providerKey = data["ProviderKey"] !== undefined ? data["ProviderKey"] : undefined;
            this.userId = data["UserId"] !== undefined ? data["UserId"] : undefined;
        }
    }

    static fromJS(data: any): IdentityUserLogin {
        return new IdentityUserLogin(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["LoginProvider"] = this.loginProvider !== undefined ? this.loginProvider : undefined;
        data["ProviderKey"] = this.providerKey !== undefined ? this.providerKey : undefined;
        data["UserId"] = this.userId !== undefined ? this.userId : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new IdentityUserLogin(JSON.parse(json));
    }
}

export class Building {
    name: string | null | undefined;
    units: Unit[] | null | undefined;
    rentAmount: number | null | undefined;
    propertyId: number | null | undefined;
    id: number | null | undefined;
    createDate: Date | null | undefined;

    constructor(data?: any) {
        if (data !== undefined) {
            this.name = data["Name"] !== undefined ? data["Name"] : undefined;
            if (data["Units"] && data["Units"].constructor === Array) {
                this.units = [];
                for (let item of data["Units"])
                    this.units.push(Unit.fromJS(item));
            }
            this.rentAmount = data["RentAmount"] !== undefined ? data["RentAmount"] : undefined;
            this.propertyId = data["PropertyId"] !== undefined ? data["PropertyId"] : undefined;
            this.id = data["Id"] !== undefined ? data["Id"] : undefined;
            this.createDate = data["CreateDate"] ? new Date(data["CreateDate"].toString()) : undefined;
        }
    }

    static fromJS(data: any): Building {
        return new Building(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["Name"] = this.name !== undefined ? this.name : undefined;
        if (this.units && this.units.constructor === Array) {
            data["Units"] = [];
            for (let item of this.units)
                data["Units"].push(item.toJS());
        }
        data["RentAmount"] = this.rentAmount !== undefined ? this.rentAmount : undefined;
        data["PropertyId"] = this.propertyId !== undefined ? this.propertyId : undefined;
        data["Id"] = this.id !== undefined ? this.id : undefined;
        data["CreateDate"] = this.createDate ? this.createDate.toISOString() : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new Building(JSON.parse(json));
    }
}

export class Corporation {
    id: number | null | undefined;
    createDate: Date | null | undefined;
    name: string | undefined;
    properties: Property[] | null | undefined;

    constructor(data?: any) {
        if (data !== undefined) {
            this.id = data["Id"] !== undefined ? data["Id"] : undefined;
            this.createDate = data["CreateDate"] ? new Date(data["CreateDate"].toString()) : undefined;
            this.name = data["Name"] !== undefined ? data["Name"] : undefined;
            if (data["Properties"] && data["Properties"].constructor === Array) {
                this.properties = [];
                for (let item of data["Properties"])
                    this.properties.push(Property.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Corporation {
        return new Corporation(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["Id"] = this.id !== undefined ? this.id : undefined;
        data["CreateDate"] = this.createDate ? this.createDate.toISOString() : undefined;
        data["Name"] = this.name !== undefined ? this.name : undefined;
        if (this.properties && this.properties.constructor === Array) {
            data["Properties"] = [];
            for (let item of this.properties)
                data["Properties"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new Corporation(JSON.parse(json));
    }
}

export class PropertyAddon {
    id: number | null | undefined;
    propertyId: number | null | undefined;
    property: Property | null | undefined;
    propertyIntegrationTypeId: number | null | undefined;
    addonType: PropertyAddonType | null | undefined;

    constructor(data?: any) {
        if (data !== undefined) {
            this.id = data["Id"] !== undefined ? data["Id"] : undefined;
            this.propertyId = data["PropertyId"] !== undefined ? data["PropertyId"] : undefined;
            this.property = data["Property"] ? Property.fromJS(data["Property"]) : undefined;
            this.propertyIntegrationTypeId = data["PropertyIntegrationTypeId"] !== undefined ? data["PropertyIntegrationTypeId"] : undefined;
            this.addonType = data["AddonType"] ? PropertyAddonType.fromJS(data["AddonType"]) : undefined;
        }
    }

    static fromJS(data: any): PropertyAddon {
        return new PropertyAddon(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["Id"] = this.id !== undefined ? this.id : undefined;
        data["PropertyId"] = this.propertyId !== undefined ? this.propertyId : undefined;
        data["Property"] = this.property ? this.property.toJS() : undefined;
        data["PropertyIntegrationTypeId"] = this.propertyIntegrationTypeId !== undefined ? this.propertyIntegrationTypeId : undefined;
        data["AddonType"] = this.addonType ? this.addonType.toJS() : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new PropertyAddon(JSON.parse(json));
    }
}

export class PropertyAddonType {
    id: number | null | undefined;
    name: string | null | undefined;

    constructor(data?: any) {
        if (data !== undefined) {
            this.id = data["Id"] !== undefined ? data["Id"] : undefined;
            this.name = data["Name"] !== undefined ? data["Name"] : undefined;
        }
    }

    static fromJS(data: any): PropertyAddonType {
        return new PropertyAddonType(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["Id"] = this.id !== undefined ? this.id : undefined;
        data["Name"] = this.name !== undefined ? this.name : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new PropertyAddonType(JSON.parse(json));
    }
}

export class AddCreditCardBindingModel {
    userId: string | null | undefined;
    friendlyName: string | undefined;
    accountHolderName: string | undefined;
    cardNumber: string | undefined;
    expirationMonth: string | undefined;
    expirationYear: string | undefined;
    cardType: AddCreditCardBindingModelCardType | undefined;
    readonly expirationDate: string | null | undefined;
    users: UserLookupBindingModel[] | null | undefined;

    constructor(data?: any) {
        if (data !== undefined) {
            this.userId = data["UserId"] !== undefined ? data["UserId"] : undefined;
            this.friendlyName = data["FriendlyName"] !== undefined ? data["FriendlyName"] : undefined;
            this.accountHolderName = data["AccountHolderName"] !== undefined ? data["AccountHolderName"] : undefined;
            this.cardNumber = data["CardNumber"] !== undefined ? data["CardNumber"] : undefined;
            this.expirationMonth = data["ExpirationMonth"] !== undefined ? data["ExpirationMonth"] : undefined;
            this.expirationYear = data["ExpirationYear"] !== undefined ? data["ExpirationYear"] : undefined;
            this.cardType = data["CardType"] !== undefined ? data["CardType"] : undefined;
            this.expirationDate = data["ExpirationDate"] !== undefined ? data["ExpirationDate"] : undefined;
            if (data["Users"] && data["Users"].constructor === Array) {
                this.users = [];
                for (let item of data["Users"])
                    this.users.push(UserLookupBindingModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): AddCreditCardBindingModel {
        return new AddCreditCardBindingModel(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["UserId"] = this.userId !== undefined ? this.userId : undefined;
        data["FriendlyName"] = this.friendlyName !== undefined ? this.friendlyName : undefined;
        data["AccountHolderName"] = this.accountHolderName !== undefined ? this.accountHolderName : undefined;
        data["CardNumber"] = this.cardNumber !== undefined ? this.cardNumber : undefined;
        data["ExpirationMonth"] = this.expirationMonth !== undefined ? this.expirationMonth : undefined;
        data["ExpirationYear"] = this.expirationYear !== undefined ? this.expirationYear : undefined;
        data["CardType"] = this.cardType !== undefined ? this.cardType : undefined;
        data["ExpirationDate"] = this.expirationDate !== undefined ? this.expirationDate : undefined;
        if (this.users && this.users.constructor === Array) {
            data["Users"] = [];
            for (let item of this.users)
                data["Users"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new AddCreditCardBindingModel(JSON.parse(json));
    }
}

export class UserLookupBindingModel {
    id: string | null | undefined;
    title: string | null | undefined;
    actionLinks: ActionLinkModel[] | null | undefined;

    constructor(data?: any) {
        if (data !== undefined) {
            this.id = data["Id"] !== undefined ? data["Id"] : undefined;
            this.title = data["Title"] !== undefined ? data["Title"] : undefined;
            if (data["ActionLinks"] && data["ActionLinks"].constructor === Array) {
                this.actionLinks = [];
                for (let item of data["ActionLinks"])
                    this.actionLinks.push(ActionLinkModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UserLookupBindingModel {
        return new UserLookupBindingModel(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["Id"] = this.id !== undefined ? this.id : undefined;
        data["Title"] = this.title !== undefined ? this.title : undefined;
        if (this.actionLinks && this.actionLinks.constructor === Array) {
            data["ActionLinks"] = [];
            for (let item of this.actionLinks)
                data["ActionLinks"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new UserLookupBindingModel(JSON.parse(json));
    }
}

export class AddCreditCardResult {
    errorMessage: string | null | undefined;
    paymentOptionId: number | null | undefined;

    constructor(data?: any) {
        if (data !== undefined) {
            this.errorMessage = data["ErrorMessage"] !== undefined ? data["ErrorMessage"] : undefined;
            this.paymentOptionId = data["PaymentOptionId"] !== undefined ? data["PaymentOptionId"] : undefined;
        }
    }

    static fromJS(data: any): AddCreditCardResult {
        return new AddCreditCardResult(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["ErrorMessage"] = this.errorMessage !== undefined ? this.errorMessage : undefined;
        data["PaymentOptionId"] = this.paymentOptionId !== undefined ? this.paymentOptionId : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new AddCreditCardResult(JSON.parse(json));
    }
}

export class AddBankAccountBindingModel {
    userId: string | null | undefined;
    friendlyName: string | undefined;
    accountHolderName: string | undefined;
    accountNumber: string | undefined;
    routingNumber: string | undefined;
    isSavings: boolean | undefined;
    users: UserLookupBindingModel[] | null | undefined;

    constructor(data?: any) {
        if (data !== undefined) {
            this.userId = data["UserId"] !== undefined ? data["UserId"] : undefined;
            this.friendlyName = data["FriendlyName"] !== undefined ? data["FriendlyName"] : undefined;
            this.accountHolderName = data["AccountHolderName"] !== undefined ? data["AccountHolderName"] : undefined;
            this.accountNumber = data["AccountNumber"] !== undefined ? data["AccountNumber"] : undefined;
            this.routingNumber = data["RoutingNumber"] !== undefined ? data["RoutingNumber"] : undefined;
            this.isSavings = data["IsSavings"] !== undefined ? data["IsSavings"] : undefined;
            if (data["Users"] && data["Users"].constructor === Array) {
                this.users = [];
                for (let item of data["Users"])
                    this.users.push(UserLookupBindingModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): AddBankAccountBindingModel {
        return new AddBankAccountBindingModel(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["UserId"] = this.userId !== undefined ? this.userId : undefined;
        data["FriendlyName"] = this.friendlyName !== undefined ? this.friendlyName : undefined;
        data["AccountHolderName"] = this.accountHolderName !== undefined ? this.accountHolderName : undefined;
        data["AccountNumber"] = this.accountNumber !== undefined ? this.accountNumber : undefined;
        data["RoutingNumber"] = this.routingNumber !== undefined ? this.routingNumber : undefined;
        data["IsSavings"] = this.isSavings !== undefined ? this.isSavings : undefined;
        if (this.users && this.users.constructor === Array) {
            data["Users"] = [];
            for (let item of this.users)
                data["Users"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new AddBankAccountBindingModel(JSON.parse(json));
    }
}

export class AddBankAccountResult {
    errorMessage: string | null | undefined;
    paymentOptionId: number | null | undefined;

    constructor(data?: any) {
        if (data !== undefined) {
            this.errorMessage = data["ErrorMessage"] !== undefined ? data["ErrorMessage"] : undefined;
            this.paymentOptionId = data["PaymentOptionId"] !== undefined ? data["PaymentOptionId"] : undefined;
        }
    }

    static fromJS(data: any): AddBankAccountResult {
        return new AddBankAccountResult(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["ErrorMessage"] = this.errorMessage !== undefined ? this.errorMessage : undefined;
        data["PaymentOptionId"] = this.paymentOptionId !== undefined ? this.paymentOptionId : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new AddBankAccountResult(JSON.parse(json));
    }
}

export class PaymentOptionBindingModel {
    user: UserBindingModel | null | undefined;
    friendlyName: string | null | undefined;
    type: PaymentOptionBindingModelType | null | undefined;
    id: string | null | undefined;
    title: string | null | undefined;
    actionLinks: ActionLinkModel[] | null | undefined;

    constructor(data?: any) {
        if (data !== undefined) {
            this.user = data["User"] ? UserBindingModel.fromJS(data["User"]) : undefined;
            this.friendlyName = data["FriendlyName"] !== undefined ? data["FriendlyName"] : undefined;
            this.type = data["Type"] !== undefined ? data["Type"] : undefined;
            this.id = data["Id"] !== undefined ? data["Id"] : undefined;
            this.title = data["Title"] !== undefined ? data["Title"] : undefined;
            if (data["ActionLinks"] && data["ActionLinks"].constructor === Array) {
                this.actionLinks = [];
                for (let item of data["ActionLinks"])
                    this.actionLinks.push(ActionLinkModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PaymentOptionBindingModel {
        return new PaymentOptionBindingModel(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["User"] = this.user ? this.user.toJS() : undefined;
        data["FriendlyName"] = this.friendlyName !== undefined ? this.friendlyName : undefined;
        data["Type"] = this.type !== undefined ? this.type : undefined;
        data["Id"] = this.id !== undefined ? this.id : undefined;
        data["Title"] = this.title !== undefined ? this.title : undefined;
        if (this.actionLinks && this.actionLinks.constructor === Array) {
            data["ActionLinks"] = [];
            for (let item of this.actionLinks)
                data["ActionLinks"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new PaymentOptionBindingModel(JSON.parse(json));
    }
}

export class PaymentListBindingModel {
    items: PaymentLineBindingModel[] | null | undefined;
    readonly isEmpty: boolean | null | undefined;

    constructor(data?: any) {
        if (data !== undefined) {
            if (data["Items"] && data["Items"].constructor === Array) {
                this.items = [];
                for (let item of data["Items"])
                    this.items.push(PaymentLineBindingModel.fromJS(item));
            }
            this.isEmpty = data["IsEmpty"] !== undefined ? data["IsEmpty"] : undefined;
        }
    }

    static fromJS(data: any): PaymentListBindingModel {
        return new PaymentListBindingModel(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        if (this.items && this.items.constructor === Array) {
            data["Items"] = [];
            for (let item of this.items)
                data["Items"].push(item.toJS());
        }
        data["IsEmpty"] = this.isEmpty !== undefined ? this.isEmpty : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new PaymentListBindingModel(JSON.parse(json));
    }
}

export class PaymentLineBindingModel {
    title: string | null | undefined;
    price: string | null | undefined;
    format: PaymentLineBindingModelFormat | null | undefined;

    constructor(data?: any) {
        if (data !== undefined) {
            this.title = data["Title"] !== undefined ? data["Title"] : undefined;
            this.price = data["Price"] !== undefined ? data["Price"] : undefined;
            this.format = data["Format"] !== undefined ? data["Format"] : undefined;
        }
    }

    static fromJS(data: any): PaymentLineBindingModel {
        return new PaymentLineBindingModel(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["Title"] = this.title !== undefined ? this.title : undefined;
        data["Price"] = this.price !== undefined ? this.price : undefined;
        data["Format"] = this.format !== undefined ? this.format : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new PaymentLineBindingModel(JSON.parse(json));
    }
}

export class MakePaymentBindingModel {
    paymentOptionId: string | null | undefined;
    userId: string | null | undefined;

    constructor(data?: any) {
        if (data !== undefined) {
            this.paymentOptionId = data["PaymentOptionId"] !== undefined ? data["PaymentOptionId"] : undefined;
            this.userId = data["UserId"] !== undefined ? data["UserId"] : undefined;
        }
    }

    static fromJS(data: any): MakePaymentBindingModel {
        return new MakePaymentBindingModel(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["PaymentOptionId"] = this.paymentOptionId !== undefined ? this.paymentOptionId : undefined;
        data["UserId"] = this.userId !== undefined ? this.userId : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new MakePaymentBindingModel(JSON.parse(json));
    }
}

export class MakePaymentResult {
    errorMessage: string | null | undefined;

    constructor(data?: any) {
        if (data !== undefined) {
            this.errorMessage = data["ErrorMessage"] !== undefined ? data["ErrorMessage"] : undefined;
        }
    }

    static fromJS(data: any): MakePaymentResult {
        return new MakePaymentResult(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["ErrorMessage"] = this.errorMessage !== undefined ? this.errorMessage : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new MakePaymentResult(JSON.parse(json));
    }
}

export class QueryResultOfPropertyIndexBindingModel {
    total: number | null | undefined;
    result: PropertyIndexBindingModel[] | null | undefined;

    constructor(data?: any) {
        if (data !== undefined) {
            this.total = data["Total"] !== undefined ? data["Total"] : undefined;
            if (data["Result"] && data["Result"].constructor === Array) {
                this.result = [];
                for (let item of data["Result"])
                    this.result.push(PropertyIndexBindingModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): QueryResultOfPropertyIndexBindingModel {
        return new QueryResultOfPropertyIndexBindingModel(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["Total"] = this.total !== undefined ? this.total : undefined;
        if (this.result && this.result.constructor === Array) {
            data["Result"] = [];
            for (let item of this.result)
                data["Result"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new QueryResultOfPropertyIndexBindingModel(JSON.parse(json));
    }
}

export class PropertyIndexBindingModel {
    propertyCount: number | null | undefined;
    corporation: string | null | undefined;
    corporationId: number | null | undefined;
    status: PropertyIndexBindingModelStatus | null | undefined;
    id: string | null | undefined;
    title: string | null | undefined;
    actionLinks: ActionLinkModel[] | null | undefined;

    constructor(data?: any) {
        if (data !== undefined) {
            this.propertyCount = data["PropertyCount"] !== undefined ? data["PropertyCount"] : undefined;
            this.corporation = data["Corporation"] !== undefined ? data["Corporation"] : undefined;
            this.corporationId = data["CorporationId"] !== undefined ? data["CorporationId"] : undefined;
            this.status = data["Status"] !== undefined ? data["Status"] : undefined;
            this.id = data["Id"] !== undefined ? data["Id"] : undefined;
            this.title = data["Title"] !== undefined ? data["Title"] : undefined;
            if (data["ActionLinks"] && data["ActionLinks"].constructor === Array) {
                this.actionLinks = [];
                for (let item of data["ActionLinks"])
                    this.actionLinks.push(ActionLinkModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PropertyIndexBindingModel {
        return new PropertyIndexBindingModel(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["PropertyCount"] = this.propertyCount !== undefined ? this.propertyCount : undefined;
        data["Corporation"] = this.corporation !== undefined ? this.corporation : undefined;
        data["CorporationId"] = this.corporationId !== undefined ? this.corporationId : undefined;
        data["Status"] = this.status !== undefined ? this.status : undefined;
        data["Id"] = this.id !== undefined ? this.id : undefined;
        data["Title"] = this.title !== undefined ? this.title : undefined;
        if (this.actionLinks && this.actionLinks.constructor === Array) {
            data["ActionLinks"] = [];
            for (let item of this.actionLinks)
                data["ActionLinks"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new PropertyIndexBindingModel(JSON.parse(json));
    }
}

export class ProspectApplicationBindingModel {
    createdOn: Date | null | undefined;
    firstName: string | null | undefined;
    lastName: string | null | undefined;
    addressLine1: string | null | undefined;
    addressLine2: string | null | undefined;
    addressCity: string | null | undefined;
    addressState: string | null | undefined;
    zipCode: number | null | undefined;
    email: string | null | undefined;
    phoneNumber: string | null | undefined;
    desiredMoveInDate: Date | null | undefined;
    submittedBy: UserBindingModel | null | undefined;
    id: string | null | undefined;
    title: string | null | undefined;
    actionLinks: ActionLinkModel[] | null | undefined;

    constructor(data?: any) {
        if (data !== undefined) {
            this.createdOn = data["CreatedOn"] ? new Date(data["CreatedOn"].toString()) : undefined;
            this.firstName = data["FirstName"] !== undefined ? data["FirstName"] : undefined;
            this.lastName = data["LastName"] !== undefined ? data["LastName"] : undefined;
            this.addressLine1 = data["AddressLine1"] !== undefined ? data["AddressLine1"] : undefined;
            this.addressLine2 = data["AddressLine2"] !== undefined ? data["AddressLine2"] : undefined;
            this.addressCity = data["AddressCity"] !== undefined ? data["AddressCity"] : undefined;
            this.addressState = data["AddressState"] !== undefined ? data["AddressState"] : undefined;
            this.zipCode = data["ZipCode"] !== undefined ? data["ZipCode"] : undefined;
            this.email = data["Email"] !== undefined ? data["Email"] : undefined;
            this.phoneNumber = data["PhoneNumber"] !== undefined ? data["PhoneNumber"] : undefined;
            this.desiredMoveInDate = data["DesiredMoveInDate"] ? new Date(data["DesiredMoveInDate"].toString()) : undefined;
            this.submittedBy = data["SubmittedBy"] ? UserBindingModel.fromJS(data["SubmittedBy"]) : undefined;
            this.id = data["Id"] !== undefined ? data["Id"] : undefined;
            this.title = data["Title"] !== undefined ? data["Title"] : undefined;
            if (data["ActionLinks"] && data["ActionLinks"].constructor === Array) {
                this.actionLinks = [];
                for (let item of data["ActionLinks"])
                    this.actionLinks.push(ActionLinkModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ProspectApplicationBindingModel {
        return new ProspectApplicationBindingModel(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["CreatedOn"] = this.createdOn ? this.createdOn.toISOString() : undefined;
        data["FirstName"] = this.firstName !== undefined ? this.firstName : undefined;
        data["LastName"] = this.lastName !== undefined ? this.lastName : undefined;
        data["AddressLine1"] = this.addressLine1 !== undefined ? this.addressLine1 : undefined;
        data["AddressLine2"] = this.addressLine2 !== undefined ? this.addressLine2 : undefined;
        data["AddressCity"] = this.addressCity !== undefined ? this.addressCity : undefined;
        data["AddressState"] = this.addressState !== undefined ? this.addressState : undefined;
        data["ZipCode"] = this.zipCode !== undefined ? this.zipCode : undefined;
        data["Email"] = this.email !== undefined ? this.email : undefined;
        data["PhoneNumber"] = this.phoneNumber !== undefined ? this.phoneNumber : undefined;
        data["DesiredMoveInDate"] = this.desiredMoveInDate ? this.desiredMoveInDate.toISOString() : undefined;
        data["SubmittedBy"] = this.submittedBy ? this.submittedBy.toJS() : undefined;
        data["Id"] = this.id !== undefined ? this.id : undefined;
        data["Title"] = this.title !== undefined ? this.title : undefined;
        if (this.actionLinks && this.actionLinks.constructor === Array) {
            data["ActionLinks"] = [];
            for (let item of this.actionLinks)
                data["ActionLinks"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ProspectApplicationBindingModel(JSON.parse(json));
    }
}

export class ScanIdResult {
    addressLine1: string | null | undefined;
    addressLine2: string | null | undefined;
    birthdate: Date | null | undefined;
    cardRevisionDate: Date | null | undefined;
    city: string | null | undefined;
    readonly country: string | null | undefined;
    countryCode: string | null | undefined;
    endorsementCodeDescription: string | null | undefined;
    endorsementsCode: string | null | undefined;
    expirationDate: Date | null | undefined;
    eyeColor: string | null | undefined;
    classificationCode: string | null | undefined;
    hairColor: string | null | undefined;
    complianceType: string | null | undefined;
    firstName: string | null | undefined;
    lastName: string | null | undefined;
    fullName: string | null | undefined;
    gender: string | null | undefined;
    issueDate: Date | null | undefined;
    issuedBy: string | null | undefined;
    postalCode: string | null | undefined;
    race: string | null | undefined;
    vehicleClassCode: string | null | undefined;
    vehicleClassCodeDescription: string | null | undefined;

    constructor(data?: any) {
        if (data !== undefined) {
            this.addressLine1 = data["AddressLine1"] !== undefined ? data["AddressLine1"] : undefined;
            this.addressLine2 = data["AddressLine2"] !== undefined ? data["AddressLine2"] : undefined;
            this.birthdate = data["Birthdate"] ? new Date(data["Birthdate"].toString()) : undefined;
            this.cardRevisionDate = data["CardRevisionDate"] ? new Date(data["CardRevisionDate"].toString()) : undefined;
            this.city = data["City"] !== undefined ? data["City"] : undefined;
            this.country = data["Country"] !== undefined ? data["Country"] : undefined;
            this.countryCode = data["CountryCode"] !== undefined ? data["CountryCode"] : undefined;
            this.endorsementCodeDescription = data["EndorsementCodeDescription"] !== undefined ? data["EndorsementCodeDescription"] : undefined;
            this.endorsementsCode = data["EndorsementsCode"] !== undefined ? data["EndorsementsCode"] : undefined;
            this.expirationDate = data["ExpirationDate"] ? new Date(data["ExpirationDate"].toString()) : undefined;
            this.eyeColor = data["EyeColor"] !== undefined ? data["EyeColor"] : undefined;
            this.classificationCode = data["ClassificationCode"] !== undefined ? data["ClassificationCode"] : undefined;
            this.hairColor = data["HairColor"] !== undefined ? data["HairColor"] : undefined;
            this.complianceType = data["ComplianceType"] !== undefined ? data["ComplianceType"] : undefined;
            this.firstName = data["FirstName"] !== undefined ? data["FirstName"] : undefined;
            this.lastName = data["LastName"] !== undefined ? data["LastName"] : undefined;
            this.fullName = data["FullName"] !== undefined ? data["FullName"] : undefined;
            this.gender = data["Gender"] !== undefined ? data["Gender"] : undefined;
            this.issueDate = data["IssueDate"] ? new Date(data["IssueDate"].toString()) : undefined;
            this.issuedBy = data["IssuedBy"] !== undefined ? data["IssuedBy"] : undefined;
            this.postalCode = data["PostalCode"] !== undefined ? data["PostalCode"] : undefined;
            this.race = data["Race"] !== undefined ? data["Race"] : undefined;
            this.vehicleClassCode = data["VehicleClassCode"] !== undefined ? data["VehicleClassCode"] : undefined;
            this.vehicleClassCodeDescription = data["VehicleClassCodeDescription"] !== undefined ? data["VehicleClassCodeDescription"] : undefined;
        }
    }

    static fromJS(data: any): ScanIdResult {
        return new ScanIdResult(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["AddressLine1"] = this.addressLine1 !== undefined ? this.addressLine1 : undefined;
        data["AddressLine2"] = this.addressLine2 !== undefined ? this.addressLine2 : undefined;
        data["Birthdate"] = this.birthdate ? this.birthdate.toISOString() : undefined;
        data["CardRevisionDate"] = this.cardRevisionDate ? this.cardRevisionDate.toISOString() : undefined;
        data["City"] = this.city !== undefined ? this.city : undefined;
        data["Country"] = this.country !== undefined ? this.country : undefined;
        data["CountryCode"] = this.countryCode !== undefined ? this.countryCode : undefined;
        data["EndorsementCodeDescription"] = this.endorsementCodeDescription !== undefined ? this.endorsementCodeDescription : undefined;
        data["EndorsementsCode"] = this.endorsementsCode !== undefined ? this.endorsementsCode : undefined;
        data["ExpirationDate"] = this.expirationDate ? this.expirationDate.toISOString() : undefined;
        data["EyeColor"] = this.eyeColor !== undefined ? this.eyeColor : undefined;
        data["ClassificationCode"] = this.classificationCode !== undefined ? this.classificationCode : undefined;
        data["HairColor"] = this.hairColor !== undefined ? this.hairColor : undefined;
        data["ComplianceType"] = this.complianceType !== undefined ? this.complianceType : undefined;
        data["FirstName"] = this.firstName !== undefined ? this.firstName : undefined;
        data["LastName"] = this.lastName !== undefined ? this.lastName : undefined;
        data["FullName"] = this.fullName !== undefined ? this.fullName : undefined;
        data["Gender"] = this.gender !== undefined ? this.gender : undefined;
        data["IssueDate"] = this.issueDate ? this.issueDate.toISOString() : undefined;
        data["IssuedBy"] = this.issuedBy !== undefined ? this.issuedBy : undefined;
        data["PostalCode"] = this.postalCode !== undefined ? this.postalCode : undefined;
        data["Race"] = this.race !== undefined ? this.race : undefined;
        data["VehicleClassCode"] = this.vehicleClassCode !== undefined ? this.vehicleClassCode : undefined;
        data["VehicleClassCodeDescription"] = this.vehicleClassCodeDescription !== undefined ? this.vehicleClassCodeDescription : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ScanIdResult(JSON.parse(json));
    }
}

export class DeviceRegistration {
    platform: string | null | undefined;
    handle: string | null | undefined;
    tags: string[] | null | undefined;

    constructor(data?: any) {
        if (data !== undefined) {
            this.platform = data["Platform"] !== undefined ? data["Platform"] : undefined;
            this.handle = data["Handle"] !== undefined ? data["Handle"] : undefined;
            if (data["Tags"] && data["Tags"].constructor === Array) {
                this.tags = [];
                for (let item of data["Tags"])
                    this.tags.push(item);
            }
        }
    }

    static fromJS(data: any): DeviceRegistration {
        return new DeviceRegistration(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["Platform"] = this.platform !== undefined ? this.platform : undefined;
        data["Handle"] = this.handle !== undefined ? this.handle : undefined;
        if (this.tags && this.tags.constructor === Array) {
            data["Tags"] = [];
            for (let item of this.tags)
                data["Tags"].push(item);
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new DeviceRegistration(JSON.parse(json));
    }
}

export class SearchModelGetResponse {
    model: ClientSearchModel | null | undefined;

    constructor(data?: any) {
        if (data !== undefined) {
            this.model = data["Model"] ? ClientSearchModel.fromJS(data["Model"]) : undefined;
        }
    }

    static fromJS(data: any): SearchModelGetResponse {
        return new SearchModelGetResponse(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["Model"] = this.model ? this.model.toJS() : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new SearchModelGetResponse(JSON.parse(json));
    }
}

export class ClientSearchModel {
    id: string | null | undefined;
    filters: ClientSearchFilterModel[] | null | undefined;

    constructor(data?: any) {
        if (data !== undefined) {
            this.id = data["Id"] !== undefined ? data["Id"] : undefined;
            if (data["Filters"] && data["Filters"].constructor === Array) {
                this.filters = [];
                for (let item of data["Filters"])
                    this.filters.push(ClientSearchFilterModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ClientSearchModel {
        return new ClientSearchModel(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["Id"] = this.id !== undefined ? this.id : undefined;
        if (this.filters && this.filters.constructor === Array) {
            data["Filters"] = [];
            for (let item of this.filters)
                data["Filters"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ClientSearchModel(JSON.parse(json));
    }
}

export class ClientSearchFilterModel {
    id: string | null | undefined;
    title: string | null | undefined;
    description: string | null | undefined;
    dataSource: string | null | undefined;
    editorType: string | null | undefined;
    defaultActive: boolean | null | undefined;
    dataSourceType: string | null | undefined;

    constructor(data?: any) {
        if (data !== undefined) {
            this.id = data["Id"] !== undefined ? data["Id"] : undefined;
            this.title = data["Title"] !== undefined ? data["Title"] : undefined;
            this.description = data["Description"] !== undefined ? data["Description"] : undefined;
            this.dataSource = data["DataSource"] !== undefined ? data["DataSource"] : undefined;
            this.editorType = data["EditorType"] !== undefined ? data["EditorType"] : undefined;
            this.defaultActive = data["DefaultActive"] !== undefined ? data["DefaultActive"] : undefined;
            this.dataSourceType = data["DataSourceType"] !== undefined ? data["DataSourceType"] : undefined;
        }
    }

    static fromJS(data: any): ClientSearchFilterModel {
        return new ClientSearchFilterModel(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["Id"] = this.id !== undefined ? this.id : undefined;
        data["Title"] = this.title !== undefined ? this.title : undefined;
        data["Description"] = this.description !== undefined ? this.description : undefined;
        data["DataSource"] = this.dataSource !== undefined ? this.dataSource : undefined;
        data["EditorType"] = this.editorType !== undefined ? this.editorType : undefined;
        data["DefaultActive"] = this.defaultActive !== undefined ? this.defaultActive : undefined;
        data["DataSourceType"] = this.dataSourceType !== undefined ? this.dataSourceType : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ClientSearchFilterModel(JSON.parse(json));
    }
}

export class QueryResultOfUnitViewModel {
    total: number | null | undefined;
    result: UnitViewModel[] | null | undefined;

    constructor(data?: any) {
        if (data !== undefined) {
            this.total = data["Total"] !== undefined ? data["Total"] : undefined;
            if (data["Result"] && data["Result"].constructor === Array) {
                this.result = [];
                for (let item of data["Result"])
                    this.result.push(UnitViewModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): QueryResultOfUnitViewModel {
        return new QueryResultOfUnitViewModel(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["Total"] = this.total !== undefined ? this.total : undefined;
        if (this.result && this.result.constructor === Array) {
            data["Result"] = [];
            for (let item of this.result)
                data["Result"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new QueryResultOfUnitViewModel(JSON.parse(json));
    }
}

export class UnitViewModel {
    name: string | null | undefined;
    buildingName: string | null | undefined;
    latitude: number | null | undefined;
    longitude: number | null | undefined;
    buildingId: number | null | undefined;
    searchAlias: string | null | undefined;
    title: string | null | undefined;
    id: string | null | undefined;
    actionLinks: ActionLinkModel[] | null | undefined;

    constructor(data?: any) {
        if (data !== undefined) {
            this.name = data["Name"] !== undefined ? data["Name"] : undefined;
            this.buildingName = data["BuildingName"] !== undefined ? data["BuildingName"] : undefined;
            this.latitude = data["Latitude"] !== undefined ? data["Latitude"] : undefined;
            this.longitude = data["Longitude"] !== undefined ? data["Longitude"] : undefined;
            this.buildingId = data["BuildingId"] !== undefined ? data["BuildingId"] : undefined;
            this.searchAlias = data["SearchAlias"] !== undefined ? data["SearchAlias"] : undefined;
            this.title = data["Title"] !== undefined ? data["Title"] : undefined;
            this.id = data["Id"] !== undefined ? data["Id"] : undefined;
            if (data["ActionLinks"] && data["ActionLinks"].constructor === Array) {
                this.actionLinks = [];
                for (let item of data["ActionLinks"])
                    this.actionLinks.push(ActionLinkModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UnitViewModel {
        return new UnitViewModel(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["Name"] = this.name !== undefined ? this.name : undefined;
        data["BuildingName"] = this.buildingName !== undefined ? this.buildingName : undefined;
        data["Latitude"] = this.latitude !== undefined ? this.latitude : undefined;
        data["Longitude"] = this.longitude !== undefined ? this.longitude : undefined;
        data["BuildingId"] = this.buildingId !== undefined ? this.buildingId : undefined;
        data["SearchAlias"] = this.searchAlias !== undefined ? this.searchAlias : undefined;
        data["Title"] = this.title !== undefined ? this.title : undefined;
        data["Id"] = this.id !== undefined ? this.id : undefined;
        if (this.actionLinks && this.actionLinks.constructor === Array) {
            data["ActionLinks"] = [];
            for (let item of this.actionLinks)
                data["ActionLinks"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new UnitViewModel(JSON.parse(json));
    }
}

export class VersionInfo {
    androidStoreUrl: string | null | undefined;
    iPhoneStoreUrl: string | null | undefined;
    version: number | null | undefined;
    iPhoneBuildNumber: number | null | undefined;
    androidBuildNumber: number | null | undefined;

    constructor(data?: any) {
        if (data !== undefined) {
            this.androidStoreUrl = data["AndroidStoreUrl"] !== undefined ? data["AndroidStoreUrl"] : undefined;
            this.iPhoneStoreUrl = data["IPhoneStoreUrl"] !== undefined ? data["IPhoneStoreUrl"] : undefined;
            this.version = data["Version"] !== undefined ? data["Version"] : undefined;
            this.iPhoneBuildNumber = data["IPhoneBuildNumber"] !== undefined ? data["IPhoneBuildNumber"] : undefined;
            this.androidBuildNumber = data["AndroidBuildNumber"] !== undefined ? data["AndroidBuildNumber"] : undefined;
        }
    }

    static fromJS(data: any): VersionInfo {
        return new VersionInfo(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["AndroidStoreUrl"] = this.androidStoreUrl !== undefined ? this.androidStoreUrl : undefined;
        data["IPhoneStoreUrl"] = this.iPhoneStoreUrl !== undefined ? this.iPhoneStoreUrl : undefined;
        data["Version"] = this.version !== undefined ? this.version : undefined;
        data["IPhoneBuildNumber"] = this.iPhoneBuildNumber !== undefined ? this.iPhoneBuildNumber : undefined;
        data["AndroidBuildNumber"] = this.androidBuildNumber !== undefined ? this.androidBuildNumber : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new VersionInfo(JSON.parse(json));
    }
}

export enum IncidentReportFormModelReportType {
    _0 = 0, 
    _1 = 1, 
    _2 = 2, 
    _3 = 3, 
}

export enum IncidentReportModelIncidentReportTypeId {
    _0 = 0, 
    _1 = 1, 
    _2 = 2, 
    _3 = 3, 
}

export enum InspectionViewModelStatus {
    _0 = 0, 
    _1 = 1, 
    _2 = 2, 
    _3 = 3, 
}

export enum FinishInspectionViewModelStatus {
    _0 = 0, 
    _1 = 1, 
    _2 = 2, 
    _3 = 3, 
}

export enum InspectionCategoryAnswerViewModelStatus {
    _0 = 0, 
    _1 = 1, 
    _2 = 2, 
    _3 = 3, 
}

export enum MaitenanceRequestType2 {
    _0 = 0, 
    _1 = 1, 
    _2 = 2, 
}

export enum MaitenanceRequestSubmittedVia {
    _0 = 0, 
    _1 = 1, 
    _2 = 2, 
    _3 = 3, 
    _4 = 4, 
}

export enum MaintenanceRequestCheckinType {
    _0 = 0, 
    _1 = 1, 
    _2 = 2, 
}

export enum PropertyState {
    _0 = 0, 
    _1 = 1, 
    _2 = 2, 
    _3 = 3, 
    _4 = 4, 
}

export enum AddCreditCardBindingModelCardType {
    _0 = 0, 
    _1 = 1, 
    _2 = 2, 
    _3 = 3, 
    _4 = 4, 
    _5 = 5, 
}

export enum PaymentOptionBindingModelType {
    _0 = 0, 
    _1 = 1, 
    _2 = 2, 
    _3 = 3, 
    _4 = 4, 
    _5 = 5, 
}

export enum PaymentLineBindingModelFormat {
    _0 = 0, 
    _1 = 1, 
    _2 = 2, 
}

export enum PropertyIndexBindingModelStatus {
    _0 = 0, 
    _1 = 1, 
    _2 = 2, 
    _3 = 3, 
    _4 = 4, 
}

export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    result: any; 

    constructor(message: string, status: number, response: string, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.result = result;
    }
}